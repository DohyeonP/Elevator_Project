
88.ELEVATOR_PROJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cca8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  0800ce58  0800ce58  0001ce58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0e4  0800d0e4  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0e4  0800d0e4  0001d0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0ec  0800d0ec  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0ec  0800d0ec  0001d0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0f0  0800d0f0  0001d0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  0800d0f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020120  2**0
                  CONTENTS
 10 .bss          0000559c  20000120  20000120  00020120  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200056bc  200056bc  00020120  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b9a1  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005699  00000000  00000000  0004baf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002228  00000000  00000000  00051190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002008  00000000  00000000  000533b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007037  00000000  00000000  000553c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029802  00000000  00000000  0005c3f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010510a  00000000  00000000  00085bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018ad03  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000096e8  00000000  00000000  0018ad54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000120 	.word	0x20000120
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ce40 	.word	0x0800ce40

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000124 	.word	0x20000124
 80001ec:	0800ce40 	.word	0x0800ce40

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <get_button>:
	BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE
};

// 완전히 눌렀다 떼면 BUTTON_RELEASE(1) 을 return
int get_button(GPIO_TypeDef *GPIO, uint16_t GPIO_PIN, uint8_t button_number)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	807b      	strh	r3, [r7, #2]
 8000500:	4613      	mov	r3, r2
 8000502:	707b      	strb	r3, [r7, #1]
	unsigned char curr_state;

	curr_state=HAL_GPIO_ReadPin(GPIO, GPIO_PIN);  // 0, 1
 8000504:	887b      	ldrh	r3, [r7, #2]
 8000506:	4619      	mov	r1, r3
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f004 fa07 	bl	800491c <HAL_GPIO_ReadPin>
 800050e:	4603      	mov	r3, r0
 8000510:	73fb      	strb	r3, [r7, #15]
	// 버튼이 눌려졌으나 처음 상태
	if (curr_state == BUTTON_PRESS && button_status[button_number]==BUTTON_RELEASE)
 8000512:	7bfb      	ldrb	r3, [r7, #15]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d10d      	bne.n	8000534 <get_button+0x40>
 8000518:	787b      	ldrb	r3, [r7, #1]
 800051a:	4a11      	ldr	r2, [pc, #68]	; (8000560 <get_button+0x6c>)
 800051c:	5cd3      	ldrb	r3, [r2, r3]
 800051e:	2b01      	cmp	r3, #1
 8000520:	d108      	bne.n	8000534 <get_button+0x40>
	{
		HAL_Delay(80);  // noise가 지나가기를 기다린다.
 8000522:	2050      	movs	r0, #80	; 0x50
 8000524:	f002 ff02 	bl	800332c <HAL_Delay>
		button_status[button_number]=BUTTON_PRESS;   // 현재의 버튼 상태를 저장
 8000528:	787b      	ldrb	r3, [r7, #1]
 800052a:	4a0d      	ldr	r2, [pc, #52]	; (8000560 <get_button+0x6c>)
 800052c:	2100      	movs	r1, #0
 800052e:	54d1      	strb	r1, [r2, r3]
		return BUTTON_RELEASE;  // 버튼이 눌려진 상태이나 아직은 noise상태로 인정
 8000530:	2301      	movs	r3, #1
 8000532:	e011      	b.n	8000558 <get_button+0x64>
	}
	else if (curr_state == BUTTON_RELEASE && button_status[button_number]==BUTTON_PRESS)
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d10d      	bne.n	8000556 <get_button+0x62>
 800053a:	787b      	ldrb	r3, [r7, #1]
 800053c:	4a08      	ldr	r2, [pc, #32]	; (8000560 <get_button+0x6c>)
 800053e:	5cd3      	ldrb	r3, [r2, r3]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d108      	bne.n	8000556 <get_button+0x62>
	{     // 1. 이전에 버튼이 눌려진 상태였고 지금은 버튼을 뗀 상태 이면
		HAL_Delay(30);  // noise가 지나가기를 기다린다.
 8000544:	201e      	movs	r0, #30
 8000546:	f002 fef1 	bl	800332c <HAL_Delay>
		button_status[button_number]=BUTTON_RELEASE;  // 2. button_status table을 초기화 하고
 800054a:	787b      	ldrb	r3, [r7, #1]
 800054c:	4a04      	ldr	r2, [pc, #16]	; (8000560 <get_button+0x6c>)
 800054e:	2101      	movs	r1, #1
 8000550:	54d1      	strb	r1, [r2, r3]
		return BUTTON_PRESS;   // 3. 버튼을 1번 눌렀다 뗀것으로 인정 한다.
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <get_button+0x64>
	}
	return BUTTON_RELEASE;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000000 	.word	0x20000000

08000564 <write_column_data>:

// 8 x 8 dot matrix 를 출력할 데이터
unsigned char display_data[8];

void write_column_data(int column)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	for (int i=0; i<8; i++)
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	e01f      	b.n	80005b2 <write_column_data+0x4e>
	{
		if (i == column)
 8000572:	68fa      	ldr	r2, [r7, #12]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	429a      	cmp	r2, r3
 8000578:	d10c      	bne.n	8000594 <write_column_data+0x30>
			HAL_GPIO_WritePin(col_port[i], col_pin[i], 0); // on
 800057a:	4a12      	ldr	r2, [pc, #72]	; (80005c4 <write_column_data+0x60>)
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000582:	4a11      	ldr	r2, [pc, #68]	; (80005c8 <write_column_data+0x64>)
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800058a:	2200      	movs	r2, #0
 800058c:	4619      	mov	r1, r3
 800058e:	f004 f9dd 	bl	800494c <HAL_GPIO_WritePin>
 8000592:	e00b      	b.n	80005ac <write_column_data+0x48>
		else
			HAL_GPIO_WritePin(col_port[i], col_pin[i], 1); // off
 8000594:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <write_column_data+0x60>)
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800059c:	4a0a      	ldr	r2, [pc, #40]	; (80005c8 <write_column_data+0x64>)
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005a4:	2201      	movs	r2, #1
 80005a6:	4619      	mov	r1, r3
 80005a8:	f004 f9d0 	bl	800494c <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++)
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	3301      	adds	r3, #1
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2b07      	cmp	r3, #7
 80005b6:	dddc      	ble.n	8000572 <write_column_data+0xe>
	}
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000018 	.word	0x20000018
 80005c8:	20000058 	.word	0x20000058

080005cc <write_row_data>:

void write_row_data(unsigned char data)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	unsigned char d = data;
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	72fb      	strb	r3, [r7, #11]

	for (int i=0; i<8; i++)
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	e023      	b.n	8000628 <write_row_data+0x5c>
	{
		if ( d & (1 << i))
 80005e0:	7afa      	ldrb	r2, [r7, #11]
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	fa42 f303 	asr.w	r3, r2, r3
 80005e8:	f003 0301 	and.w	r3, r3, #1
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d00c      	beq.n	800060a <write_row_data+0x3e>
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 1);
 80005f0:	4a11      	ldr	r2, [pc, #68]	; (8000638 <write_row_data+0x6c>)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005f8:	4a10      	ldr	r2, [pc, #64]	; (800063c <write_row_data+0x70>)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000600:	2201      	movs	r2, #1
 8000602:	4619      	mov	r1, r3
 8000604:	f004 f9a2 	bl	800494c <HAL_GPIO_WritePin>
 8000608:	e00b      	b.n	8000622 <write_row_data+0x56>
		else
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 0);
 800060a:	4a0b      	ldr	r2, [pc, #44]	; (8000638 <write_row_data+0x6c>)
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000612:	4a0a      	ldr	r2, [pc, #40]	; (800063c <write_row_data+0x70>)
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800061a:	2200      	movs	r2, #0
 800061c:	4619      	mov	r1, r3
 800061e:	f004 f995 	bl	800494c <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++)
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	3301      	adds	r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	2b07      	cmp	r3, #7
 800062c:	ddd8      	ble.n	80005e0 <write_row_data+0x14>
	}
}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000038 	.word	0x20000038
 800063c:	20000068 	.word	0x20000068

08000640 <dotmatrix_clear>:

void dotmatrix_clear(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
	for (int i=0; i<8; i++)
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	e00e      	b.n	800066a <dotmatrix_clear+0x2a>
	{
		HAL_GPIO_WritePin(col_port[i], col_pin[i], 1); // off
 800064c:	4a0b      	ldr	r2, [pc, #44]	; (800067c <dotmatrix_clear+0x3c>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000654:	4a0a      	ldr	r2, [pc, #40]	; (8000680 <dotmatrix_clear+0x40>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800065c:	2201      	movs	r2, #1
 800065e:	4619      	mov	r1, r3
 8000660:	f004 f974 	bl	800494c <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3301      	adds	r3, #1
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b07      	cmp	r3, #7
 800066e:	dded      	ble.n	800064c <dotmatrix_clear+0xc>
	}
}
 8000670:	bf00      	nop
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000018 	.word	0x20000018
 8000680:	20000058 	.word	0x20000058

08000684 <dotmatrix_processing>:

// scroll 문자 출력 프로그램
int dotmatrix_processing(int flag)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	static int count = 0;

	// 이전 tick 값 저장
	static uint32_t past_time=0;

	if (flag == 1) // UP!
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d155      	bne.n	800073e <dotmatrix_processing+0xba>
	{
		uint32_t now = HAL_GetTick(); // 1ms
 8000692:	f002 fe3f 	bl	8003314 <HAL_GetTick>
 8000696:	60b8      	str	r0, [r7, #8]

		// 처음 시작 시 past time = 0
		// polling 방식으로 작동하기 때문에 500 이 넘을 때 조건을 검사할 경우도 있다.
		// 그렇기 때문에 500 보다 크거나 같은 조건을 줘야 한다.
		// 500 과 같은 조건을 체크하면 안된다!
		if (now - past_time >= 100)
 8000698:	4b59      	ldr	r3, [pc, #356]	; (8000800 <dotmatrix_processing+0x17c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	68ba      	ldr	r2, [r7, #8]
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	2b63      	cmp	r3, #99	; 0x63
 80006a2:	d935      	bls.n	8000710 <dotmatrix_processing+0x8c>
		{
			past_time = now;
 80006a4:	4a56      	ldr	r2, [pc, #344]	; (8000800 <dotmatrix_processing+0x17c>)
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	6013      	str	r3, [r2, #0]

			for (int i=0; i<8; i++)
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
 80006ae:	e020      	b.n	80006f2 <dotmatrix_processing+0x6e>
			{
				display_data[i] = (up_data[i] << count) | (up_data[i] >> (8 - count));
 80006b0:	4a54      	ldr	r2, [pc, #336]	; (8000804 <dotmatrix_processing+0x180>)
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	4413      	add	r3, r2
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b53      	ldr	r3, [pc, #332]	; (8000808 <dotmatrix_processing+0x184>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	fa02 f303 	lsl.w	r3, r2, r3
 80006c2:	b25a      	sxtb	r2, r3
 80006c4:	494f      	ldr	r1, [pc, #316]	; (8000804 <dotmatrix_processing+0x180>)
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	440b      	add	r3, r1
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	4619      	mov	r1, r3
 80006ce:	4b4e      	ldr	r3, [pc, #312]	; (8000808 <dotmatrix_processing+0x184>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f1c3 0308 	rsb	r3, r3, #8
 80006d6:	fa41 f303 	asr.w	r3, r1, r3
 80006da:	b25b      	sxtb	r3, r3
 80006dc:	4313      	orrs	r3, r2
 80006de:	b25b      	sxtb	r3, r3
 80006e0:	b2d9      	uxtb	r1, r3
 80006e2:	4a4a      	ldr	r2, [pc, #296]	; (800080c <dotmatrix_processing+0x188>)
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	4413      	add	r3, r2
 80006e8:	460a      	mov	r2, r1
 80006ea:	701a      	strb	r2, [r3, #0]
			for (int i=0; i<8; i++)
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	3301      	adds	r3, #1
 80006f0:	61fb      	str	r3, [r7, #28]
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	2b07      	cmp	r3, #7
 80006f6:	dddb      	ble.n	80006b0 <dotmatrix_processing+0x2c>
			}

			if (++count >= 8)
 80006f8:	4b43      	ldr	r3, [pc, #268]	; (8000808 <dotmatrix_processing+0x184>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	3301      	adds	r3, #1
 80006fe:	4a42      	ldr	r2, [pc, #264]	; (8000808 <dotmatrix_processing+0x184>)
 8000700:	6013      	str	r3, [r2, #0]
 8000702:	4b41      	ldr	r3, [pc, #260]	; (8000808 <dotmatrix_processing+0x184>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2b07      	cmp	r3, #7
 8000708:	dd02      	ble.n	8000710 <dotmatrix_processing+0x8c>
			{
				count = 0;
 800070a:	4b3f      	ldr	r3, [pc, #252]	; (8000808 <dotmatrix_processing+0x184>)
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
			}
		}

		for(int i=0; i<8; i++)
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
 8000714:	e00f      	b.n	8000736 <dotmatrix_processing+0xb2>
		{
			// common anode 방식
			// column 에는 low, row 에는 high 를 출력해야 해당 LED 가 켜진다.
			write_column_data(i);
 8000716:	69b8      	ldr	r0, [r7, #24]
 8000718:	f7ff ff24 	bl	8000564 <write_column_data>
			write_row_data(display_data[i]);
 800071c:	4a3b      	ldr	r2, [pc, #236]	; (800080c <dotmatrix_processing+0x188>)
 800071e:	69bb      	ldr	r3, [r7, #24]
 8000720:	4413      	add	r3, r2
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff51 	bl	80005cc <write_row_data>

			HAL_Delay(1);
 800072a:	2001      	movs	r0, #1
 800072c:	f002 fdfe 	bl	800332c <HAL_Delay>
		for(int i=0; i<8; i++)
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	3301      	adds	r3, #1
 8000734:	61bb      	str	r3, [r7, #24]
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	2b07      	cmp	r3, #7
 800073a:	ddec      	ble.n	8000716 <dotmatrix_processing+0x92>
 800073c:	e05a      	b.n	80007f4 <dotmatrix_processing+0x170>
		}
	}
	else if (flag == 2) // DOWN!
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2b02      	cmp	r3, #2
 8000742:	d155      	bne.n	80007f0 <dotmatrix_processing+0x16c>
	{
		uint32_t now = HAL_GetTick(); // 1ms
 8000744:	f002 fde6 	bl	8003314 <HAL_GetTick>
 8000748:	60f8      	str	r0, [r7, #12]

		// 처음 시작 시 past time = 0
		// polling 방식으로 작동하기 때문에 500 이 넘을 때 조건을 검사할 경우도 있다.
		// 그렇기 때문에 500 보다 크거나 같은 조건을 줘야 한다.
		// 500 과 같은 조건을 체크하면 안된다!
		if (now - past_time >= 100)
 800074a:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <dotmatrix_processing+0x17c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	2b63      	cmp	r3, #99	; 0x63
 8000754:	d935      	bls.n	80007c2 <dotmatrix_processing+0x13e>
		{
			past_time = now;
 8000756:	4a2a      	ldr	r2, [pc, #168]	; (8000800 <dotmatrix_processing+0x17c>)
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	6013      	str	r3, [r2, #0]

			for (int i=0; i<8; i++)
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	e020      	b.n	80007a4 <dotmatrix_processing+0x120>
			{
				display_data[i] = (down_data[i] >> count) | (down_data[i] << (8 - count));
 8000762:	4a2b      	ldr	r2, [pc, #172]	; (8000810 <dotmatrix_processing+0x18c>)
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	4413      	add	r3, r2
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	4b26      	ldr	r3, [pc, #152]	; (8000808 <dotmatrix_processing+0x184>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	fa42 f303 	asr.w	r3, r2, r3
 8000774:	b25a      	sxtb	r2, r3
 8000776:	4926      	ldr	r1, [pc, #152]	; (8000810 <dotmatrix_processing+0x18c>)
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	440b      	add	r3, r1
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	4619      	mov	r1, r3
 8000780:	4b21      	ldr	r3, [pc, #132]	; (8000808 <dotmatrix_processing+0x184>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f1c3 0308 	rsb	r3, r3, #8
 8000788:	fa01 f303 	lsl.w	r3, r1, r3
 800078c:	b25b      	sxtb	r3, r3
 800078e:	4313      	orrs	r3, r2
 8000790:	b25b      	sxtb	r3, r3
 8000792:	b2d9      	uxtb	r1, r3
 8000794:	4a1d      	ldr	r2, [pc, #116]	; (800080c <dotmatrix_processing+0x188>)
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	4413      	add	r3, r2
 800079a:	460a      	mov	r2, r1
 800079c:	701a      	strb	r2, [r3, #0]
			for (int i=0; i<8; i++)
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	3301      	adds	r3, #1
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	2b07      	cmp	r3, #7
 80007a8:	dddb      	ble.n	8000762 <dotmatrix_processing+0xde>
			}

			if (++count >= 8)
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <dotmatrix_processing+0x184>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	3301      	adds	r3, #1
 80007b0:	4a15      	ldr	r2, [pc, #84]	; (8000808 <dotmatrix_processing+0x184>)
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <dotmatrix_processing+0x184>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b07      	cmp	r3, #7
 80007ba:	dd02      	ble.n	80007c2 <dotmatrix_processing+0x13e>
			{
				count = 0;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <dotmatrix_processing+0x184>)
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
			}
		}

		for(int i=0; i<8; i++)
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	e00f      	b.n	80007e8 <dotmatrix_processing+0x164>
		{
			// common anode 방식
			// column 에는 low, row 에는 high 를 출력해야 해당 LED 가 켜진다.
			write_column_data(i);
 80007c8:	6938      	ldr	r0, [r7, #16]
 80007ca:	f7ff fecb 	bl	8000564 <write_column_data>
			write_row_data(display_data[i]);
 80007ce:	4a0f      	ldr	r2, [pc, #60]	; (800080c <dotmatrix_processing+0x188>)
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	4413      	add	r3, r2
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff fef8 	bl	80005cc <write_row_data>

			HAL_Delay(1);
 80007dc:	2001      	movs	r0, #1
 80007de:	f002 fda5 	bl	800332c <HAL_Delay>
		for(int i=0; i<8; i++)
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	3301      	adds	r3, #1
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
 80007ea:	2b07      	cmp	r3, #7
 80007ec:	ddec      	ble.n	80007c8 <dotmatrix_processing+0x144>
 80007ee:	e001      	b.n	80007f4 <dotmatrix_processing+0x170>
		}
	}
	else
	{
		dotmatrix_clear();
 80007f0:	f7ff ff26 	bl	8000640 <dotmatrix_clear>
	}

	return 0;
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3720      	adds	r7, #32
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000144 	.word	0x20000144
 8000804:	20000008 	.word	0x20000008
 8000808:	20000148 	.word	0x20000148
 800080c:	2000013c 	.word	0x2000013c
 8000810:	20000010 	.word	0x20000010

08000814 <fnd_processing>:
};

uint16_t FND_all = FND_a|FND_b|FND_c|FND_d|FND_e|FND_f|FND_g|FND_p;

void fnd_processing(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FND_DATA_PORT, FND_all, GPIO_PIN_SET);
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <fnd_processing+0x30>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	2201      	movs	r2, #1
 800081e:	4619      	mov	r1, r3
 8000820:	4809      	ldr	r0, [pc, #36]	; (8000848 <fnd_processing+0x34>)
 8000822:	f004 f893 	bl	800494c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FND_DATA_PORT, FND_font[e_floor]|FND_p, GPIO_PIN_RESET);
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <fnd_processing+0x38>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a09      	ldr	r2, [pc, #36]	; (8000850 <fnd_processing+0x3c>)
 800082c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000830:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000834:	b29b      	uxth	r3, r3
 8000836:	2200      	movs	r2, #0
 8000838:	4619      	mov	r1, r3
 800083a:	4803      	ldr	r0, [pc, #12]	; (8000848 <fnd_processing+0x34>)
 800083c:	f004 f886 	bl	800494c <HAL_GPIO_WritePin>
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	2000008c 	.word	0x2000008c
 8000848:	40020400 	.word	0x40020400
 800084c:	20000ba0 	.word	0x20000ba0
 8000850:	20000078 	.word	0x20000078

08000854 <lcd_command>:
		HAL_Delay(500);
	}
}

void lcd_command(uint8_t command)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af02      	add	r7, sp, #8
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	f023 030f 	bic.w	r3, r3, #15
 8000864:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	011b      	lsls	r3, r3, #4
 800086a:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	f043 030c 	orr.w	r3, r3, #12
 8000872:	b2db      	uxtb	r3, r3
 8000874:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	f043 0308 	orr.w	r3, r3, #8
 800087c:	b2db      	uxtb	r3, r3
 800087e:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8000880:	7bbb      	ldrb	r3, [r7, #14]
 8000882:	f043 030c 	orr.w	r3, r3, #12
 8000886:	b2db      	uxtb	r3, r3
 8000888:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 800088a:	7bbb      	ldrb	r3, [r7, #14]
 800088c:	f043 0308 	orr.w	r3, r3, #8
 8000890:	b2db      	uxtb	r3, r3
 8000892:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8000894:	bf00      	nop
 8000896:	f107 0208 	add.w	r2, r7, #8
 800089a:	2364      	movs	r3, #100	; 0x64
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	2304      	movs	r3, #4
 80008a0:	214e      	movs	r1, #78	; 0x4e
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <lcd_command+0x64>)
 80008a4:	f004 f9c8 	bl	8004c38 <HAL_I2C_Master_Transmit>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d1f3      	bne.n	8000896 <lcd_command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 80008ae:	bf00      	nop
}
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200003bc 	.word	0x200003bc

080008bc <lcd_data>:

// 1 byte write
void lcd_data(uint8_t data)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af02      	add	r7, sp, #8
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	f023 030f 	bic.w	r3, r3, #15
 80008cc:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	011b      	lsls	r3, r3, #4
 80008d2:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	f043 030d 	orr.w	r3, r3, #13
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	f043 0309 	orr.w	r3, r3, #9
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 80008e8:	7bbb      	ldrb	r3, [r7, #14]
 80008ea:	f043 030d 	orr.w	r3, r3, #13
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 80008f2:	7bbb      	ldrb	r3, [r7, #14]
 80008f4:	f043 0309 	orr.w	r3, r3, #9
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 80008fc:	bf00      	nop
 80008fe:	f107 0208 	add.w	r2, r7, #8
 8000902:	2364      	movs	r3, #100	; 0x64
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	2304      	movs	r3, #4
 8000908:	214e      	movs	r1, #78	; 0x4e
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <lcd_data+0x64>)
 800090c:	f004 f994 	bl	8004c38 <HAL_I2C_Master_Transmit>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d1f3      	bne.n	80008fe <lcd_data+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 8000916:	bf00      	nop
}
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200003bc 	.word	0x200003bc

08000924 <i2c_lcd_init>:
// lcd 초기화
void i2c_lcd_init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

	lcd_command(0x33);
 8000928:	2033      	movs	r0, #51	; 0x33
 800092a:	f7ff ff93 	bl	8000854 <lcd_command>
	lcd_command(0x32);
 800092e:	2032      	movs	r0, #50	; 0x32
 8000930:	f7ff ff90 	bl	8000854 <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 8000934:	2028      	movs	r0, #40	; 0x28
 8000936:	f7ff ff8d 	bl	8000854 <lcd_command>
	lcd_command(DISPLAY_ON);
 800093a:	200c      	movs	r0, #12
 800093c:	f7ff ff8a 	bl	8000854 <lcd_command>
	lcd_command(0x06);	//Entry mode set
 8000940:	2006      	movs	r0, #6
 8000942:	f7ff ff87 	bl	8000854 <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 8000946:	2001      	movs	r0, #1
 8000948:	f7ff ff84 	bl	8000854 <lcd_command>
	HAL_Delay(2);
 800094c:	2002      	movs	r0, #2
 800094e:	f002 fced 	bl	800332c <HAL_Delay>
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}

08000956 <lcd_string>:

// null을 만날때 까지 string을 LCD에 출력
void lcd_string(uint8_t *str)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
	while(*str)
 800095e:	e006      	b.n	800096e <lcd_string+0x18>
	{
		lcd_data(*str++);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	1c5a      	adds	r2, r3, #1
 8000964:	607a      	str	r2, [r7, #4]
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff ffa7 	bl	80008bc <lcd_data>
	while(*str)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1f4      	bne.n	8000960 <lcd_string+0xa>
	}
}
 8000976:	bf00      	nop
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <move_cursor>:

// 해당 줄,col으로 이동 하는 함수
void move_cursor(uint8_t row, uint8_t column)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	460a      	mov	r2, r1
 800098a:	71fb      	strb	r3, [r7, #7]
 800098c:	4613      	mov	r3, r2
 800098e:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	019b      	lsls	r3, r3, #6
 8000994:	b2da      	uxtb	r2, r3
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	4313      	orrs	r3, r2
 800099a:	b2db      	uxtb	r3, r3
 800099c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ff56 	bl	8000854 <lcd_command>
	return;
 80009a8:	bf00      	nop
}
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80009b8:	1d39      	adds	r1, r7, #4
 80009ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009be:	2201      	movs	r2, #1
 80009c0:	4803      	ldr	r0, [pc, #12]	; (80009d0 <__io_putchar+0x20>)
 80009c2:	f007 fba4 	bl	800810e <HAL_UART_Transmit>

  return ch;
 80009c6:	687b      	ldr	r3, [r7, #4]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200005e0 	.word	0x200005e0

080009d4 <delay_us>:

// move from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_tim.c to here
// enter here when every timer INT occurs

void delay_us(unsigned long us)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim11,0);   // tim11 clear
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <delay_us+0x2c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2200      	movs	r2, #0
 80009e2:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim11) < us);
 80009e4:	bf00      	nop
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <delay_us+0x2c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d8f9      	bhi.n	80009e6 <delay_us+0x12>
}
 80009f2:	bf00      	nop
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	20000598 	.word	0x20000598

08000a04 <HAL_GPIO_EXTI_Callback>:
// ?��?�� ?��?��!!!!!
// 1. move from Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.c to here
// 2. enter here every external interrupt
volatile int ext_inttrp_no = -1; // GPIO Pin
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	3b01      	subs	r3, #1
 8000a12:	2b0f      	cmp	r3, #15
 8000a14:	d83e      	bhi.n	8000a94 <HAL_GPIO_EXTI_Callback+0x90>
 8000a16:	a201      	add	r2, pc, #4	; (adr r2, 8000a1c <HAL_GPIO_EXTI_Callback+0x18>)
 8000a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a1c:	08000a5d 	.word	0x08000a5d
 8000a20:	08000a95 	.word	0x08000a95
 8000a24:	08000a95 	.word	0x08000a95
 8000a28:	08000a6b 	.word	0x08000a6b
 8000a2c:	08000a95 	.word	0x08000a95
 8000a30:	08000a95 	.word	0x08000a95
 8000a34:	08000a95 	.word	0x08000a95
 8000a38:	08000a79 	.word	0x08000a79
 8000a3c:	08000a95 	.word	0x08000a95
 8000a40:	08000a95 	.word	0x08000a95
 8000a44:	08000a95 	.word	0x08000a95
 8000a48:	08000a95 	.word	0x08000a95
 8000a4c:	08000a95 	.word	0x08000a95
 8000a50:	08000a95 	.word	0x08000a95
 8000a54:	08000a95 	.word	0x08000a95
 8000a58:	08000a87 	.word	0x08000a87
	{
	case PHOTO0_Pin:
		ext_inttrp_no=GPIO_Pin;
 8000a5c:	88fb      	ldrh	r3, [r7, #6]
 8000a5e:	4a11      	ldr	r2, [pc, #68]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000a60:	6013      	str	r3, [r2, #0]
		e_floor = 1;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	601a      	str	r2, [r3, #0]
		break;
 8000a68:	e015      	b.n	8000a96 <HAL_GPIO_EXTI_Callback+0x92>

	case PHOTO1_Pin:
		ext_inttrp_no=GPIO_Pin;
 8000a6a:	88fb      	ldrh	r3, [r7, #6]
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000a6e:	6013      	str	r3, [r2, #0]
		e_floor = 2;
 8000a70:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000a72:	2202      	movs	r2, #2
 8000a74:	601a      	str	r2, [r3, #0]
		break;
 8000a76:	e00e      	b.n	8000a96 <HAL_GPIO_EXTI_Callback+0x92>

	case PHOTO2_Pin:
		ext_inttrp_no=GPIO_Pin;
 8000a78:	88fb      	ldrh	r3, [r7, #6]
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000a7c:	6013      	str	r3, [r2, #0]
		e_floor = 3;
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000a80:	2203      	movs	r2, #3
 8000a82:	601a      	str	r2, [r3, #0]
		break;
 8000a84:	e007      	b.n	8000a96 <HAL_GPIO_EXTI_Callback+0x92>

	case PHOTO3_Pin:
		ext_inttrp_no=GPIO_Pin;
 8000a86:	88fb      	ldrh	r3, [r7, #6]
 8000a88:	4a06      	ldr	r2, [pc, #24]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000a8a:	6013      	str	r3, [r2, #0]
		e_floor = 4;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000a8e:	2204      	movs	r2, #4
 8000a90:	601a      	str	r2, [r3, #0]
		break;
 8000a92:	e000      	b.n	8000a96 <HAL_GPIO_EXTI_Callback+0x92>

	default:
		break;
 8000a94:	bf00      	nop
	}
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000090 	.word	0x20000090
 8000aa8:	20000ba0 	.word	0x20000ba0

08000aac <HAL_ADC_ConvCpltCallback>:

// 조도 ?��?��!!!!
uint16_t adcValue[4];
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a08      	ldr	r2, [pc, #32]	; (8000adc <HAL_ADC_ConvCpltCallback+0x30>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d109      	bne.n	8000ad2 <HAL_ADC_ConvCpltCallback+0x26>
	{
		adcValue[0] = HAL_ADC_GetValue(&hadc1);
 8000abe:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <HAL_ADC_ConvCpltCallback+0x34>)
 8000ac0:	f002 fe8a 	bl	80037d8 <HAL_ADC_GetValue>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_ADC_ConvCpltCallback+0x38>)
 8000aca:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start_IT(&hadc1);
 8000acc:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <HAL_ADC_ConvCpltCallback+0x34>)
 8000ace:	f002 fc95 	bl	80033fc <HAL_ADC_Start_IT>
	}
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40012000 	.word	0x40012000
 8000ae0:	200002c4 	.word	0x200002c4
 8000ae4:	20000ba8 	.word	0x20000ba8

08000ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aec:	f002 fbdc 	bl	80032a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af0:	f000 f8a8 	bl	8000c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af4:	f000 fc88 	bl	8001408 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000af8:	f000 fc04 	bl	8001304 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000afc:	f000 fc56 	bl	80013ac <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 8000b00:	f000 fc2a 	bl	8001358 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8000b04:	f000 fbb6 	bl	8001274 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000b08:	f000 fbd8 	bl	80012bc <MX_TIM11_Init>
  MX_TIM3_Init();
 8000b0c:	f000 fa9a 	bl	8001044 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b10:	f000 faec 	bl	80010ec <MX_TIM4_Init>
  MX_TIM2_Init();
 8000b14:	f000 fa3c 	bl	8000f90 <MX_TIM2_Init>
  MX_RTC_Init();
 8000b18:	f000 f9e0 	bl	8000edc <MX_RTC_Init>
  MX_TIM5_Init();
 8000b1c:	f000 fb34 	bl	8001188 <MX_TIM5_Init>
  MX_I2C1_Init();
 8000b20:	f000 f99c 	bl	8000e5c <MX_I2C1_Init>
  MX_ADC1_Init();
 8000b24:	f000 f8fa 	bl	8000d1c <MX_ADC1_Init>
  MX_ETH_Init();
 8000b28:	f000 f94a 	bl	8000dc0 <MX_ETH_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);   // assing to RX INT
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	492a      	ldr	r1, [pc, #168]	; (8000bd8 <main+0xf0>)
 8000b30:	482a      	ldr	r0, [pc, #168]	; (8000bdc <main+0xf4>)
 8000b32:	f007 fb7e 	bl	8008232 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);   // for BT assing to RX INT
 8000b36:	2201      	movs	r2, #1
 8000b38:	4929      	ldr	r1, [pc, #164]	; (8000be0 <main+0xf8>)
 8000b3a:	482a      	ldr	r0, [pc, #168]	; (8000be4 <main+0xfc>)
 8000b3c:	f007 fb79 	bl	8008232 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);   // ADD_SIKWON_1011
 8000b40:	4829      	ldr	r0, [pc, #164]	; (8000be8 <main+0x100>)
 8000b42:	f005 fe27 	bl	8006794 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);   // ADD_SIKWON_1011
 8000b46:	4829      	ldr	r0, [pc, #164]	; (8000bec <main+0x104>)
 8000b48:	f005 fe24 	bl	8006794 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   // for count pulse(rising edge & falling edge)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4828      	ldr	r0, [pc, #160]	; (8000bf0 <main+0x108>)
 8000b50:	f006 f90e 	bl	8006d70 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);  // for DC motor PWM control
 8000b54:	2100      	movs	r1, #0
 8000b56:	4827      	ldr	r0, [pc, #156]	; (8000bf4 <main+0x10c>)
 8000b58:	f005 ffa4 	bl	8006aa4 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);   // for SERVO motor PWM control
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4826      	ldr	r0, [pc, #152]	; (8000bf8 <main+0x110>)
 8000b60:	f005 fed8 	bl	8006914 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);   // PIEZO Buzzer
 8000b64:	210c      	movs	r1, #12
 8000b66:	4825      	ldr	r0, [pc, #148]	; (8000bfc <main+0x114>)
 8000b68:	f005 fed4 	bl	8006914 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_IT(&hadc1);
 8000b6c:	4824      	ldr	r0, [pc, #144]	; (8000c00 <main+0x118>)
 8000b6e:	f002 fc45 	bl	80033fc <HAL_ADC_Start_IT>
//  DHT11_Init();
  i2c_lcd_init();
 8000b72:	f7ff fed7 	bl	8000924 <i2c_lcd_init>

  TIM10_10ms_counter=0;
 8000b76:	4b23      	ldr	r3, [pc, #140]	; (8000c04 <main+0x11c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
//  buzzer_main();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b7c:	f008 fe38 	bl	80097f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b80:	4a21      	ldr	r2, [pc, #132]	; (8000c08 <main+0x120>)
 8000b82:	2100      	movs	r1, #0
 8000b84:	4821      	ldr	r0, [pc, #132]	; (8000c0c <main+0x124>)
 8000b86:	f008 fe7d 	bl	8009884 <osThreadNew>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	4a20      	ldr	r2, [pc, #128]	; (8000c10 <main+0x128>)
 8000b8e:	6013      	str	r3, [r2, #0]

  /* creation of StepMotorTask */
  StepMotorTaskHandle = osThreadNew(step_motor_task, NULL, &StepMotorTask_attributes);
 8000b90:	4a20      	ldr	r2, [pc, #128]	; (8000c14 <main+0x12c>)
 8000b92:	2100      	movs	r1, #0
 8000b94:	4820      	ldr	r0, [pc, #128]	; (8000c18 <main+0x130>)
 8000b96:	f008 fe75 	bl	8009884 <osThreadNew>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	4a1f      	ldr	r2, [pc, #124]	; (8000c1c <main+0x134>)
 8000b9e:	6013      	str	r3, [r2, #0]

  /* creation of DotMatrixTask */
  DotMatrixTaskHandle = osThreadNew(dot_matrix_task, NULL, &DotMatrixTask_attributes);
 8000ba0:	4a1f      	ldr	r2, [pc, #124]	; (8000c20 <main+0x138>)
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	481f      	ldr	r0, [pc, #124]	; (8000c24 <main+0x13c>)
 8000ba6:	f008 fe6d 	bl	8009884 <osThreadNew>
 8000baa:	4603      	mov	r3, r0
 8000bac:	4a1e      	ldr	r2, [pc, #120]	; (8000c28 <main+0x140>)
 8000bae:	6013      	str	r3, [r2, #0]

  /* creation of CdsTask */
  CdsTaskHandle = osThreadNew(cds_task, NULL, &CdsTask_attributes);
 8000bb0:	4a1e      	ldr	r2, [pc, #120]	; (8000c2c <main+0x144>)
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	481e      	ldr	r0, [pc, #120]	; (8000c30 <main+0x148>)
 8000bb6:	f008 fe65 	bl	8009884 <osThreadNew>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	4a1d      	ldr	r2, [pc, #116]	; (8000c34 <main+0x14c>)
 8000bbe:	6013      	str	r3, [r2, #0]

  /* creation of FndTask */
  FndTaskHandle = osThreadNew(fnd_task, NULL, &FndTask_attributes);
 8000bc0:	4a1d      	ldr	r2, [pc, #116]	; (8000c38 <main+0x150>)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	481d      	ldr	r0, [pc, #116]	; (8000c3c <main+0x154>)
 8000bc6:	f008 fe5d 	bl	8009884 <osThreadNew>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	4a1c      	ldr	r2, [pc, #112]	; (8000c40 <main+0x158>)
 8000bce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000bd0:	f008 fe32 	bl	8009838 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <main+0xec>
 8000bd6:	bf00      	nop
 8000bd8:	20000b88 	.word	0x20000b88
 8000bdc:	200005e0 	.word	0x200005e0
 8000be0:	20000b89 	.word	0x20000b89
 8000be4:	20000624 	.word	0x20000624
 8000be8:	20000550 	.word	0x20000550
 8000bec:	20000598 	.word	0x20000598
 8000bf0:	20000478 	.word	0x20000478
 8000bf4:	200004c0 	.word	0x200004c0
 8000bf8:	20000430 	.word	0x20000430
 8000bfc:	20000508 	.word	0x20000508
 8000c00:	200002c4 	.word	0x200002c4
 8000c04:	20000b8c 	.word	0x20000b8c
 8000c08:	0800cfb4 	.word	0x0800cfb4
 8000c0c:	080016c5 	.word	0x080016c5
 8000c10:	20000b74 	.word	0x20000b74
 8000c14:	0800cfd8 	.word	0x0800cfd8
 8000c18:	080016d5 	.word	0x080016d5
 8000c1c:	20000b78 	.word	0x20000b78
 8000c20:	0800cffc 	.word	0x0800cffc
 8000c24:	080016e9 	.word	0x080016e9
 8000c28:	20000b7c 	.word	0x20000b7c
 8000c2c:	0800d020 	.word	0x0800d020
 8000c30:	08001709 	.word	0x08001709
 8000c34:	20000b80 	.word	0x20000b80
 8000c38:	0800d044 	.word	0x0800d044
 8000c3c:	08001781 	.word	0x08001781
 8000c40:	20000b84 	.word	0x20000b84

08000c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b094      	sub	sp, #80	; 0x50
 8000c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4a:	f107 0320 	add.w	r3, r7, #32
 8000c4e:	2230      	movs	r2, #48	; 0x30
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f00b fc7b 	bl	800c54e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <SystemClock_Config+0xd0>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	4a28      	ldr	r2, [pc, #160]	; (8000d14 <SystemClock_Config+0xd0>)
 8000c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c76:	6413      	str	r3, [r2, #64]	; 0x40
 8000c78:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <SystemClock_Config+0xd0>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	4b23      	ldr	r3, [pc, #140]	; (8000d18 <SystemClock_Config+0xd4>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a22      	ldr	r2, [pc, #136]	; (8000d18 <SystemClock_Config+0xd4>)
 8000c8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c92:	6013      	str	r3, [r2, #0]
 8000c94:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <SystemClock_Config+0xd4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000ca0:	2309      	movs	r3, #9
 8000ca2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ca4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000caa:	2301      	movs	r3, #1
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cb8:	2304      	movs	r3, #4
 8000cba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000cbc:	23a8      	movs	r3, #168	; 0xa8
 8000cbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cc4:	2307      	movs	r3, #7
 8000cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc8:	f107 0320 	add.w	r3, r7, #32
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f004 fc53 	bl	8005578 <HAL_RCC_OscConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000cd8:	f000 fd90 	bl	80017fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cdc:	230f      	movs	r3, #15
 8000cde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ce8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	2105      	movs	r1, #5
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f004 feb4 	bl	8005a68 <HAL_RCC_ClockConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000d06:	f000 fd79 	bl	80017fc <Error_Handler>
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	3750      	adds	r7, #80	; 0x50
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40007000 	.word	0x40007000

08000d1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d22:	463b      	mov	r3, r7
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d2e:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d30:	4a21      	ldr	r2, [pc, #132]	; (8000db8 <MX_ADC1_Init+0x9c>)
 8000d32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d34:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d3c:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d42:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d4e:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d56:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d5c:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d5e:	4a17      	ldr	r2, [pc, #92]	; (8000dbc <MX_ADC1_Init+0xa0>)
 8000d60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d76:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d7c:	480d      	ldr	r0, [pc, #52]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d7e:	f002 faf9 	bl	8003374 <HAL_ADC_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d88:	f000 fd38 	bl	80017fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d90:	2301      	movs	r3, #1
 8000d92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000d94:	2307      	movs	r3, #7
 8000d96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d98:	463b      	mov	r3, r7
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d9e:	f002 fd3d 	bl	800381c <HAL_ADC_ConfigChannel>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000da8:	f000 fd28 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	200002c4 	.word	0x200002c4
 8000db8:	40012000 	.word	0x40012000
 8000dbc:	0f000001 	.word	0x0f000001

08000dc0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000dc4:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <MX_ETH_Init+0x84>)
 8000dc6:	4a20      	ldr	r2, [pc, #128]	; (8000e48 <MX_ETH_Init+0x88>)
 8000dc8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000dca:	4b20      	ldr	r3, [pc, #128]	; (8000e4c <MX_ETH_Init+0x8c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000dd0:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <MX_ETH_Init+0x8c>)
 8000dd2:	2280      	movs	r2, #128	; 0x80
 8000dd4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000dd6:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <MX_ETH_Init+0x8c>)
 8000dd8:	22e1      	movs	r2, #225	; 0xe1
 8000dda:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <MX_ETH_Init+0x8c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000de2:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <MX_ETH_Init+0x8c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000de8:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <MX_ETH_Init+0x8c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <MX_ETH_Init+0x84>)
 8000df0:	4a16      	ldr	r2, [pc, #88]	; (8000e4c <MX_ETH_Init+0x8c>)
 8000df2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <MX_ETH_Init+0x84>)
 8000df6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000dfa:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_ETH_Init+0x84>)
 8000dfe:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <MX_ETH_Init+0x90>)
 8000e00:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <MX_ETH_Init+0x84>)
 8000e04:	4a13      	ldr	r2, [pc, #76]	; (8000e54 <MX_ETH_Init+0x94>)
 8000e06:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_ETH_Init+0x84>)
 8000e0a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e0e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000e10:	480c      	ldr	r0, [pc, #48]	; (8000e44 <MX_ETH_Init+0x84>)
 8000e12:	f003 f8af 	bl	8003f74 <HAL_ETH_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000e1c:	f000 fcee 	bl	80017fc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000e20:	2238      	movs	r2, #56	; 0x38
 8000e22:	2100      	movs	r1, #0
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <MX_ETH_Init+0x98>)
 8000e26:	f00b fb92 	bl	800c54e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <MX_ETH_Init+0x98>)
 8000e2c:	2221      	movs	r2, #33	; 0x21
 8000e2e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_ETH_Init+0x98>)
 8000e32:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000e36:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000e38:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <MX_ETH_Init+0x98>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	2000030c 	.word	0x2000030c
 8000e48:	40028000 	.word	0x40028000
 8000e4c:	20000bb0 	.word	0x20000bb0
 8000e50:	20000224 	.word	0x20000224
 8000e54:	20000184 	.word	0x20000184
 8000e58:	2000014c 	.word	0x2000014c

08000e5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e60:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <MX_I2C1_Init+0x74>)
 8000e62:	4a1c      	ldr	r2, [pc, #112]	; (8000ed4 <MX_I2C1_Init+0x78>)
 8000e64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <MX_I2C1_Init+0x74>)
 8000e68:	4a1b      	ldr	r2, [pc, #108]	; (8000ed8 <MX_I2C1_Init+0x7c>)
 8000e6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e6c:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <MX_I2C1_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e72:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <MX_I2C1_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <MX_I2C1_Init+0x74>)
 8000e7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <MX_I2C1_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <MX_I2C1_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e8c:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <MX_I2C1_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_I2C1_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e98:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <MX_I2C1_Init+0x74>)
 8000e9a:	f003 fd89 	bl	80049b0 <HAL_I2C_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ea4:	f000 fcaa 	bl	80017fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4809      	ldr	r0, [pc, #36]	; (8000ed0 <MX_I2C1_Init+0x74>)
 8000eac:	f004 f9cb 	bl	8005246 <HAL_I2CEx_ConfigAnalogFilter>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000eb6:	f000 fca1 	bl	80017fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <MX_I2C1_Init+0x74>)
 8000ebe:	f004 f9fe 	bl	80052be <HAL_I2CEx_ConfigDigitalFilter>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000ec8:	f000 fc98 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	200003bc 	.word	0x200003bc
 8000ed4:	40005400 	.word	0x40005400
 8000ed8:	000186a0 	.word	0x000186a0

08000edc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ef4:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <MX_RTC_Init+0xac>)
 8000ef6:	4a25      	ldr	r2, [pc, #148]	; (8000f8c <MX_RTC_Init+0xb0>)
 8000ef8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000efa:	4b23      	ldr	r3, [pc, #140]	; (8000f88 <MX_RTC_Init+0xac>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f00:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <MX_RTC_Init+0xac>)
 8000f02:	227f      	movs	r2, #127	; 0x7f
 8000f04:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f06:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <MX_RTC_Init+0xac>)
 8000f08:	22ff      	movs	r2, #255	; 0xff
 8000f0a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <MX_RTC_Init+0xac>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f12:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <MX_RTC_Init+0xac>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <MX_RTC_Init+0xac>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f1e:	481a      	ldr	r0, [pc, #104]	; (8000f88 <MX_RTC_Init+0xac>)
 8000f20:	f005 f9b4 	bl	800628c <HAL_RTC_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000f2a:	f000 fc67 	bl	80017fc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8000f2e:	2309      	movs	r3, #9
 8000f30:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x38;
 8000f32:	2338      	movs	r3, #56	; 0x38
 8000f34:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2201      	movs	r2, #1
 8000f46:	4619      	mov	r1, r3
 8000f48:	480f      	ldr	r0, [pc, #60]	; (8000f88 <MX_RTC_Init+0xac>)
 8000f4a:	f005 fa15 	bl	8006378 <HAL_RTC_SetTime>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000f54:	f000 fc52 	bl	80017fc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8000f5c:	2310      	movs	r3, #16
 8000f5e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8000f60:	2316      	movs	r3, #22
 8000f62:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000f64:	2323      	movs	r3, #35	; 0x23
 8000f66:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f68:	463b      	mov	r3, r7
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <MX_RTC_Init+0xac>)
 8000f70:	f005 fa9c 	bl	80064ac <HAL_RTC_SetDate>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000f7a:	f000 fc3f 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000410 	.word	0x20000410
 8000f8c:	40002800 	.word	0x40002800

08000f90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f96:	f107 0320 	add.w	r3, r7, #32
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]
 8000fae:	615a      	str	r2, [r3, #20]
 8000fb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fb2:	4b23      	ldr	r3, [pc, #140]	; (8001040 <MX_TIM2_Init+0xb0>)
 8000fb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fb8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <MX_TIM2_Init+0xb0>)
 8000fbc:	f240 628f 	movw	r2, #1679	; 0x68f
 8000fc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc2:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <MX_TIM2_Init+0xb0>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <MX_TIM2_Init+0xb0>)
 8000fca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <MX_TIM2_Init+0xb0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <MX_TIM2_Init+0xb0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fdc:	4818      	ldr	r0, [pc, #96]	; (8001040 <MX_TIM2_Init+0xb0>)
 8000fde:	f005 fc49 	bl	8006874 <HAL_TIM_PWM_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000fe8:	f000 fc08 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fec:	2300      	movs	r3, #0
 8000fee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ff4:	f107 0320 	add.w	r3, r7, #32
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4811      	ldr	r0, [pc, #68]	; (8001040 <MX_TIM2_Init+0xb0>)
 8000ffc:	f006 ffaa 	bl	8007f54 <HAL_TIMEx_MasterConfigSynchronization>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001006:	f000 fbf9 	bl	80017fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800100a:	2360      	movs	r3, #96	; 0x60
 800100c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 800100e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001012:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	2200      	movs	r2, #0
 8001020:	4619      	mov	r1, r3
 8001022:	4807      	ldr	r0, [pc, #28]	; (8001040 <MX_TIM2_Init+0xb0>)
 8001024:	f006 f970 	bl	8007308 <HAL_TIM_PWM_ConfigChannel>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800102e:	f000 fbe5 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001032:	4803      	ldr	r0, [pc, #12]	; (8001040 <MX_TIM2_Init+0xb0>)
 8001034:	f001 fd48 	bl	8002ac8 <HAL_TIM_MspPostInit>

}
 8001038:	bf00      	nop
 800103a:	3728      	adds	r7, #40	; 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000430 	.word	0x20000430

08001044 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001060:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <MX_TIM3_Init+0xa0>)
 8001062:	4a21      	ldr	r2, [pc, #132]	; (80010e8 <MX_TIM3_Init+0xa4>)
 8001064:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001066:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <MX_TIM3_Init+0xa0>)
 8001068:	2253      	movs	r2, #83	; 0x53
 800106a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106c:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <MX_TIM3_Init+0xa0>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <MX_TIM3_Init+0xa0>)
 8001074:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001078:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107a:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <MX_TIM3_Init+0xa0>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <MX_TIM3_Init+0xa0>)
 8001082:	2200      	movs	r2, #0
 8001084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001086:	4817      	ldr	r0, [pc, #92]	; (80010e4 <MX_TIM3_Init+0xa0>)
 8001088:	f005 fe22 	bl	8006cd0 <HAL_TIM_IC_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001092:	f000 fbb3 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800109e:	f107 0310 	add.w	r3, r7, #16
 80010a2:	4619      	mov	r1, r3
 80010a4:	480f      	ldr	r0, [pc, #60]	; (80010e4 <MX_TIM3_Init+0xa0>)
 80010a6:	f006 ff55 	bl	8007f54 <HAL_TIMEx_MasterConfigSynchronization>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80010b0:	f000 fba4 	bl	80017fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80010b4:	230a      	movs	r3, #10
 80010b6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010b8:	2301      	movs	r3, #1
 80010ba:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	2200      	movs	r2, #0
 80010c8:	4619      	mov	r1, r3
 80010ca:	4806      	ldr	r0, [pc, #24]	; (80010e4 <MX_TIM3_Init+0xa0>)
 80010cc:	f006 f880 	bl	80071d0 <HAL_TIM_IC_ConfigChannel>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80010d6:	f000 fb91 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000478 	.word	0x20000478
 80010e8:	40000400 	.word	0x40000400

080010ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001100:	463b      	mov	r3, r7
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001108:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <MX_TIM4_Init+0x94>)
 800110a:	4a1e      	ldr	r2, [pc, #120]	; (8001184 <MX_TIM4_Init+0x98>)
 800110c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 800110e:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <MX_TIM4_Init+0x94>)
 8001110:	f240 3247 	movw	r2, #839	; 0x347
 8001114:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <MX_TIM4_Init+0x94>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <MX_TIM4_Init+0x94>)
 800111e:	2263      	movs	r2, #99	; 0x63
 8001120:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <MX_TIM4_Init+0x94>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <MX_TIM4_Init+0x94>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800112e:	4814      	ldr	r0, [pc, #80]	; (8001180 <MX_TIM4_Init+0x94>)
 8001130:	f005 fae1 	bl	80066f6 <HAL_TIM_Base_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800113a:	f000 fb5f 	bl	80017fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800113e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001142:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001144:	f107 0308 	add.w	r3, r7, #8
 8001148:	4619      	mov	r1, r3
 800114a:	480d      	ldr	r0, [pc, #52]	; (8001180 <MX_TIM4_Init+0x94>)
 800114c:	f006 f99e 	bl	800748c <HAL_TIM_ConfigClockSource>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001156:	f000 fb51 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001162:	463b      	mov	r3, r7
 8001164:	4619      	mov	r1, r3
 8001166:	4806      	ldr	r0, [pc, #24]	; (8001180 <MX_TIM4_Init+0x94>)
 8001168:	f006 fef4 	bl	8007f54 <HAL_TIMEx_MasterConfigSynchronization>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001172:	f000 fb43 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200004c0 	.word	0x200004c0
 8001184:	40000800 	.word	0x40000800

08001188 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08e      	sub	sp, #56	; 0x38
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119c:	f107 0320 	add.w	r3, r7, #32
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
 80011b4:	615a      	str	r2, [r3, #20]
 80011b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011b8:	4b2c      	ldr	r3, [pc, #176]	; (800126c <MX_TIM5_Init+0xe4>)
 80011ba:	4a2d      	ldr	r2, [pc, #180]	; (8001270 <MX_TIM5_Init+0xe8>)
 80011bc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 80011be:	4b2b      	ldr	r3, [pc, #172]	; (800126c <MX_TIM5_Init+0xe4>)
 80011c0:	2233      	movs	r2, #51	; 0x33
 80011c2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c4:	4b29      	ldr	r3, [pc, #164]	; (800126c <MX_TIM5_Init+0xe4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 80011ca:	4b28      	ldr	r3, [pc, #160]	; (800126c <MX_TIM5_Init+0xe4>)
 80011cc:	f240 128f 	movw	r2, #399	; 0x18f
 80011d0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d2:	4b26      	ldr	r3, [pc, #152]	; (800126c <MX_TIM5_Init+0xe4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d8:	4b24      	ldr	r3, [pc, #144]	; (800126c <MX_TIM5_Init+0xe4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011de:	4823      	ldr	r0, [pc, #140]	; (800126c <MX_TIM5_Init+0xe4>)
 80011e0:	f005 fa89 	bl	80066f6 <HAL_TIM_Base_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80011ea:	f000 fb07 	bl	80017fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80011f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f8:	4619      	mov	r1, r3
 80011fa:	481c      	ldr	r0, [pc, #112]	; (800126c <MX_TIM5_Init+0xe4>)
 80011fc:	f006 f946 	bl	800748c <HAL_TIM_ConfigClockSource>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001206:	f000 faf9 	bl	80017fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800120a:	4818      	ldr	r0, [pc, #96]	; (800126c <MX_TIM5_Init+0xe4>)
 800120c:	f005 fb32 	bl	8006874 <HAL_TIM_PWM_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001216:	f000 faf1 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121e:	2300      	movs	r3, #0
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001222:	f107 0320 	add.w	r3, r7, #32
 8001226:	4619      	mov	r1, r3
 8001228:	4810      	ldr	r0, [pc, #64]	; (800126c <MX_TIM5_Init+0xe4>)
 800122a:	f006 fe93 	bl	8007f54 <HAL_TIMEx_MasterConfigSynchronization>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001234:	f000 fae2 	bl	80017fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001238:	2360      	movs	r3, #96	; 0x60
 800123a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 800123c:	23c7      	movs	r3, #199	; 0xc7
 800123e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	220c      	movs	r2, #12
 800124c:	4619      	mov	r1, r3
 800124e:	4807      	ldr	r0, [pc, #28]	; (800126c <MX_TIM5_Init+0xe4>)
 8001250:	f006 f85a 	bl	8007308 <HAL_TIM_PWM_ConfigChannel>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800125a:	f000 facf 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800125e:	4803      	ldr	r0, [pc, #12]	; (800126c <MX_TIM5_Init+0xe4>)
 8001260:	f001 fc32 	bl	8002ac8 <HAL_TIM_MspPostInit>

}
 8001264:	bf00      	nop
 8001266:	3738      	adds	r7, #56	; 0x38
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000508 	.word	0x20000508
 8001270:	40000c00 	.word	0x40000c00

08001274 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_TIM10_Init+0x40>)
 800127a:	4a0f      	ldr	r2, [pc, #60]	; (80012b8 <MX_TIM10_Init+0x44>)
 800127c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <MX_TIM10_Init+0x40>)
 8001280:	22a7      	movs	r2, #167	; 0xa7
 8001282:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <MX_TIM10_Init+0x40>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <MX_TIM10_Init+0x40>)
 800128c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001290:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <MX_TIM10_Init+0x40>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_TIM10_Init+0x40>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_TIM10_Init+0x40>)
 80012a0:	f005 fa29 	bl	80066f6 <HAL_TIM_Base_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80012aa:	f000 faa7 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000550 	.word	0x20000550
 80012b8:	40014400 	.word	0x40014400

080012bc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80012c0:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_TIM11_Init+0x40>)
 80012c2:	4a0f      	ldr	r2, [pc, #60]	; (8001300 <MX_TIM11_Init+0x44>)
 80012c4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 80012c6:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <MX_TIM11_Init+0x40>)
 80012c8:	22a7      	movs	r2, #167	; 0xa7
 80012ca:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <MX_TIM11_Init+0x40>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <MX_TIM11_Init+0x40>)
 80012d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012d8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <MX_TIM11_Init+0x40>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_TIM11_Init+0x40>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_TIM11_Init+0x40>)
 80012e8:	f005 fa05 	bl	80066f6 <HAL_TIM_Base_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80012f2:	f000 fa83 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000598 	.word	0x20000598
 8001300:	40014800 	.word	0x40014800

08001304 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_USART3_UART_Init+0x4c>)
 800130a:	4a12      	ldr	r2, [pc, #72]	; (8001354 <MX_USART3_UART_Init+0x50>)
 800130c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <MX_USART3_UART_Init+0x4c>)
 8001310:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001314:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_USART3_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_USART3_UART_Init+0x4c>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <MX_USART3_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_USART3_UART_Init+0x4c>)
 800132a:	220c      	movs	r2, #12
 800132c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <MX_USART3_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_USART3_UART_Init+0x4c>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_USART3_UART_Init+0x4c>)
 800133c:	f006 fe9a 	bl	8008074 <HAL_UART_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001346:	f000 fa59 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200005e0 	.word	0x200005e0
 8001354:	40004800 	.word	0x40004800

08001358 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_USART6_UART_Init+0x4c>)
 800135e:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <MX_USART6_UART_Init+0x50>)
 8001360:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <MX_USART6_UART_Init+0x4c>)
 8001364:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001368:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <MX_USART6_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <MX_USART6_UART_Init+0x4c>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <MX_USART6_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_USART6_UART_Init+0x4c>)
 800137e:	220c      	movs	r2, #12
 8001380:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <MX_USART6_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <MX_USART6_UART_Init+0x4c>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_USART6_UART_Init+0x4c>)
 8001390:	f006 fe70 	bl	8008074 <HAL_UART_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800139a:	f000 fa2f 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000624 	.word	0x20000624
 80013a8:	40011400 	.word	0x40011400

080013ac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80013b0:	4b14      	ldr	r3, [pc, #80]	; (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80013b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ba:	2204      	movs	r2, #4
 80013bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013c0:	2202      	movs	r2, #2
 80013c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013cc:	2202      	movs	r2, #2
 80013ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013d8:	2200      	movs	r2, #0
 80013da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013de:	2200      	movs	r2, #0
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013ee:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013f0:	f003 ffa4 	bl	800533c <HAL_PCD_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80013fa:	f000 f9ff 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000668 	.word	0x20000668

08001408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08e      	sub	sp, #56	; 0x38
 800140c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	623b      	str	r3, [r7, #32]
 8001422:	4ba0      	ldr	r3, [pc, #640]	; (80016a4 <MX_GPIO_Init+0x29c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a9f      	ldr	r2, [pc, #636]	; (80016a4 <MX_GPIO_Init+0x29c>)
 8001428:	f043 0310 	orr.w	r3, r3, #16
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b9d      	ldr	r3, [pc, #628]	; (80016a4 <MX_GPIO_Init+0x29c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0310 	and.w	r3, r3, #16
 8001436:	623b      	str	r3, [r7, #32]
 8001438:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
 800143e:	4b99      	ldr	r3, [pc, #612]	; (80016a4 <MX_GPIO_Init+0x29c>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a98      	ldr	r2, [pc, #608]	; (80016a4 <MX_GPIO_Init+0x29c>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b96      	ldr	r3, [pc, #600]	; (80016a4 <MX_GPIO_Init+0x29c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
 800145a:	4b92      	ldr	r3, [pc, #584]	; (80016a4 <MX_GPIO_Init+0x29c>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a91      	ldr	r2, [pc, #580]	; (80016a4 <MX_GPIO_Init+0x29c>)
 8001460:	f043 0320 	orr.w	r3, r3, #32
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b8f      	ldr	r3, [pc, #572]	; (80016a4 <MX_GPIO_Init+0x29c>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0320 	and.w	r3, r3, #32
 800146e:	61bb      	str	r3, [r7, #24]
 8001470:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	4b8b      	ldr	r3, [pc, #556]	; (80016a4 <MX_GPIO_Init+0x29c>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a8a      	ldr	r2, [pc, #552]	; (80016a4 <MX_GPIO_Init+0x29c>)
 800147c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b88      	ldr	r3, [pc, #544]	; (80016a4 <MX_GPIO_Init+0x29c>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	4b84      	ldr	r3, [pc, #528]	; (80016a4 <MX_GPIO_Init+0x29c>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a83      	ldr	r2, [pc, #524]	; (80016a4 <MX_GPIO_Init+0x29c>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b81      	ldr	r3, [pc, #516]	; (80016a4 <MX_GPIO_Init+0x29c>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b7d      	ldr	r3, [pc, #500]	; (80016a4 <MX_GPIO_Init+0x29c>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a7c      	ldr	r2, [pc, #496]	; (80016a4 <MX_GPIO_Init+0x29c>)
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b7a      	ldr	r3, [pc, #488]	; (80016a4 <MX_GPIO_Init+0x29c>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b76      	ldr	r3, [pc, #472]	; (80016a4 <MX_GPIO_Init+0x29c>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a75      	ldr	r2, [pc, #468]	; (80016a4 <MX_GPIO_Init+0x29c>)
 80014d0:	f043 0308 	orr.w	r3, r3, #8
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b73      	ldr	r3, [pc, #460]	; (80016a4 <MX_GPIO_Init+0x29c>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b6f      	ldr	r3, [pc, #444]	; (80016a4 <MX_GPIO_Init+0x29c>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a6e      	ldr	r2, [pc, #440]	; (80016a4 <MX_GPIO_Init+0x29c>)
 80014ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b6c      	ldr	r3, [pc, #432]	; (80016a4 <MX_GPIO_Init+0x29c>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8001504:	4868      	ldr	r0, [pc, #416]	; (80016a8 <MX_GPIO_Init+0x2a0>)
 8001506:	f003 fa21 	bl	800494c <HAL_GPIO_WritePin>
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	2101      	movs	r1, #1
 800150e:	4867      	ldr	r0, [pc, #412]	; (80016ac <MX_GPIO_Init+0x2a4>)
 8001510:	f003 fa1c 	bl	800494c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|FND_7_Pin|FND_6_Pin|FND_10_Pin
 8001514:	2200      	movs	r2, #0
 8001516:	f644 41ff 	movw	r1, #19711	; 0x4cff
 800151a:	4865      	ldr	r0, [pc, #404]	; (80016b0 <MX_GPIO_Init+0x2a8>)
 800151c:	f003 fa16 	bl	800494c <HAL_GPIO_WritePin>
                          |FND_5_Pin|LD3_Pin|FND_4_Pin|FND_2_Pin
                          |FND_1_Pin|FND_9_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001526:	4863      	ldr	r0, [pc, #396]	; (80016b4 <MX_GPIO_Init+0x2ac>)
 8001528:	f003 fa10 	bl	800494c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 800152c:	2200      	movs	r2, #0
 800152e:	f647 01ff 	movw	r1, #30975	; 0x78ff
 8001532:	4861      	ldr	r0, [pc, #388]	; (80016b8 <MX_GPIO_Init+0x2b0>)
 8001534:	f003 fa0a 	bl	800494c <HAL_GPIO_WritePin>
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	2140      	movs	r1, #64	; 0x40
 800153c:	485f      	ldr	r0, [pc, #380]	; (80016bc <MX_GPIO_Init+0x2b4>)
 800153e:	f003 fa05 	bl	800494c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL4_Pin
                           COL5_Pin COL6_Pin COL7_Pin COL8_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 8001542:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001558:	4619      	mov	r1, r3
 800155a:	4853      	ldr	r0, [pc, #332]	; (80016a8 <MX_GPIO_Init+0x2a0>)
 800155c:	f003 f832 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_Btn_Pin PHOTO0_Pin PHOTO1_Pin PHOTO2_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin|PHOTO0_Pin|PHOTO1_Pin|PHOTO2_Pin;
 8001560:	f242 030d 	movw	r3, #8205	; 0x200d
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001566:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001574:	4619      	mov	r1, r3
 8001576:	4852      	ldr	r0, [pc, #328]	; (80016c0 <MX_GPIO_Init+0x2b8>)
 8001578:	f003 f824 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PHOTO3_Pin */
  GPIO_InitStruct.Pin = PHOTO3_Pin;
 800157c:	2310      	movs	r3, #16
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001580:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PHOTO3_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158e:	4619      	mov	r1, r3
 8001590:	4848      	ldr	r0, [pc, #288]	; (80016b4 <MX_GPIO_Init+0x2ac>)
 8001592:	f003 f817 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001596:	2301      	movs	r3, #1
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015aa:	4619      	mov	r1, r3
 80015ac:	483f      	ldr	r0, [pc, #252]	; (80016ac <MX_GPIO_Init+0x2a4>)
 80015ae:	f003 f809 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin FND_7_Pin FND_6_Pin FND_10_Pin
                           FND_5_Pin LD3_Pin FND_4_Pin FND_2_Pin
                           FND_1_Pin FND_9_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|FND_7_Pin|FND_6_Pin|FND_10_Pin
 80015b2:	f644 43ff 	movw	r3, #19711	; 0x4cff
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
                          |FND_5_Pin|LD3_Pin|FND_4_Pin|FND_2_Pin
                          |FND_1_Pin|FND_9_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c8:	4619      	mov	r1, r3
 80015ca:	4839      	ldr	r0, [pc, #228]	; (80016b0 <MX_GPIO_Init+0x2a8>)
 80015cc:	f002 fffa 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 80015d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80015e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e6:	4619      	mov	r1, r3
 80015e8:	4832      	ldr	r0, [pc, #200]	; (80016b4 <MX_GPIO_Init+0x2ac>)
 80015ea:	f002 ffeb 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON5_Pin BUTTON2_Pin BUTTON4_Pin
                           BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON5_Pin|BUTTON2_Pin|BUTTON4_Pin
 80015ee:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
                          |BUTTON1_Pin|BUTTON0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001600:	4619      	mov	r1, r3
 8001602:	4829      	ldr	r0, [pc, #164]	; (80016a8 <MX_GPIO_Init+0x2a0>)
 8001604:	f002 ffde 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin
                           ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin
                           ROW5_Pin ROW6_Pin ROW7_Pin ROW8_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 8001608:	f647 03ff 	movw	r3, #30975	; 0x78ff
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800161a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161e:	4619      	mov	r1, r3
 8001620:	4825      	ldr	r0, [pc, #148]	; (80016b8 <MX_GPIO_Init+0x2b0>)
 8001622:	f002 ffcf 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001626:	2340      	movs	r3, #64	; 0x40
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162a:	2301      	movs	r3, #1
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163a:	4619      	mov	r1, r3
 800163c:	481f      	ldr	r0, [pc, #124]	; (80016bc <MX_GPIO_Init+0x2b4>)
 800163e:	f002 ffc1 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001646:	2300      	movs	r3, #0
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800164e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001652:	4619      	mov	r1, r3
 8001654:	4819      	ldr	r0, [pc, #100]	; (80016bc <MX_GPIO_Init+0x2b4>)
 8001656:	f002 ffb5 	bl	80045c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2105      	movs	r1, #5
 800165e:	2006      	movs	r0, #6
 8001660:	f002 fbcc 	bl	8003dfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001664:	2006      	movs	r0, #6
 8001666:	f002 fbe5 	bl	8003e34 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2105      	movs	r1, #5
 800166e:	2008      	movs	r0, #8
 8001670:	f002 fbc4 	bl	8003dfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001674:	2008      	movs	r0, #8
 8001676:	f002 fbdd 	bl	8003e34 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2105      	movs	r1, #5
 800167e:	2009      	movs	r0, #9
 8001680:	f002 fbbc 	bl	8003dfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001684:	2009      	movs	r0, #9
 8001686:	f002 fbd5 	bl	8003e34 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2105      	movs	r1, #5
 800168e:	200a      	movs	r0, #10
 8001690:	f002 fbb4 	bl	8003dfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001694:	200a      	movs	r0, #10
 8001696:	f002 fbcd 	bl	8003e34 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800169a:	bf00      	nop
 800169c:	3738      	adds	r7, #56	; 0x38
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40020000 	.word	0x40020000
 80016b0:	40020400 	.word	0x40020400
 80016b4:	40021400 	.word	0x40021400
 80016b8:	40020c00 	.word	0x40020c00
 80016bc:	40021800 	.word	0x40021800
 80016c0:	40020800 	.word	0x40020800

080016c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80016cc:	2001      	movs	r0, #1
 80016ce:	f008 f96b 	bl	80099a8 <osDelay>
 80016d2:	e7fb      	b.n	80016cc <StartDefaultTask+0x8>

080016d4 <step_motor_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_step_motor_task */
void step_motor_task(void *argument)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN step_motor_task */
  /* Infinite loop */
  for(;;)
  {
  	step_motor_processing();
 80016dc:	f000 f9b4 	bl	8001a48 <step_motor_processing>
    osDelay(1);
 80016e0:	2001      	movs	r0, #1
 80016e2:	f008 f961 	bl	80099a8 <osDelay>
  	step_motor_processing();
 80016e6:	e7f9      	b.n	80016dc <step_motor_task+0x8>

080016e8 <dot_matrix_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dot_matrix_task */
void dot_matrix_task(void *argument)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dot_matrix_task */
  /* Infinite loop */
  for(;;)
  {
	  dotmatrix_processing(up_down_flag);
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <dot_matrix_task+0x1c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe ffc5 	bl	8000684 <dotmatrix_processing>
    osDelay(1);
 80016fa:	2001      	movs	r0, #1
 80016fc:	f008 f954 	bl	80099a8 <osDelay>
	  dotmatrix_processing(up_down_flag);
 8001700:	e7f6      	b.n	80016f0 <dot_matrix_task+0x8>
 8001702:	bf00      	nop
 8001704:	20000ba4 	.word	0x20000ba4

08001708 <cds_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_cds_task */
void cds_task(void *argument)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	static int dark = 0;
	static int bright = 1;
  /* Infinite loop */
  for(;;)
  {
	if (adcValue[0] < 2300)
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <cds_task+0x64>)
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	f640 02fb 	movw	r2, #2299	; 0x8fb
 8001718:	4293      	cmp	r3, r2
 800171a:	d811      	bhi.n	8001740 <cds_task+0x38>
	{
		dark = 1;
 800171c:	4b14      	ldr	r3, [pc, #80]	; (8001770 <cds_task+0x68>)
 800171e:	2201      	movs	r2, #1
 8001720:	601a      	str	r2, [r3, #0]
		if (bright)
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <cds_task+0x6c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d01b      	beq.n	8001762 <cds_task+0x5a>
		{
			bright = 0;
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <cds_task+0x6c>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
			move_cursor(0, 10);
 8001730:	210a      	movs	r1, #10
 8001732:	2000      	movs	r0, #0
 8001734:	f7ff f924 	bl	8000980 <move_cursor>
			lcd_string("DARK!!");
 8001738:	480f      	ldr	r0, [pc, #60]	; (8001778 <cds_task+0x70>)
 800173a:	f7ff f90c 	bl	8000956 <lcd_string>
 800173e:	e010      	b.n	8001762 <cds_task+0x5a>
		}
	}
	else
	{
		bright = 1;
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <cds_task+0x6c>)
 8001742:	2201      	movs	r2, #1
 8001744:	601a      	str	r2, [r3, #0]
		if (dark)
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <cds_task+0x68>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d009      	beq.n	8001762 <cds_task+0x5a>
		{
			dark = 0;
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <cds_task+0x68>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
			move_cursor(0, 10);
 8001754:	210a      	movs	r1, #10
 8001756:	2000      	movs	r0, #0
 8001758:	f7ff f912 	bl	8000980 <move_cursor>
			lcd_string("BRIGHT");
 800175c:	4807      	ldr	r0, [pc, #28]	; (800177c <cds_task+0x74>)
 800175e:	f7ff f8fa 	bl	8000956 <lcd_string>
		}
	}
    osDelay(1);
 8001762:	2001      	movs	r0, #1
 8001764:	f008 f920 	bl	80099a8 <osDelay>
	if (adcValue[0] < 2300)
 8001768:	e7d2      	b.n	8001710 <cds_task+0x8>
 800176a:	bf00      	nop
 800176c:	20000ba8 	.word	0x20000ba8
 8001770:	20000bb8 	.word	0x20000bb8
 8001774:	20000094 	.word	0x20000094
 8001778:	0800ce94 	.word	0x0800ce94
 800177c:	0800ce9c 	.word	0x0800ce9c

08001780 <fnd_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fnd_task */
void fnd_task(void *argument)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fnd_task */
  /* Infinite loop */
  for(;;)
  {
  	fnd_processing();
 8001788:	f7ff f844 	bl	8000814 <fnd_processing>
    osDelay(1);
 800178c:	2001      	movs	r0, #1
 800178e:	f008 f90b 	bl	80099a8 <osDelay>
  	fnd_processing();
 8001792:	e7f9      	b.n	8001788 <fnd_task+0x8>

08001794 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM10)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a10      	ldr	r2, [pc, #64]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d113      	bne.n	80017ce <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		TIM10_10ms_counter++;  // 10ms timer counter
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	3301      	adds	r3, #1
 80017ac:	4a0e      	ldr	r2, [pc, #56]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80017ae:	6013      	str	r3, [r2, #0]
		TIM10_10ms_dotmatrix++;  // dotmatrix timer
 80017b0:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	3301      	adds	r3, #1
 80017b6:	4a0d      	ldr	r2, [pc, #52]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017b8:	6013      	str	r3, [r2, #0]
		TIM10_10ms_stepmotor_delay++;
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	3301      	adds	r3, #1
 80017c0:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80017c2:	6013      	str	r3, [r2, #0]
		TIM10_10ms_wait++;
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	3301      	adds	r3, #1
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80017cc:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a09      	ldr	r2, [pc, #36]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d101      	bne.n	80017dc <HAL_TIM_PeriodElapsedCallback+0x48>
    HAL_IncTick();
 80017d8:	f001 fd88 	bl	80032ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40014400 	.word	0x40014400
 80017e8:	20000b8c 	.word	0x20000b8c
 80017ec:	20000b90 	.word	0x20000b90
 80017f0:	20000b94 	.word	0x20000b94
 80017f4:	20000b98 	.word	0x20000b98
 80017f8:	40001000 	.word	0x40001000

080017fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001800:	b672      	cpsid	i
}
 8001802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001804:	e7fe      	b.n	8001804 <Error_Handler+0x8>
	...

08001808 <step_motor_drive>:

// direction == 0 : stop(idle)
// direction == 1 : 시계방향
// direction == 2 : 반시계방향
void step_motor_drive(int direction)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	static int step = 0;

	switch(step){
 8001810:	4b83      	ldr	r3, [pc, #524]	; (8001a20 <step_motor_drive+0x218>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b07      	cmp	r3, #7
 8001816:	f200 80db 	bhi.w	80019d0 <step_motor_drive+0x1c8>
 800181a:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <step_motor_drive+0x18>)
 800181c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001820:	08001841 	.word	0x08001841
 8001824:	08001873 	.word	0x08001873
 8001828:	080018a5 	.word	0x080018a5
 800182c:	080018d7 	.word	0x080018d7
 8001830:	08001909 	.word	0x08001909
 8001834:	0800193b 	.word	0x0800193b
 8001838:	0800196d 	.word	0x0800196d
 800183c:	0800199f 	.word	0x0800199f
	case 0:
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 8001840:	2201      	movs	r2, #1
 8001842:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001846:	4877      	ldr	r0, [pc, #476]	; (8001a24 <step_motor_drive+0x21c>)
 8001848:	f003 f880 	bl	800494c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001852:	4874      	ldr	r0, [pc, #464]	; (8001a24 <step_motor_drive+0x21c>)
 8001854:	f003 f87a 	bl	800494c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800185e:	4871      	ldr	r0, [pc, #452]	; (8001a24 <step_motor_drive+0x21c>)
 8001860:	f003 f874 	bl	800494c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800186a:	486e      	ldr	r0, [pc, #440]	; (8001a24 <step_motor_drive+0x21c>)
 800186c:	f003 f86e 	bl	800494c <HAL_GPIO_WritePin>
		break;
 8001870:	e0af      	b.n	80019d2 <step_motor_drive+0x1ca>
	case 1:
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 8001872:	2201      	movs	r2, #1
 8001874:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001878:	486a      	ldr	r0, [pc, #424]	; (8001a24 <step_motor_drive+0x21c>)
 800187a:	f003 f867 	bl	800494c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 800187e:	2201      	movs	r2, #1
 8001880:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001884:	4867      	ldr	r0, [pc, #412]	; (8001a24 <step_motor_drive+0x21c>)
 8001886:	f003 f861 	bl	800494c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001890:	4864      	ldr	r0, [pc, #400]	; (8001a24 <step_motor_drive+0x21c>)
 8001892:	f003 f85b 	bl	800494c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800189c:	4861      	ldr	r0, [pc, #388]	; (8001a24 <step_motor_drive+0x21c>)
 800189e:	f003 f855 	bl	800494c <HAL_GPIO_WritePin>
		break;
 80018a2:	e096      	b.n	80019d2 <step_motor_drive+0x1ca>
	case 2:
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018aa:	485e      	ldr	r0, [pc, #376]	; (8001a24 <step_motor_drive+0x21c>)
 80018ac:	f003 f84e 	bl	800494c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 80018b0:	2201      	movs	r2, #1
 80018b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b6:	485b      	ldr	r0, [pc, #364]	; (8001a24 <step_motor_drive+0x21c>)
 80018b8:	f003 f848 	bl	800494c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c2:	4858      	ldr	r0, [pc, #352]	; (8001a24 <step_motor_drive+0x21c>)
 80018c4:	f003 f842 	bl	800494c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ce:	4855      	ldr	r0, [pc, #340]	; (8001a24 <step_motor_drive+0x21c>)
 80018d0:	f003 f83c 	bl	800494c <HAL_GPIO_WritePin>
		break;
 80018d4:	e07d      	b.n	80019d2 <step_motor_drive+0x1ca>
	case 3:
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018dc:	4851      	ldr	r0, [pc, #324]	; (8001a24 <step_motor_drive+0x21c>)
 80018de:	f003 f835 	bl	800494c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 80018e2:	2201      	movs	r2, #1
 80018e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018e8:	484e      	ldr	r0, [pc, #312]	; (8001a24 <step_motor_drive+0x21c>)
 80018ea:	f003 f82f 	bl	800494c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
 80018ee:	2201      	movs	r2, #1
 80018f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018f4:	484b      	ldr	r0, [pc, #300]	; (8001a24 <step_motor_drive+0x21c>)
 80018f6:	f003 f829 	bl	800494c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001900:	4848      	ldr	r0, [pc, #288]	; (8001a24 <step_motor_drive+0x21c>)
 8001902:	f003 f823 	bl	800494c <HAL_GPIO_WritePin>
		break;
 8001906:	e064      	b.n	80019d2 <step_motor_drive+0x1ca>
	case 4:
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 8001908:	2200      	movs	r2, #0
 800190a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800190e:	4845      	ldr	r0, [pc, #276]	; (8001a24 <step_motor_drive+0x21c>)
 8001910:	f003 f81c 	bl	800494c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8001914:	2200      	movs	r2, #0
 8001916:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800191a:	4842      	ldr	r0, [pc, #264]	; (8001a24 <step_motor_drive+0x21c>)
 800191c:	f003 f816 	bl	800494c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
 8001920:	2201      	movs	r2, #1
 8001922:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001926:	483f      	ldr	r0, [pc, #252]	; (8001a24 <step_motor_drive+0x21c>)
 8001928:	f003 f810 	bl	800494c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001932:	483c      	ldr	r0, [pc, #240]	; (8001a24 <step_motor_drive+0x21c>)
 8001934:	f003 f80a 	bl	800494c <HAL_GPIO_WritePin>
		break;
 8001938:	e04b      	b.n	80019d2 <step_motor_drive+0x1ca>
	case 5:
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001940:	4838      	ldr	r0, [pc, #224]	; (8001a24 <step_motor_drive+0x21c>)
 8001942:	f003 f803 	bl	800494c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800194c:	4835      	ldr	r0, [pc, #212]	; (8001a24 <step_motor_drive+0x21c>)
 800194e:	f002 fffd 	bl	800494c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
 8001952:	2201      	movs	r2, #1
 8001954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001958:	4832      	ldr	r0, [pc, #200]	; (8001a24 <step_motor_drive+0x21c>)
 800195a:	f002 fff7 	bl	800494c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 800195e:	2201      	movs	r2, #1
 8001960:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001964:	482f      	ldr	r0, [pc, #188]	; (8001a24 <step_motor_drive+0x21c>)
 8001966:	f002 fff1 	bl	800494c <HAL_GPIO_WritePin>
		break;
 800196a:	e032      	b.n	80019d2 <step_motor_drive+0x1ca>
	case 6:
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 800196c:	2200      	movs	r2, #0
 800196e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001972:	482c      	ldr	r0, [pc, #176]	; (8001a24 <step_motor_drive+0x21c>)
 8001974:	f002 ffea 	bl	800494c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8001978:	2200      	movs	r2, #0
 800197a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800197e:	4829      	ldr	r0, [pc, #164]	; (8001a24 <step_motor_drive+0x21c>)
 8001980:	f002 ffe4 	bl	800494c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 8001984:	2200      	movs	r2, #0
 8001986:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800198a:	4826      	ldr	r0, [pc, #152]	; (8001a24 <step_motor_drive+0x21c>)
 800198c:	f002 ffde 	bl	800494c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 8001990:	2201      	movs	r2, #1
 8001992:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001996:	4823      	ldr	r0, [pc, #140]	; (8001a24 <step_motor_drive+0x21c>)
 8001998:	f002 ffd8 	bl	800494c <HAL_GPIO_WritePin>
		break;
 800199c:	e019      	b.n	80019d2 <step_motor_drive+0x1ca>
	case 7:
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 800199e:	2201      	movs	r2, #1
 80019a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019a4:	481f      	ldr	r0, [pc, #124]	; (8001a24 <step_motor_drive+0x21c>)
 80019a6:	f002 ffd1 	bl	800494c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019b0:	481c      	ldr	r0, [pc, #112]	; (8001a24 <step_motor_drive+0x21c>)
 80019b2:	f002 ffcb 	bl	800494c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019bc:	4819      	ldr	r0, [pc, #100]	; (8001a24 <step_motor_drive+0x21c>)
 80019be:	f002 ffc5 	bl	800494c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 80019c2:	2201      	movs	r2, #1
 80019c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019c8:	4816      	ldr	r0, [pc, #88]	; (8001a24 <step_motor_drive+0x21c>)
 80019ca:	f002 ffbf 	bl	800494c <HAL_GPIO_WritePin>
		break;
 80019ce:	e000      	b.n	80019d2 <step_motor_drive+0x1ca>
	default:
		break;
 80019d0:	bf00      	nop
	}

	// 정회전 -> 올라가는 방향
	if (direction == 1)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d110      	bne.n	80019fa <step_motor_drive+0x1f2>
	{
		step++;
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <step_motor_drive+0x218>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	3301      	adds	r3, #1
 80019de:	4a10      	ldr	r2, [pc, #64]	; (8001a20 <step_motor_drive+0x218>)
 80019e0:	6013      	str	r3, [r2, #0]
		step %= 8;
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <step_motor_drive+0x218>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	425a      	negs	r2, r3
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	f002 0207 	and.w	r2, r2, #7
 80019f0:	bf58      	it	pl
 80019f2:	4253      	negpl	r3, r2
 80019f4:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <step_motor_drive+0x218>)
 80019f6:	6013      	str	r3, [r2, #0]
	else if (direction == 2)
	{
		step--;
		if (step < 0) step = 7;
	}
}
 80019f8:	e00e      	b.n	8001a18 <step_motor_drive+0x210>
	else if (direction == 2)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d10b      	bne.n	8001a18 <step_motor_drive+0x210>
		step--;
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <step_motor_drive+0x218>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	4a06      	ldr	r2, [pc, #24]	; (8001a20 <step_motor_drive+0x218>)
 8001a08:	6013      	str	r3, [r2, #0]
		if (step < 0) step = 7;
 8001a0a:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <step_motor_drive+0x218>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	da02      	bge.n	8001a18 <step_motor_drive+0x210>
 8001a12:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <step_motor_drive+0x218>)
 8001a14:	2207      	movs	r2, #7
 8001a16:	601a      	str	r2, [r3, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000bdc 	.word	0x20000bdc
 8001a24:	40020c00 	.word	0x40020c00

08001a28 <set_rpm>:
// 1126us(1스텝 idle time) * 4096 = 4,612,096us
// 								= 4612ms
//								= 4.6s
// 60초 / 4.6 ==> 13회전 (분당)
void set_rpm(int rpm)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	// 물리적으로 1rpm ~ 13rpm 까지 조절 가능
	delay_us((60000000/4096)/rpm);
 8001a30:	f643 1238 	movw	r2, #14648	; 0x3938
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe ffca 	bl	80009d4 <delay_us>

	// 최대 speed 기준 => rpm = 13
	// delay_us(1126)
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <step_motor_processing>:

void step_motor_processing(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	if (hold)
 8001a4c:	4b9b      	ldr	r3, [pc, #620]	; (8001cbc <step_motor_processing+0x274>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 818c 	beq.w	8001d6e <step_motor_processing+0x326>
	{
		lcd_stop = 1;
 8001a56:	4b9a      	ldr	r3, [pc, #616]	; (8001cc0 <step_motor_processing+0x278>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]
		lcd_up = 1;
 8001a5c:	4b99      	ldr	r3, [pc, #612]	; (8001cc4 <step_motor_processing+0x27c>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	601a      	str	r2, [r3, #0]
		lcd_down = 1;
 8001a62:	4b99      	ldr	r3, [pc, #612]	; (8001cc8 <step_motor_processing+0x280>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	601a      	str	r2, [r3, #0]

		if (lcd_hold)
 8001a68:	4b98      	ldr	r3, [pc, #608]	; (8001ccc <step_motor_processing+0x284>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d009      	beq.n	8001a84 <step_motor_processing+0x3c>
		{
			lcd_hold = 0;
 8001a70:	4b96      	ldr	r3, [pc, #600]	; (8001ccc <step_motor_processing+0x284>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
			move_cursor(0, 0);
 8001a76:	2100      	movs	r1, #0
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f7fe ff81 	bl	8000980 <move_cursor>
			lcd_string("HOLD");
 8001a7e:	4894      	ldr	r0, [pc, #592]	; (8001cd0 <step_motor_processing+0x288>)
 8001a80:	f7fe ff69 	bl	8000956 <lcd_string>
		}
		if (TIM10_10ms_stepmotor_delay >= 300)
 8001a84:	4b93      	ldr	r3, [pc, #588]	; (8001cd4 <step_motor_processing+0x28c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001a8c:	db02      	blt.n	8001a94 <step_motor_processing+0x4c>
		{
			hold = 0;
 8001a8e:	4b8b      	ldr	r3, [pc, #556]	; (8001cbc <step_motor_processing+0x274>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
		}

		switch(up_down_flag)
 8001a94:	4b90      	ldr	r3, [pc, #576]	; (8001cd8 <step_motor_processing+0x290>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	f000 80a6 	beq.w	8001bea <step_motor_processing+0x1a2>
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	f300 852c 	bgt.w	80024fc <step_motor_processing+0xab4>
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 852b 	beq.w	8002500 <step_motor_processing+0xab8>
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	f040 8526 	bne.w	80024fc <step_motor_processing+0xab4>
		{
		case 1: // UP
			if (get_button(BUTTON4_GPIO_Port, BUTTON4_Pin, 4) == BUTTON_PRESS)
 8001ab0:	2204      	movs	r2, #4
 8001ab2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ab6:	4889      	ldr	r0, [pc, #548]	; (8001cdc <step_motor_processing+0x294>)
 8001ab8:	f7fe fd1c 	bl	80004f4 <get_button>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d11c      	bne.n	8001afc <step_motor_processing+0xb4>
			{
				if (e_floor < 4)
 8001ac2:	4b87      	ldr	r3, [pc, #540]	; (8001ce0 <step_motor_processing+0x298>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	dc18      	bgt.n	8001afc <step_motor_processing+0xb4>
				{
					if (f4)
 8001aca:	4b86      	ldr	r3, [pc, #536]	; (8001ce4 <step_motor_processing+0x29c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00a      	beq.n	8001ae8 <step_motor_processing+0xa0>
					{
						move_cursor(1, 0);
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	f7fe ff53 	bl	8000980 <move_cursor>
						lcd_string("    ");
 8001ada:	4883      	ldr	r0, [pc, #524]	; (8001ce8 <step_motor_processing+0x2a0>)
 8001adc:	f7fe ff3b 	bl	8000956 <lcd_string>
						f4 = 0;
 8001ae0:	4b80      	ldr	r3, [pc, #512]	; (8001ce4 <step_motor_processing+0x29c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	e009      	b.n	8001afc <step_motor_processing+0xb4>
					}
					else
					{
						move_cursor(1, 0);
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2001      	movs	r0, #1
 8001aec:	f7fe ff48 	bl	8000980 <move_cursor>
						lcd_string("   4");
 8001af0:	487e      	ldr	r0, [pc, #504]	; (8001cec <step_motor_processing+0x2a4>)
 8001af2:	f7fe ff30 	bl	8000956 <lcd_string>
						f4 = 1;
 8001af6:	4b7b      	ldr	r3, [pc, #492]	; (8001ce4 <step_motor_processing+0x29c>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	601a      	str	r2, [r3, #0]
					}
				}
			}
			if (get_button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 8001afc:	2203      	movs	r2, #3
 8001afe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b02:	4876      	ldr	r0, [pc, #472]	; (8001cdc <step_motor_processing+0x294>)
 8001b04:	f7fe fcf6 	bl	80004f4 <get_button>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d11c      	bne.n	8001b48 <step_motor_processing+0x100>
			{
				if (e_floor < 3)
 8001b0e:	4b74      	ldr	r3, [pc, #464]	; (8001ce0 <step_motor_processing+0x298>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	dc18      	bgt.n	8001b48 <step_motor_processing+0x100>
				{
					if (f3)
 8001b16:	4b76      	ldr	r3, [pc, #472]	; (8001cf0 <step_motor_processing+0x2a8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00a      	beq.n	8001b34 <step_motor_processing+0xec>
					{
						move_cursor(1, 4);
 8001b1e:	2104      	movs	r1, #4
 8001b20:	2001      	movs	r0, #1
 8001b22:	f7fe ff2d 	bl	8000980 <move_cursor>
						lcd_string("    ");
 8001b26:	4870      	ldr	r0, [pc, #448]	; (8001ce8 <step_motor_processing+0x2a0>)
 8001b28:	f7fe ff15 	bl	8000956 <lcd_string>
						f3 = 0;
 8001b2c:	4b70      	ldr	r3, [pc, #448]	; (8001cf0 <step_motor_processing+0x2a8>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	e009      	b.n	8001b48 <step_motor_processing+0x100>
					}
					else
					{
						move_cursor(1, 4);
 8001b34:	2104      	movs	r1, #4
 8001b36:	2001      	movs	r0, #1
 8001b38:	f7fe ff22 	bl	8000980 <move_cursor>
						lcd_string("   3");
 8001b3c:	486d      	ldr	r0, [pc, #436]	; (8001cf4 <step_motor_processing+0x2ac>)
 8001b3e:	f7fe ff0a 	bl	8000956 <lcd_string>
						f3 = 1;
 8001b42:	4b6b      	ldr	r3, [pc, #428]	; (8001cf0 <step_motor_processing+0x2a8>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	601a      	str	r2, [r3, #0]
					}
				}
			}
			if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 8001b48:	2202      	movs	r2, #2
 8001b4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b4e:	4863      	ldr	r0, [pc, #396]	; (8001cdc <step_motor_processing+0x294>)
 8001b50:	f7fe fcd0 	bl	80004f4 <get_button>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d11c      	bne.n	8001b94 <step_motor_processing+0x14c>
			{
				if (e_floor < 2)
 8001b5a:	4b61      	ldr	r3, [pc, #388]	; (8001ce0 <step_motor_processing+0x298>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	dc18      	bgt.n	8001b94 <step_motor_processing+0x14c>
				{
					if (f2)
 8001b62:	4b65      	ldr	r3, [pc, #404]	; (8001cf8 <step_motor_processing+0x2b0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00a      	beq.n	8001b80 <step_motor_processing+0x138>
					{
						move_cursor(1, 8);
 8001b6a:	2108      	movs	r1, #8
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	f7fe ff07 	bl	8000980 <move_cursor>
						lcd_string("    ");
 8001b72:	485d      	ldr	r0, [pc, #372]	; (8001ce8 <step_motor_processing+0x2a0>)
 8001b74:	f7fe feef 	bl	8000956 <lcd_string>
						f2 = 0;
 8001b78:	4b5f      	ldr	r3, [pc, #380]	; (8001cf8 <step_motor_processing+0x2b0>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	e009      	b.n	8001b94 <step_motor_processing+0x14c>
					}
					else
					{
						move_cursor(1, 8);
 8001b80:	2108      	movs	r1, #8
 8001b82:	2001      	movs	r0, #1
 8001b84:	f7fe fefc 	bl	8000980 <move_cursor>
						lcd_string("   2");
 8001b88:	485c      	ldr	r0, [pc, #368]	; (8001cfc <step_motor_processing+0x2b4>)
 8001b8a:	f7fe fee4 	bl	8000956 <lcd_string>
						f2 = 1;
 8001b8e:	4b5a      	ldr	r3, [pc, #360]	; (8001cf8 <step_motor_processing+0x2b0>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	601a      	str	r2, [r3, #0]
					}
				}
			}
			if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8001b94:	2201      	movs	r2, #1
 8001b96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b9a:	4850      	ldr	r0, [pc, #320]	; (8001cdc <step_motor_processing+0x294>)
 8001b9c:	f7fe fcaa 	bl	80004f4 <get_button>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f040 84ae 	bne.w	8002504 <step_motor_processing+0xabc>
			{
				if (e_floor < 1)
 8001ba8:	4b4d      	ldr	r3, [pc, #308]	; (8001ce0 <step_motor_processing+0x298>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f300 84a9 	bgt.w	8002504 <step_motor_processing+0xabc>
				{
					if (f1)
 8001bb2:	4b53      	ldr	r3, [pc, #332]	; (8001d00 <step_motor_processing+0x2b8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00b      	beq.n	8001bd2 <step_motor_processing+0x18a>
					{
						move_cursor(1, 12);
 8001bba:	210c      	movs	r1, #12
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	f7fe fedf 	bl	8000980 <move_cursor>
						lcd_string("    ");
 8001bc2:	4849      	ldr	r0, [pc, #292]	; (8001ce8 <step_motor_processing+0x2a0>)
 8001bc4:	f7fe fec7 	bl	8000956 <lcd_string>
						f1 = 0;
 8001bc8:	4b4d      	ldr	r3, [pc, #308]	; (8001d00 <step_motor_processing+0x2b8>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
						lcd_string("   1");
						f1 = 1;
					}
				}
			}
			break;
 8001bce:	f000 bc99 	b.w	8002504 <step_motor_processing+0xabc>
						move_cursor(1, 12);
 8001bd2:	210c      	movs	r1, #12
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	f7fe fed3 	bl	8000980 <move_cursor>
						lcd_string("   1");
 8001bda:	484a      	ldr	r0, [pc, #296]	; (8001d04 <step_motor_processing+0x2bc>)
 8001bdc:	f7fe febb 	bl	8000956 <lcd_string>
						f1 = 1;
 8001be0:	4b47      	ldr	r3, [pc, #284]	; (8001d00 <step_motor_processing+0x2b8>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	601a      	str	r2, [r3, #0]
			break;
 8001be6:	f000 bc8d 	b.w	8002504 <step_motor_processing+0xabc>

		case 2: // DOWN
			if (get_button(BUTTON4_GPIO_Port, BUTTON4_Pin, 4) == BUTTON_PRESS)
 8001bea:	2204      	movs	r2, #4
 8001bec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bf0:	483a      	ldr	r0, [pc, #232]	; (8001cdc <step_motor_processing+0x294>)
 8001bf2:	f7fe fc7f 	bl	80004f4 <get_button>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d11c      	bne.n	8001c36 <step_motor_processing+0x1ee>
			{
				if (e_floor > 4)
 8001bfc:	4b38      	ldr	r3, [pc, #224]	; (8001ce0 <step_motor_processing+0x298>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	dd18      	ble.n	8001c36 <step_motor_processing+0x1ee>
				{
					if (f4)
 8001c04:	4b37      	ldr	r3, [pc, #220]	; (8001ce4 <step_motor_processing+0x29c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00a      	beq.n	8001c22 <step_motor_processing+0x1da>
					{
						move_cursor(1, 0);
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f7fe feb6 	bl	8000980 <move_cursor>
						lcd_string("    ");
 8001c14:	4834      	ldr	r0, [pc, #208]	; (8001ce8 <step_motor_processing+0x2a0>)
 8001c16:	f7fe fe9e 	bl	8000956 <lcd_string>
						f4 = 0;
 8001c1a:	4b32      	ldr	r3, [pc, #200]	; (8001ce4 <step_motor_processing+0x29c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	e009      	b.n	8001c36 <step_motor_processing+0x1ee>
					}
					else
					{
						move_cursor(1, 0);
 8001c22:	2100      	movs	r1, #0
 8001c24:	2001      	movs	r0, #1
 8001c26:	f7fe feab 	bl	8000980 <move_cursor>
						lcd_string("   4");
 8001c2a:	4830      	ldr	r0, [pc, #192]	; (8001cec <step_motor_processing+0x2a4>)
 8001c2c:	f7fe fe93 	bl	8000956 <lcd_string>
						f4 = 1;
 8001c30:	4b2c      	ldr	r3, [pc, #176]	; (8001ce4 <step_motor_processing+0x29c>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]
					}
				}
			}
			if (get_button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 8001c36:	2203      	movs	r2, #3
 8001c38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c3c:	4827      	ldr	r0, [pc, #156]	; (8001cdc <step_motor_processing+0x294>)
 8001c3e:	f7fe fc59 	bl	80004f4 <get_button>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d11c      	bne.n	8001c82 <step_motor_processing+0x23a>
			{
				if (e_floor > 3)
 8001c48:	4b25      	ldr	r3, [pc, #148]	; (8001ce0 <step_motor_processing+0x298>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	dd18      	ble.n	8001c82 <step_motor_processing+0x23a>
				{
					if (f3)
 8001c50:	4b27      	ldr	r3, [pc, #156]	; (8001cf0 <step_motor_processing+0x2a8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00a      	beq.n	8001c6e <step_motor_processing+0x226>
					{
						move_cursor(1, 4);
 8001c58:	2104      	movs	r1, #4
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f7fe fe90 	bl	8000980 <move_cursor>
						lcd_string("    ");
 8001c60:	4821      	ldr	r0, [pc, #132]	; (8001ce8 <step_motor_processing+0x2a0>)
 8001c62:	f7fe fe78 	bl	8000956 <lcd_string>
						f3 = 0;
 8001c66:	4b22      	ldr	r3, [pc, #136]	; (8001cf0 <step_motor_processing+0x2a8>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	e009      	b.n	8001c82 <step_motor_processing+0x23a>
					}
					else
					{
						move_cursor(1, 4);
 8001c6e:	2104      	movs	r1, #4
 8001c70:	2001      	movs	r0, #1
 8001c72:	f7fe fe85 	bl	8000980 <move_cursor>
						lcd_string("   3");
 8001c76:	481f      	ldr	r0, [pc, #124]	; (8001cf4 <step_motor_processing+0x2ac>)
 8001c78:	f7fe fe6d 	bl	8000956 <lcd_string>
						f3 = 1;
 8001c7c:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <step_motor_processing+0x2a8>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
					}
				}
			}
			if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 8001c82:	2202      	movs	r2, #2
 8001c84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c88:	4814      	ldr	r0, [pc, #80]	; (8001cdc <step_motor_processing+0x294>)
 8001c8a:	f7fe fc33 	bl	80004f4 <get_button>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d143      	bne.n	8001d1c <step_motor_processing+0x2d4>
			{
				if (e_floor > 2)
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <step_motor_processing+0x298>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	dd3f      	ble.n	8001d1c <step_motor_processing+0x2d4>
				{
					if (f2)
 8001c9c:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <step_motor_processing+0x2b0>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d031      	beq.n	8001d08 <step_motor_processing+0x2c0>
					{
						move_cursor(1, 8);
 8001ca4:	2108      	movs	r1, #8
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f7fe fe6a 	bl	8000980 <move_cursor>
						lcd_string("    ");
 8001cac:	480e      	ldr	r0, [pc, #56]	; (8001ce8 <step_motor_processing+0x2a0>)
 8001cae:	f7fe fe52 	bl	8000956 <lcd_string>
						f2 = 0;
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <step_motor_processing+0x2b0>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	e030      	b.n	8001d1c <step_motor_processing+0x2d4>
 8001cba:	bf00      	nop
 8001cbc:	20000bd0 	.word	0x20000bd0
 8001cc0:	2000009c 	.word	0x2000009c
 8001cc4:	200000a0 	.word	0x200000a0
 8001cc8:	200000a4 	.word	0x200000a4
 8001ccc:	20000098 	.word	0x20000098
 8001cd0:	0800cea4 	.word	0x0800cea4
 8001cd4:	20000b94 	.word	0x20000b94
 8001cd8:	20000ba4 	.word	0x20000ba4
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	20000ba0 	.word	0x20000ba0
 8001ce4:	20000bc8 	.word	0x20000bc8
 8001ce8:	0800ceac 	.word	0x0800ceac
 8001cec:	0800ceb4 	.word	0x0800ceb4
 8001cf0:	20000bc4 	.word	0x20000bc4
 8001cf4:	0800cebc 	.word	0x0800cebc
 8001cf8:	20000bc0 	.word	0x20000bc0
 8001cfc:	0800cec4 	.word	0x0800cec4
 8001d00:	20000bbc 	.word	0x20000bbc
 8001d04:	0800cecc 	.word	0x0800cecc
					}
					else
					{
						move_cursor(1, 8);
 8001d08:	2108      	movs	r1, #8
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f7fe fe38 	bl	8000980 <move_cursor>
						lcd_string("   2");
 8001d10:	48a1      	ldr	r0, [pc, #644]	; (8001f98 <step_motor_processing+0x550>)
 8001d12:	f7fe fe20 	bl	8000956 <lcd_string>
						f2 = 1;
 8001d16:	4ba1      	ldr	r3, [pc, #644]	; (8001f9c <step_motor_processing+0x554>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]
					}
				}
			}
			if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d22:	489f      	ldr	r0, [pc, #636]	; (8001fa0 <step_motor_processing+0x558>)
 8001d24:	f7fe fbe6 	bl	80004f4 <get_button>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f040 83ec 	bne.w	8002508 <step_motor_processing+0xac0>
			{
				if (e_floor > 1)
 8001d30:	4b9c      	ldr	r3, [pc, #624]	; (8001fa4 <step_motor_processing+0x55c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	f340 83e7 	ble.w	8002508 <step_motor_processing+0xac0>
				{
					if (f1)
 8001d3a:	4b9b      	ldr	r3, [pc, #620]	; (8001fa8 <step_motor_processing+0x560>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00a      	beq.n	8001d58 <step_motor_processing+0x310>
					{
						move_cursor(1, 12);
 8001d42:	210c      	movs	r1, #12
 8001d44:	2001      	movs	r0, #1
 8001d46:	f7fe fe1b 	bl	8000980 <move_cursor>
						lcd_string("    ");
 8001d4a:	4898      	ldr	r0, [pc, #608]	; (8001fac <step_motor_processing+0x564>)
 8001d4c:	f7fe fe03 	bl	8000956 <lcd_string>
						f1 = 0;
 8001d50:	4b95      	ldr	r3, [pc, #596]	; (8001fa8 <step_motor_processing+0x560>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
						lcd_string("   1");
						f1 = 1;
					}
				}
			}
			break;
 8001d56:	e3d7      	b.n	8002508 <step_motor_processing+0xac0>
						move_cursor(1, 12);
 8001d58:	210c      	movs	r1, #12
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f7fe fe10 	bl	8000980 <move_cursor>
						lcd_string("   1");
 8001d60:	4893      	ldr	r0, [pc, #588]	; (8001fb0 <step_motor_processing+0x568>)
 8001d62:	f7fe fdf8 	bl	8000956 <lcd_string>
						f1 = 1;
 8001d66:	4b90      	ldr	r3, [pc, #576]	; (8001fa8 <step_motor_processing+0x560>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
			break;
 8001d6c:	e3cc      	b.n	8002508 <step_motor_processing+0xac0>
		default:
			break;
		}
	}

	else if (up && !step_stop_flag)
 8001d6e:	4b91      	ldr	r3, [pc, #580]	; (8001fb4 <step_motor_processing+0x56c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 81b9 	beq.w	80020ea <step_motor_processing+0x6a2>
 8001d78:	4b8f      	ldr	r3, [pc, #572]	; (8001fb8 <step_motor_processing+0x570>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f040 81b4 	bne.w	80020ea <step_motor_processing+0x6a2>
	{
		TIM10_10ms_stepmotor_delay = 0;
 8001d82:	4b8e      	ldr	r3, [pc, #568]	; (8001fbc <step_motor_processing+0x574>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]

		lcd_hold = 1;
 8001d88:	4b8d      	ldr	r3, [pc, #564]	; (8001fc0 <step_motor_processing+0x578>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]
		lcd_stop = 1;
 8001d8e:	4b8d      	ldr	r3, [pc, #564]	; (8001fc4 <step_motor_processing+0x57c>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
		lcd_down = 1;
 8001d94:	4b8c      	ldr	r3, [pc, #560]	; (8001fc8 <step_motor_processing+0x580>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	601a      	str	r2, [r3, #0]

		if (lcd_up)
 8001d9a:	4b8c      	ldr	r3, [pc, #560]	; (8001fcc <step_motor_processing+0x584>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d009      	beq.n	8001db6 <step_motor_processing+0x36e>
		{
			lcd_up = 0;
 8001da2:	4b8a      	ldr	r3, [pc, #552]	; (8001fcc <step_motor_processing+0x584>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
			move_cursor(0, 0);
 8001da8:	2100      	movs	r1, #0
 8001daa:	2000      	movs	r0, #0
 8001dac:	f7fe fde8 	bl	8000980 <move_cursor>
			lcd_string("UP!!");
 8001db0:	4887      	ldr	r0, [pc, #540]	; (8001fd0 <step_motor_processing+0x588>)
 8001db2:	f7fe fdd0 	bl	8000956 <lcd_string>
		}

		if (prev_floor != e_floor)
 8001db6:	4b87      	ldr	r3, [pc, #540]	; (8001fd4 <step_motor_processing+0x58c>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	4b7a      	ldr	r3, [pc, #488]	; (8001fa4 <step_motor_processing+0x55c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d074      	beq.n	8001eac <step_motor_processing+0x464>
		{
			switch (e_floor)
 8001dc2:	4b78      	ldr	r3, [pc, #480]	; (8001fa4 <step_motor_processing+0x55c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d871      	bhi.n	8001eb0 <step_motor_processing+0x468>
 8001dcc:	a201      	add	r2, pc, #4	; (adr r2, 8001dd4 <step_motor_processing+0x38c>)
 8001dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd2:	bf00      	nop
 8001dd4:	08001de5 	.word	0x08001de5
 8001dd8:	08001e17 	.word	0x08001e17
 8001ddc:	08001e49 	.word	0x08001e49
 8001de0:	08001e7b 	.word	0x08001e7b
			{
			case 1:
				prev_floor = e_floor;
 8001de4:	4b6f      	ldr	r3, [pc, #444]	; (8001fa4 <step_motor_processing+0x55c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a7a      	ldr	r2, [pc, #488]	; (8001fd4 <step_motor_processing+0x58c>)
 8001dea:	6013      	str	r3, [r2, #0]
				if (f1)
 8001dec:	4b6e      	ldr	r3, [pc, #440]	; (8001fa8 <step_motor_processing+0x560>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d05f      	beq.n	8001eb4 <step_motor_processing+0x46c>
				{
					f1 = 0;
 8001df4:	4b6c      	ldr	r3, [pc, #432]	; (8001fa8 <step_motor_processing+0x560>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
					TIM10_10ms_stepmotor_delay = 0;
 8001dfa:	4b70      	ldr	r3, [pc, #448]	; (8001fbc <step_motor_processing+0x574>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
					hold = 1;
 8001e00:	4b75      	ldr	r3, [pc, #468]	; (8001fd8 <step_motor_processing+0x590>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]
					move_cursor(1, 12);
 8001e06:	210c      	movs	r1, #12
 8001e08:	2001      	movs	r0, #1
 8001e0a:	f7fe fdb9 	bl	8000980 <move_cursor>
					lcd_string("    ");
 8001e0e:	4867      	ldr	r0, [pc, #412]	; (8001fac <step_motor_processing+0x564>)
 8001e10:	f7fe fda1 	bl	8000956 <lcd_string>
				}
				break;
 8001e14:	e04e      	b.n	8001eb4 <step_motor_processing+0x46c>
			case 2:
				prev_floor = e_floor;
 8001e16:	4b63      	ldr	r3, [pc, #396]	; (8001fa4 <step_motor_processing+0x55c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a6e      	ldr	r2, [pc, #440]	; (8001fd4 <step_motor_processing+0x58c>)
 8001e1c:	6013      	str	r3, [r2, #0]
				if (f2)
 8001e1e:	4b5f      	ldr	r3, [pc, #380]	; (8001f9c <step_motor_processing+0x554>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d048      	beq.n	8001eb8 <step_motor_processing+0x470>
				{
					f2 = 0;
 8001e26:	4b5d      	ldr	r3, [pc, #372]	; (8001f9c <step_motor_processing+0x554>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
					TIM10_10ms_stepmotor_delay = 0;
 8001e2c:	4b63      	ldr	r3, [pc, #396]	; (8001fbc <step_motor_processing+0x574>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
					hold = 1;
 8001e32:	4b69      	ldr	r3, [pc, #420]	; (8001fd8 <step_motor_processing+0x590>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	601a      	str	r2, [r3, #0]
					move_cursor(1, 8);
 8001e38:	2108      	movs	r1, #8
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	f7fe fda0 	bl	8000980 <move_cursor>
					lcd_string("    ");
 8001e40:	485a      	ldr	r0, [pc, #360]	; (8001fac <step_motor_processing+0x564>)
 8001e42:	f7fe fd88 	bl	8000956 <lcd_string>
				}
				break;
 8001e46:	e037      	b.n	8001eb8 <step_motor_processing+0x470>
			case 3:
				prev_floor = e_floor;
 8001e48:	4b56      	ldr	r3, [pc, #344]	; (8001fa4 <step_motor_processing+0x55c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a61      	ldr	r2, [pc, #388]	; (8001fd4 <step_motor_processing+0x58c>)
 8001e4e:	6013      	str	r3, [r2, #0]
				if (f3)
 8001e50:	4b62      	ldr	r3, [pc, #392]	; (8001fdc <step_motor_processing+0x594>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d031      	beq.n	8001ebc <step_motor_processing+0x474>
				{
					f3 = 0;
 8001e58:	4b60      	ldr	r3, [pc, #384]	; (8001fdc <step_motor_processing+0x594>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
					TIM10_10ms_stepmotor_delay = 0;
 8001e5e:	4b57      	ldr	r3, [pc, #348]	; (8001fbc <step_motor_processing+0x574>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
					hold = 1;
 8001e64:	4b5c      	ldr	r3, [pc, #368]	; (8001fd8 <step_motor_processing+0x590>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
					move_cursor(1, 4);
 8001e6a:	2104      	movs	r1, #4
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	f7fe fd87 	bl	8000980 <move_cursor>
					lcd_string("    ");
 8001e72:	484e      	ldr	r0, [pc, #312]	; (8001fac <step_motor_processing+0x564>)
 8001e74:	f7fe fd6f 	bl	8000956 <lcd_string>
				}
				break;
 8001e78:	e020      	b.n	8001ebc <step_motor_processing+0x474>
			case 4:
				prev_floor = e_floor;
 8001e7a:	4b4a      	ldr	r3, [pc, #296]	; (8001fa4 <step_motor_processing+0x55c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a55      	ldr	r2, [pc, #340]	; (8001fd4 <step_motor_processing+0x58c>)
 8001e80:	6013      	str	r3, [r2, #0]
				if (f4)
 8001e82:	4b57      	ldr	r3, [pc, #348]	; (8001fe0 <step_motor_processing+0x598>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d01a      	beq.n	8001ec0 <step_motor_processing+0x478>
				{
					f4 = 0;
 8001e8a:	4b55      	ldr	r3, [pc, #340]	; (8001fe0 <step_motor_processing+0x598>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
					TIM10_10ms_stepmotor_delay = 0;
 8001e90:	4b4a      	ldr	r3, [pc, #296]	; (8001fbc <step_motor_processing+0x574>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
					hold = 1;
 8001e96:	4b50      	ldr	r3, [pc, #320]	; (8001fd8 <step_motor_processing+0x590>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
					move_cursor(1, 0);
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	f7fe fd6e 	bl	8000980 <move_cursor>
					lcd_string("    ");
 8001ea4:	4841      	ldr	r0, [pc, #260]	; (8001fac <step_motor_processing+0x564>)
 8001ea6:	f7fe fd56 	bl	8000956 <lcd_string>
				}
				break;
 8001eaa:	e009      	b.n	8001ec0 <step_motor_processing+0x478>
			default:
				break;
			}
		}
 8001eac:	bf00      	nop
 8001eae:	e008      	b.n	8001ec2 <step_motor_processing+0x47a>
				break;
 8001eb0:	bf00      	nop
 8001eb2:	e006      	b.n	8001ec2 <step_motor_processing+0x47a>
				break;
 8001eb4:	bf00      	nop
 8001eb6:	e004      	b.n	8001ec2 <step_motor_processing+0x47a>
				break;
 8001eb8:	bf00      	nop
 8001eba:	e002      	b.n	8001ec2 <step_motor_processing+0x47a>
				break;
 8001ebc:	bf00      	nop
 8001ebe:	e000      	b.n	8001ec2 <step_motor_processing+0x47a>
				break;
 8001ec0:	bf00      	nop

		if (f1 || f2 || f3 || f4)
 8001ec2:	4b39      	ldr	r3, [pc, #228]	; (8001fa8 <step_motor_processing+0x560>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10b      	bne.n	8001ee2 <step_motor_processing+0x49a>
 8001eca:	4b34      	ldr	r3, [pc, #208]	; (8001f9c <step_motor_processing+0x554>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d107      	bne.n	8001ee2 <step_motor_processing+0x49a>
 8001ed2:	4b42      	ldr	r3, [pc, #264]	; (8001fdc <step_motor_processing+0x594>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d103      	bne.n	8001ee2 <step_motor_processing+0x49a>
 8001eda:	4b41      	ldr	r3, [pc, #260]	; (8001fe0 <step_motor_processing+0x598>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d009      	beq.n	8001ef6 <step_motor_processing+0x4ae>
		{
			up_down_flag = UP;
 8001ee2:	4b40      	ldr	r3, [pc, #256]	; (8001fe4 <step_motor_processing+0x59c>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
			step_motor_drive(UP);
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f7ff fc8d 	bl	8001808 <step_motor_drive>
			set_rpm(MAX);
 8001eee:	200d      	movs	r0, #13
 8001ef0:	f7ff fd9a 	bl	8001a28 <set_rpm>
 8001ef4:	e00d      	b.n	8001f12 <step_motor_processing+0x4ca>
		}
		else
		{
			up_down_flag = 0;
 8001ef6:	4b3b      	ldr	r3, [pc, #236]	; (8001fe4 <step_motor_processing+0x59c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
			if (TIM10_10ms_wait >= 500)
 8001efc:	4b3a      	ldr	r3, [pc, #232]	; (8001fe8 <step_motor_processing+0x5a0>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f04:	db05      	blt.n	8001f12 <step_motor_processing+0x4ca>
			{
				up = 0;
 8001f06:	4b2b      	ldr	r3, [pc, #172]	; (8001fb4 <step_motor_processing+0x56c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
				stop = 1;
 8001f0c:	4b37      	ldr	r3, [pc, #220]	; (8001fec <step_motor_processing+0x5a4>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	601a      	str	r2, [r3, #0]
			}
		}
		if (get_button(BUTTON4_GPIO_Port, BUTTON4_Pin, 4) == BUTTON_PRESS)
 8001f12:	2204      	movs	r2, #4
 8001f14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f18:	4821      	ldr	r0, [pc, #132]	; (8001fa0 <step_motor_processing+0x558>)
 8001f1a:	f7fe faeb 	bl	80004f4 <get_button>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d11c      	bne.n	8001f5e <step_motor_processing+0x516>
		{
			if (e_floor < 4)
 8001f24:	4b1f      	ldr	r3, [pc, #124]	; (8001fa4 <step_motor_processing+0x55c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	dc18      	bgt.n	8001f5e <step_motor_processing+0x516>
			{
				if (f4)
 8001f2c:	4b2c      	ldr	r3, [pc, #176]	; (8001fe0 <step_motor_processing+0x598>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00a      	beq.n	8001f4a <step_motor_processing+0x502>
				{
					move_cursor(1, 0);
 8001f34:	2100      	movs	r1, #0
 8001f36:	2001      	movs	r0, #1
 8001f38:	f7fe fd22 	bl	8000980 <move_cursor>
					lcd_string("    ");
 8001f3c:	481b      	ldr	r0, [pc, #108]	; (8001fac <step_motor_processing+0x564>)
 8001f3e:	f7fe fd0a 	bl	8000956 <lcd_string>
					f4 = 0;
 8001f42:	4b27      	ldr	r3, [pc, #156]	; (8001fe0 <step_motor_processing+0x598>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	e009      	b.n	8001f5e <step_motor_processing+0x516>
				}
				else
				{
					move_cursor(1, 0);
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	f7fe fd17 	bl	8000980 <move_cursor>
					lcd_string("   4");
 8001f52:	4827      	ldr	r0, [pc, #156]	; (8001ff0 <step_motor_processing+0x5a8>)
 8001f54:	f7fe fcff 	bl	8000956 <lcd_string>
					f4 = 1;
 8001f58:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <step_motor_processing+0x598>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]
				}
			}
		}
		if (get_button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 8001f5e:	2203      	movs	r2, #3
 8001f60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f64:	480e      	ldr	r0, [pc, #56]	; (8001fa0 <step_motor_processing+0x558>)
 8001f66:	f7fe fac5 	bl	80004f4 <get_button>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d14b      	bne.n	8002008 <step_motor_processing+0x5c0>
		{
			if (e_floor < 3)
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <step_motor_processing+0x55c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	dc47      	bgt.n	8002008 <step_motor_processing+0x5c0>
			{
				if (f3)
 8001f78:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <step_motor_processing+0x594>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d039      	beq.n	8001ff4 <step_motor_processing+0x5ac>
				{
					move_cursor(1, 4);
 8001f80:	2104      	movs	r1, #4
 8001f82:	2001      	movs	r0, #1
 8001f84:	f7fe fcfc 	bl	8000980 <move_cursor>
					lcd_string("    ");
 8001f88:	4808      	ldr	r0, [pc, #32]	; (8001fac <step_motor_processing+0x564>)
 8001f8a:	f7fe fce4 	bl	8000956 <lcd_string>
					f3 = 0;
 8001f8e:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <step_motor_processing+0x594>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	e038      	b.n	8002008 <step_motor_processing+0x5c0>
 8001f96:	bf00      	nop
 8001f98:	0800cec4 	.word	0x0800cec4
 8001f9c:	20000bc0 	.word	0x20000bc0
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	20000ba0 	.word	0x20000ba0
 8001fa8:	20000bbc 	.word	0x20000bbc
 8001fac:	0800ceac 	.word	0x0800ceac
 8001fb0:	0800cecc 	.word	0x0800cecc
 8001fb4:	20000bd4 	.word	0x20000bd4
 8001fb8:	20000b9c 	.word	0x20000b9c
 8001fbc:	20000b94 	.word	0x20000b94
 8001fc0:	20000098 	.word	0x20000098
 8001fc4:	2000009c 	.word	0x2000009c
 8001fc8:	200000a4 	.word	0x200000a4
 8001fcc:	200000a0 	.word	0x200000a0
 8001fd0:	0800ced4 	.word	0x0800ced4
 8001fd4:	20000bcc 	.word	0x20000bcc
 8001fd8:	20000bd0 	.word	0x20000bd0
 8001fdc:	20000bc4 	.word	0x20000bc4
 8001fe0:	20000bc8 	.word	0x20000bc8
 8001fe4:	20000ba4 	.word	0x20000ba4
 8001fe8:	20000b98 	.word	0x20000b98
 8001fec:	200000a8 	.word	0x200000a8
 8001ff0:	0800ceb4 	.word	0x0800ceb4
				}
				else
				{
					move_cursor(1, 4);
 8001ff4:	2104      	movs	r1, #4
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	f7fe fcc2 	bl	8000980 <move_cursor>
					lcd_string("   3");
 8001ffc:	488f      	ldr	r0, [pc, #572]	; (800223c <step_motor_processing+0x7f4>)
 8001ffe:	f7fe fcaa 	bl	8000956 <lcd_string>
					f3 = 1;
 8002002:	4b8f      	ldr	r3, [pc, #572]	; (8002240 <step_motor_processing+0x7f8>)
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]
				}
			}
		}
		if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 8002008:	2202      	movs	r2, #2
 800200a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800200e:	488d      	ldr	r0, [pc, #564]	; (8002244 <step_motor_processing+0x7fc>)
 8002010:	f7fe fa70 	bl	80004f4 <get_button>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d11c      	bne.n	8002054 <step_motor_processing+0x60c>
		{
			if (e_floor < 2)
 800201a:	4b8b      	ldr	r3, [pc, #556]	; (8002248 <step_motor_processing+0x800>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b01      	cmp	r3, #1
 8002020:	dc18      	bgt.n	8002054 <step_motor_processing+0x60c>
			{
				if (f2)
 8002022:	4b8a      	ldr	r3, [pc, #552]	; (800224c <step_motor_processing+0x804>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00a      	beq.n	8002040 <step_motor_processing+0x5f8>
				{
					move_cursor(1, 8);
 800202a:	2108      	movs	r1, #8
 800202c:	2001      	movs	r0, #1
 800202e:	f7fe fca7 	bl	8000980 <move_cursor>
					lcd_string("    ");
 8002032:	4887      	ldr	r0, [pc, #540]	; (8002250 <step_motor_processing+0x808>)
 8002034:	f7fe fc8f 	bl	8000956 <lcd_string>
					f2 = 0;
 8002038:	4b84      	ldr	r3, [pc, #528]	; (800224c <step_motor_processing+0x804>)
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	e009      	b.n	8002054 <step_motor_processing+0x60c>
				}
				else
				{
					move_cursor(1, 8);
 8002040:	2108      	movs	r1, #8
 8002042:	2001      	movs	r0, #1
 8002044:	f7fe fc9c 	bl	8000980 <move_cursor>
					lcd_string("   2");
 8002048:	4882      	ldr	r0, [pc, #520]	; (8002254 <step_motor_processing+0x80c>)
 800204a:	f7fe fc84 	bl	8000956 <lcd_string>
					f2 = 1;
 800204e:	4b7f      	ldr	r3, [pc, #508]	; (800224c <step_motor_processing+0x804>)
 8002050:	2201      	movs	r2, #1
 8002052:	601a      	str	r2, [r3, #0]
				}
			}
		}
		if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8002054:	2201      	movs	r2, #1
 8002056:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800205a:	487a      	ldr	r0, [pc, #488]	; (8002244 <step_motor_processing+0x7fc>)
 800205c:	f7fe fa4a 	bl	80004f4 <get_button>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d11c      	bne.n	80020a0 <step_motor_processing+0x658>
		{
			if (e_floor < 1)
 8002066:	4b78      	ldr	r3, [pc, #480]	; (8002248 <step_motor_processing+0x800>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	dc18      	bgt.n	80020a0 <step_motor_processing+0x658>
			{
				if (f1)
 800206e:	4b7a      	ldr	r3, [pc, #488]	; (8002258 <step_motor_processing+0x810>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00a      	beq.n	800208c <step_motor_processing+0x644>
				{
					move_cursor(1, 12);
 8002076:	210c      	movs	r1, #12
 8002078:	2001      	movs	r0, #1
 800207a:	f7fe fc81 	bl	8000980 <move_cursor>
					lcd_string("    ");
 800207e:	4874      	ldr	r0, [pc, #464]	; (8002250 <step_motor_processing+0x808>)
 8002080:	f7fe fc69 	bl	8000956 <lcd_string>
					f1 = 0;
 8002084:	4b74      	ldr	r3, [pc, #464]	; (8002258 <step_motor_processing+0x810>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	e009      	b.n	80020a0 <step_motor_processing+0x658>
				}
				else
				{
					move_cursor(1, 12);
 800208c:	210c      	movs	r1, #12
 800208e:	2001      	movs	r0, #1
 8002090:	f7fe fc76 	bl	8000980 <move_cursor>
					lcd_string("   1");
 8002094:	4871      	ldr	r0, [pc, #452]	; (800225c <step_motor_processing+0x814>)
 8002096:	f7fe fc5e 	bl	8000956 <lcd_string>
					f1 = 1;
 800209a:	4b6f      	ldr	r3, [pc, #444]	; (8002258 <step_motor_processing+0x810>)
 800209c:	2201      	movs	r2, #1
 800209e:	601a      	str	r2, [r3, #0]
				}
			}
		}
		if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 80020a0:	2200      	movs	r2, #0
 80020a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020a6:	4867      	ldr	r0, [pc, #412]	; (8002244 <step_motor_processing+0x7fc>)
 80020a8:	f7fe fa24 	bl	80004f4 <get_button>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 822c 	bne.w	800250c <step_motor_processing+0xac4>
		{
			if (!(f1 || f2 || f3 || f4))
 80020b4:	4b68      	ldr	r3, [pc, #416]	; (8002258 <step_motor_processing+0x810>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f040 8227 	bne.w	800250c <step_motor_processing+0xac4>
 80020be:	4b63      	ldr	r3, [pc, #396]	; (800224c <step_motor_processing+0x804>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f040 8222 	bne.w	800250c <step_motor_processing+0xac4>
 80020c8:	4b5d      	ldr	r3, [pc, #372]	; (8002240 <step_motor_processing+0x7f8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f040 821d 	bne.w	800250c <step_motor_processing+0xac4>
 80020d2:	4b63      	ldr	r3, [pc, #396]	; (8002260 <step_motor_processing+0x818>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f040 8218 	bne.w	800250c <step_motor_processing+0xac4>
			{
				up = 0;
 80020dc:	4b61      	ldr	r3, [pc, #388]	; (8002264 <step_motor_processing+0x81c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
				down = 1;
 80020e2:	4b61      	ldr	r3, [pc, #388]	; (8002268 <step_motor_processing+0x820>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	601a      	str	r2, [r3, #0]
		if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 80020e8:	e210      	b.n	800250c <step_motor_processing+0xac4>
			}
		}
	}
	else if (down && !step_stop_flag)
 80020ea:	4b5f      	ldr	r3, [pc, #380]	; (8002268 <step_motor_processing+0x820>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 81bf 	beq.w	8002472 <step_motor_processing+0xa2a>
 80020f4:	4b5d      	ldr	r3, [pc, #372]	; (800226c <step_motor_processing+0x824>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f040 81ba 	bne.w	8002472 <step_motor_processing+0xa2a>
	{
		TIM10_10ms_stepmotor_delay = 0;
 80020fe:	4b5c      	ldr	r3, [pc, #368]	; (8002270 <step_motor_processing+0x828>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

		lcd_hold = 1;
 8002104:	4b5b      	ldr	r3, [pc, #364]	; (8002274 <step_motor_processing+0x82c>)
 8002106:	2201      	movs	r2, #1
 8002108:	601a      	str	r2, [r3, #0]
		lcd_stop = 1;
 800210a:	4b5b      	ldr	r3, [pc, #364]	; (8002278 <step_motor_processing+0x830>)
 800210c:	2201      	movs	r2, #1
 800210e:	601a      	str	r2, [r3, #0]
		lcd_up = 1;
 8002110:	4b5a      	ldr	r3, [pc, #360]	; (800227c <step_motor_processing+0x834>)
 8002112:	2201      	movs	r2, #1
 8002114:	601a      	str	r2, [r3, #0]

		if (lcd_down)
 8002116:	4b5a      	ldr	r3, [pc, #360]	; (8002280 <step_motor_processing+0x838>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d009      	beq.n	8002132 <step_motor_processing+0x6ea>
		{
			lcd_down = 0;
 800211e:	4b58      	ldr	r3, [pc, #352]	; (8002280 <step_motor_processing+0x838>)
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
			move_cursor(0, 0);
 8002124:	2100      	movs	r1, #0
 8002126:	2000      	movs	r0, #0
 8002128:	f7fe fc2a 	bl	8000980 <move_cursor>
			lcd_string("DOWN");
 800212c:	4855      	ldr	r0, [pc, #340]	; (8002284 <step_motor_processing+0x83c>)
 800212e:	f7fe fc12 	bl	8000956 <lcd_string>
		}

		if (prev_floor != e_floor)
 8002132:	4b55      	ldr	r3, [pc, #340]	; (8002288 <step_motor_processing+0x840>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4b44      	ldr	r3, [pc, #272]	; (8002248 <step_motor_processing+0x800>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d074      	beq.n	8002228 <step_motor_processing+0x7e0>
		{
			switch (e_floor)
 800213e:	4b42      	ldr	r3, [pc, #264]	; (8002248 <step_motor_processing+0x800>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	3b01      	subs	r3, #1
 8002144:	2b03      	cmp	r3, #3
 8002146:	d871      	bhi.n	800222c <step_motor_processing+0x7e4>
 8002148:	a201      	add	r2, pc, #4	; (adr r2, 8002150 <step_motor_processing+0x708>)
 800214a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214e:	bf00      	nop
 8002150:	08002161 	.word	0x08002161
 8002154:	08002193 	.word	0x08002193
 8002158:	080021c5 	.word	0x080021c5
 800215c:	080021f7 	.word	0x080021f7
			{
			case 1:
				prev_floor = e_floor;
 8002160:	4b39      	ldr	r3, [pc, #228]	; (8002248 <step_motor_processing+0x800>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a48      	ldr	r2, [pc, #288]	; (8002288 <step_motor_processing+0x840>)
 8002166:	6013      	str	r3, [r2, #0]
				if (f1)
 8002168:	4b3b      	ldr	r3, [pc, #236]	; (8002258 <step_motor_processing+0x810>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d05f      	beq.n	8002230 <step_motor_processing+0x7e8>
				{
					f1 = 0;
 8002170:	4b39      	ldr	r3, [pc, #228]	; (8002258 <step_motor_processing+0x810>)
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
					TIM10_10ms_stepmotor_delay = 0;
 8002176:	4b3e      	ldr	r3, [pc, #248]	; (8002270 <step_motor_processing+0x828>)
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
					hold = 1;
 800217c:	4b43      	ldr	r3, [pc, #268]	; (800228c <step_motor_processing+0x844>)
 800217e:	2201      	movs	r2, #1
 8002180:	601a      	str	r2, [r3, #0]
					move_cursor(1, 12);
 8002182:	210c      	movs	r1, #12
 8002184:	2001      	movs	r0, #1
 8002186:	f7fe fbfb 	bl	8000980 <move_cursor>
					lcd_string("    ");
 800218a:	4831      	ldr	r0, [pc, #196]	; (8002250 <step_motor_processing+0x808>)
 800218c:	f7fe fbe3 	bl	8000956 <lcd_string>
				}
				break;
 8002190:	e04e      	b.n	8002230 <step_motor_processing+0x7e8>
			case 2:
				prev_floor = e_floor;
 8002192:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <step_motor_processing+0x800>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a3c      	ldr	r2, [pc, #240]	; (8002288 <step_motor_processing+0x840>)
 8002198:	6013      	str	r3, [r2, #0]
				if (f2)
 800219a:	4b2c      	ldr	r3, [pc, #176]	; (800224c <step_motor_processing+0x804>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d048      	beq.n	8002234 <step_motor_processing+0x7ec>
				{
					f2 = 0;
 80021a2:	4b2a      	ldr	r3, [pc, #168]	; (800224c <step_motor_processing+0x804>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
					TIM10_10ms_stepmotor_delay = 0;
 80021a8:	4b31      	ldr	r3, [pc, #196]	; (8002270 <step_motor_processing+0x828>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
					hold = 1;
 80021ae:	4b37      	ldr	r3, [pc, #220]	; (800228c <step_motor_processing+0x844>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	601a      	str	r2, [r3, #0]
					move_cursor(1, 8);
 80021b4:	2108      	movs	r1, #8
 80021b6:	2001      	movs	r0, #1
 80021b8:	f7fe fbe2 	bl	8000980 <move_cursor>
					lcd_string("    ");
 80021bc:	4824      	ldr	r0, [pc, #144]	; (8002250 <step_motor_processing+0x808>)
 80021be:	f7fe fbca 	bl	8000956 <lcd_string>
				}
				break;
 80021c2:	e037      	b.n	8002234 <step_motor_processing+0x7ec>
			case 3:
				prev_floor = e_floor;
 80021c4:	4b20      	ldr	r3, [pc, #128]	; (8002248 <step_motor_processing+0x800>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a2f      	ldr	r2, [pc, #188]	; (8002288 <step_motor_processing+0x840>)
 80021ca:	6013      	str	r3, [r2, #0]
				if (f3)
 80021cc:	4b1c      	ldr	r3, [pc, #112]	; (8002240 <step_motor_processing+0x7f8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d031      	beq.n	8002238 <step_motor_processing+0x7f0>
				{
					f3 = 0;
 80021d4:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <step_motor_processing+0x7f8>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
					TIM10_10ms_stepmotor_delay = 0;
 80021da:	4b25      	ldr	r3, [pc, #148]	; (8002270 <step_motor_processing+0x828>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
					hold = 1;
 80021e0:	4b2a      	ldr	r3, [pc, #168]	; (800228c <step_motor_processing+0x844>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	601a      	str	r2, [r3, #0]
					move_cursor(1, 4);
 80021e6:	2104      	movs	r1, #4
 80021e8:	2001      	movs	r0, #1
 80021ea:	f7fe fbc9 	bl	8000980 <move_cursor>
					lcd_string("    ");
 80021ee:	4818      	ldr	r0, [pc, #96]	; (8002250 <step_motor_processing+0x808>)
 80021f0:	f7fe fbb1 	bl	8000956 <lcd_string>
				}
				break;
 80021f4:	e020      	b.n	8002238 <step_motor_processing+0x7f0>
			case 4:
				prev_floor = e_floor;
 80021f6:	4b14      	ldr	r3, [pc, #80]	; (8002248 <step_motor_processing+0x800>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a23      	ldr	r2, [pc, #140]	; (8002288 <step_motor_processing+0x840>)
 80021fc:	6013      	str	r3, [r2, #0]
				if (f4)
 80021fe:	4b18      	ldr	r3, [pc, #96]	; (8002260 <step_motor_processing+0x818>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d044      	beq.n	8002290 <step_motor_processing+0x848>
				{
					f4 = 0;
 8002206:	4b16      	ldr	r3, [pc, #88]	; (8002260 <step_motor_processing+0x818>)
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
					TIM10_10ms_stepmotor_delay = 0;
 800220c:	4b18      	ldr	r3, [pc, #96]	; (8002270 <step_motor_processing+0x828>)
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
					hold = 1;
 8002212:	4b1e      	ldr	r3, [pc, #120]	; (800228c <step_motor_processing+0x844>)
 8002214:	2201      	movs	r2, #1
 8002216:	601a      	str	r2, [r3, #0]
					move_cursor(1, 0);
 8002218:	2100      	movs	r1, #0
 800221a:	2001      	movs	r0, #1
 800221c:	f7fe fbb0 	bl	8000980 <move_cursor>
					lcd_string("    ");
 8002220:	480b      	ldr	r0, [pc, #44]	; (8002250 <step_motor_processing+0x808>)
 8002222:	f7fe fb98 	bl	8000956 <lcd_string>
				}
				break;
 8002226:	e033      	b.n	8002290 <step_motor_processing+0x848>
			default:
				break;
			}
		}
 8002228:	bf00      	nop
 800222a:	e032      	b.n	8002292 <step_motor_processing+0x84a>
				break;
 800222c:	bf00      	nop
 800222e:	e030      	b.n	8002292 <step_motor_processing+0x84a>
				break;
 8002230:	bf00      	nop
 8002232:	e02e      	b.n	8002292 <step_motor_processing+0x84a>
				break;
 8002234:	bf00      	nop
 8002236:	e02c      	b.n	8002292 <step_motor_processing+0x84a>
				break;
 8002238:	bf00      	nop
 800223a:	e02a      	b.n	8002292 <step_motor_processing+0x84a>
 800223c:	0800cebc 	.word	0x0800cebc
 8002240:	20000bc4 	.word	0x20000bc4
 8002244:	40021000 	.word	0x40021000
 8002248:	20000ba0 	.word	0x20000ba0
 800224c:	20000bc0 	.word	0x20000bc0
 8002250:	0800ceac 	.word	0x0800ceac
 8002254:	0800cec4 	.word	0x0800cec4
 8002258:	20000bbc 	.word	0x20000bbc
 800225c:	0800cecc 	.word	0x0800cecc
 8002260:	20000bc8 	.word	0x20000bc8
 8002264:	20000bd4 	.word	0x20000bd4
 8002268:	20000bd8 	.word	0x20000bd8
 800226c:	20000b9c 	.word	0x20000b9c
 8002270:	20000b94 	.word	0x20000b94
 8002274:	20000098 	.word	0x20000098
 8002278:	2000009c 	.word	0x2000009c
 800227c:	200000a0 	.word	0x200000a0
 8002280:	200000a4 	.word	0x200000a4
 8002284:	0800cedc 	.word	0x0800cedc
 8002288:	20000bcc 	.word	0x20000bcc
 800228c:	20000bd0 	.word	0x20000bd0
				break;
 8002290:	bf00      	nop

		if (prev_floor != e_floor)
 8002292:	4ba1      	ldr	r3, [pc, #644]	; (8002518 <step_motor_processing+0xad0>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	4ba1      	ldr	r3, [pc, #644]	; (800251c <step_motor_processing+0xad4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d009      	beq.n	80022b2 <step_motor_processing+0x86a>
		{
			prev_floor = e_floor;
 800229e:	4b9f      	ldr	r3, [pc, #636]	; (800251c <step_motor_processing+0xad4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a9d      	ldr	r2, [pc, #628]	; (8002518 <step_motor_processing+0xad0>)
 80022a4:	6013      	str	r3, [r2, #0]
			TIM10_10ms_stepmotor_delay = 0;
 80022a6:	4b9e      	ldr	r3, [pc, #632]	; (8002520 <step_motor_processing+0xad8>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
			hold = 1;
 80022ac:	4b9d      	ldr	r3, [pc, #628]	; (8002524 <step_motor_processing+0xadc>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
		}

		if (f1 || f2 || f3 || f4)
 80022b2:	4b9d      	ldr	r3, [pc, #628]	; (8002528 <step_motor_processing+0xae0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10b      	bne.n	80022d2 <step_motor_processing+0x88a>
 80022ba:	4b9c      	ldr	r3, [pc, #624]	; (800252c <step_motor_processing+0xae4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d107      	bne.n	80022d2 <step_motor_processing+0x88a>
 80022c2:	4b9b      	ldr	r3, [pc, #620]	; (8002530 <step_motor_processing+0xae8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d103      	bne.n	80022d2 <step_motor_processing+0x88a>
 80022ca:	4b9a      	ldr	r3, [pc, #616]	; (8002534 <step_motor_processing+0xaec>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d009      	beq.n	80022e6 <step_motor_processing+0x89e>
		{
			up_down_flag = DOWN;
 80022d2:	4b99      	ldr	r3, [pc, #612]	; (8002538 <step_motor_processing+0xaf0>)
 80022d4:	2202      	movs	r2, #2
 80022d6:	601a      	str	r2, [r3, #0]
			step_motor_drive(DOWN);
 80022d8:	2002      	movs	r0, #2
 80022da:	f7ff fa95 	bl	8001808 <step_motor_drive>
			set_rpm(MAX);
 80022de:	200d      	movs	r0, #13
 80022e0:	f7ff fba2 	bl	8001a28 <set_rpm>
 80022e4:	e00d      	b.n	8002302 <step_motor_processing+0x8ba>
		}
		else
		{
			up_down_flag = 0;
 80022e6:	4b94      	ldr	r3, [pc, #592]	; (8002538 <step_motor_processing+0xaf0>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
			if (TIM10_10ms_wait >= 500)
 80022ec:	4b93      	ldr	r3, [pc, #588]	; (800253c <step_motor_processing+0xaf4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80022f4:	db05      	blt.n	8002302 <step_motor_processing+0x8ba>
			{
				down = 0;
 80022f6:	4b92      	ldr	r3, [pc, #584]	; (8002540 <step_motor_processing+0xaf8>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
				stop = 1;
 80022fc:	4b91      	ldr	r3, [pc, #580]	; (8002544 <step_motor_processing+0xafc>)
 80022fe:	2201      	movs	r2, #1
 8002300:	601a      	str	r2, [r3, #0]
			}
		}
		if (get_button(BUTTON5_GPIO_Port, BUTTON5_Pin, 5) == BUTTON_PRESS)
 8002302:	2205      	movs	r2, #5
 8002304:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002308:	488f      	ldr	r0, [pc, #572]	; (8002548 <step_motor_processing+0xb00>)
 800230a:	f7fe f8f3 	bl	80004f4 <get_button>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d115      	bne.n	8002340 <step_motor_processing+0x8f8>
		{
			if (!(f1 || f2 || f3 || f4))
 8002314:	4b84      	ldr	r3, [pc, #528]	; (8002528 <step_motor_processing+0xae0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d111      	bne.n	8002340 <step_motor_processing+0x8f8>
 800231c:	4b83      	ldr	r3, [pc, #524]	; (800252c <step_motor_processing+0xae4>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10d      	bne.n	8002340 <step_motor_processing+0x8f8>
 8002324:	4b82      	ldr	r3, [pc, #520]	; (8002530 <step_motor_processing+0xae8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d109      	bne.n	8002340 <step_motor_processing+0x8f8>
 800232c:	4b81      	ldr	r3, [pc, #516]	; (8002534 <step_motor_processing+0xaec>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d105      	bne.n	8002340 <step_motor_processing+0x8f8>
			{
				up = 1;
 8002334:	4b85      	ldr	r3, [pc, #532]	; (800254c <step_motor_processing+0xb04>)
 8002336:	2201      	movs	r2, #1
 8002338:	601a      	str	r2, [r3, #0]
				down = 0;
 800233a:	4b81      	ldr	r3, [pc, #516]	; (8002540 <step_motor_processing+0xaf8>)
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
			}
		}
		if (get_button(BUTTON4_GPIO_Port, BUTTON4_Pin, 4) == BUTTON_PRESS)
 8002340:	2204      	movs	r2, #4
 8002342:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002346:	4880      	ldr	r0, [pc, #512]	; (8002548 <step_motor_processing+0xb00>)
 8002348:	f7fe f8d4 	bl	80004f4 <get_button>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d11c      	bne.n	800238c <step_motor_processing+0x944>
		{
			if (e_floor > 4)
 8002352:	4b72      	ldr	r3, [pc, #456]	; (800251c <step_motor_processing+0xad4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b04      	cmp	r3, #4
 8002358:	dd18      	ble.n	800238c <step_motor_processing+0x944>
			{
				if (f4)
 800235a:	4b76      	ldr	r3, [pc, #472]	; (8002534 <step_motor_processing+0xaec>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <step_motor_processing+0x930>
				{
					move_cursor(1, 0);
 8002362:	2100      	movs	r1, #0
 8002364:	2001      	movs	r0, #1
 8002366:	f7fe fb0b 	bl	8000980 <move_cursor>
					lcd_string("    ");
 800236a:	4879      	ldr	r0, [pc, #484]	; (8002550 <step_motor_processing+0xb08>)
 800236c:	f7fe faf3 	bl	8000956 <lcd_string>
					f4 = 0;
 8002370:	4b70      	ldr	r3, [pc, #448]	; (8002534 <step_motor_processing+0xaec>)
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	e009      	b.n	800238c <step_motor_processing+0x944>
				}
				else
				{
					move_cursor(1, 0);
 8002378:	2100      	movs	r1, #0
 800237a:	2001      	movs	r0, #1
 800237c:	f7fe fb00 	bl	8000980 <move_cursor>
					lcd_string("   4");
 8002380:	4874      	ldr	r0, [pc, #464]	; (8002554 <step_motor_processing+0xb0c>)
 8002382:	f7fe fae8 	bl	8000956 <lcd_string>
					f4 = 1;
 8002386:	4b6b      	ldr	r3, [pc, #428]	; (8002534 <step_motor_processing+0xaec>)
 8002388:	2201      	movs	r2, #1
 800238a:	601a      	str	r2, [r3, #0]
				}
			}
		}
		if (get_button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 800238c:	2203      	movs	r2, #3
 800238e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002392:	486d      	ldr	r0, [pc, #436]	; (8002548 <step_motor_processing+0xb00>)
 8002394:	f7fe f8ae 	bl	80004f4 <get_button>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d11c      	bne.n	80023d8 <step_motor_processing+0x990>
		{
			if (e_floor > 3)
 800239e:	4b5f      	ldr	r3, [pc, #380]	; (800251c <step_motor_processing+0xad4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	dd18      	ble.n	80023d8 <step_motor_processing+0x990>
			{
				if (f3)
 80023a6:	4b62      	ldr	r3, [pc, #392]	; (8002530 <step_motor_processing+0xae8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00a      	beq.n	80023c4 <step_motor_processing+0x97c>
				{
					move_cursor(1, 4);
 80023ae:	2104      	movs	r1, #4
 80023b0:	2001      	movs	r0, #1
 80023b2:	f7fe fae5 	bl	8000980 <move_cursor>
					lcd_string("    ");
 80023b6:	4866      	ldr	r0, [pc, #408]	; (8002550 <step_motor_processing+0xb08>)
 80023b8:	f7fe facd 	bl	8000956 <lcd_string>
					f3 = 0;
 80023bc:	4b5c      	ldr	r3, [pc, #368]	; (8002530 <step_motor_processing+0xae8>)
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	e009      	b.n	80023d8 <step_motor_processing+0x990>
				}
				else
				{
					move_cursor(1, 4);
 80023c4:	2104      	movs	r1, #4
 80023c6:	2001      	movs	r0, #1
 80023c8:	f7fe fada 	bl	8000980 <move_cursor>
					lcd_string("   3");
 80023cc:	4862      	ldr	r0, [pc, #392]	; (8002558 <step_motor_processing+0xb10>)
 80023ce:	f7fe fac2 	bl	8000956 <lcd_string>
					f3 = 1;
 80023d2:	4b57      	ldr	r3, [pc, #348]	; (8002530 <step_motor_processing+0xae8>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]
				}
			}
		}
		if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 80023d8:	2202      	movs	r2, #2
 80023da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023de:	485a      	ldr	r0, [pc, #360]	; (8002548 <step_motor_processing+0xb00>)
 80023e0:	f7fe f888 	bl	80004f4 <get_button>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d11c      	bne.n	8002424 <step_motor_processing+0x9dc>
		{
			if (e_floor > 2)
 80023ea:	4b4c      	ldr	r3, [pc, #304]	; (800251c <step_motor_processing+0xad4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	dd18      	ble.n	8002424 <step_motor_processing+0x9dc>
			{
				if (f2)
 80023f2:	4b4e      	ldr	r3, [pc, #312]	; (800252c <step_motor_processing+0xae4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00a      	beq.n	8002410 <step_motor_processing+0x9c8>
				{
					move_cursor(1, 8);
 80023fa:	2108      	movs	r1, #8
 80023fc:	2001      	movs	r0, #1
 80023fe:	f7fe fabf 	bl	8000980 <move_cursor>
					lcd_string("    ");
 8002402:	4853      	ldr	r0, [pc, #332]	; (8002550 <step_motor_processing+0xb08>)
 8002404:	f7fe faa7 	bl	8000956 <lcd_string>
					f2 = 0;
 8002408:	4b48      	ldr	r3, [pc, #288]	; (800252c <step_motor_processing+0xae4>)
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	e009      	b.n	8002424 <step_motor_processing+0x9dc>
				}
				else
				{
					move_cursor(1, 8);
 8002410:	2108      	movs	r1, #8
 8002412:	2001      	movs	r0, #1
 8002414:	f7fe fab4 	bl	8000980 <move_cursor>
					lcd_string("   2");
 8002418:	4850      	ldr	r0, [pc, #320]	; (800255c <step_motor_processing+0xb14>)
 800241a:	f7fe fa9c 	bl	8000956 <lcd_string>
					f2 = 1;
 800241e:	4b43      	ldr	r3, [pc, #268]	; (800252c <step_motor_processing+0xae4>)
 8002420:	2201      	movs	r2, #1
 8002422:	601a      	str	r2, [r3, #0]
				}
			}
		}
		if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8002424:	2201      	movs	r2, #1
 8002426:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800242a:	4847      	ldr	r0, [pc, #284]	; (8002548 <step_motor_processing+0xb00>)
 800242c:	f7fe f862 	bl	80004f4 <get_button>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d16c      	bne.n	8002510 <step_motor_processing+0xac8>
		{
			if (e_floor > 1)
 8002436:	4b39      	ldr	r3, [pc, #228]	; (800251c <step_motor_processing+0xad4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2b01      	cmp	r3, #1
 800243c:	dd68      	ble.n	8002510 <step_motor_processing+0xac8>
			{
				if (f1)
 800243e:	4b3a      	ldr	r3, [pc, #232]	; (8002528 <step_motor_processing+0xae0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <step_motor_processing+0xa14>
				{
					move_cursor(1, 12);
 8002446:	210c      	movs	r1, #12
 8002448:	2001      	movs	r0, #1
 800244a:	f7fe fa99 	bl	8000980 <move_cursor>
					lcd_string("    ");
 800244e:	4840      	ldr	r0, [pc, #256]	; (8002550 <step_motor_processing+0xb08>)
 8002450:	f7fe fa81 	bl	8000956 <lcd_string>
					f1 = 0;
 8002454:	4b34      	ldr	r3, [pc, #208]	; (8002528 <step_motor_processing+0xae0>)
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
		if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 800245a:	e059      	b.n	8002510 <step_motor_processing+0xac8>
				}
				else
				{
					move_cursor(1, 12);
 800245c:	210c      	movs	r1, #12
 800245e:	2001      	movs	r0, #1
 8002460:	f7fe fa8e 	bl	8000980 <move_cursor>
					lcd_string("   1");
 8002464:	483e      	ldr	r0, [pc, #248]	; (8002560 <step_motor_processing+0xb18>)
 8002466:	f7fe fa76 	bl	8000956 <lcd_string>
					f1 = 1;
 800246a:	4b2f      	ldr	r3, [pc, #188]	; (8002528 <step_motor_processing+0xae0>)
 800246c:	2201      	movs	r2, #1
 800246e:	601a      	str	r2, [r3, #0]
		if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8002470:	e04e      	b.n	8002510 <step_motor_processing+0xac8>
				}
			}
		}
	}
	else if (stop)
 8002472:	4b34      	ldr	r3, [pc, #208]	; (8002544 <step_motor_processing+0xafc>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d04b      	beq.n	8002512 <step_motor_processing+0xaca>
	{
		prev_floor = e_floor;
 800247a:	4b28      	ldr	r3, [pc, #160]	; (800251c <step_motor_processing+0xad4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a26      	ldr	r2, [pc, #152]	; (8002518 <step_motor_processing+0xad0>)
 8002480:	6013      	str	r3, [r2, #0]

		lcd_hold = 1;
 8002482:	4b38      	ldr	r3, [pc, #224]	; (8002564 <step_motor_processing+0xb1c>)
 8002484:	2201      	movs	r2, #1
 8002486:	601a      	str	r2, [r3, #0]
		lcd_down = 1;
 8002488:	4b37      	ldr	r3, [pc, #220]	; (8002568 <step_motor_processing+0xb20>)
 800248a:	2201      	movs	r2, #1
 800248c:	601a      	str	r2, [r3, #0]
		lcd_up = 1;
 800248e:	4b37      	ldr	r3, [pc, #220]	; (800256c <step_motor_processing+0xb24>)
 8002490:	2201      	movs	r2, #1
 8002492:	601a      	str	r2, [r3, #0]

		if (lcd_stop)
 8002494:	4b36      	ldr	r3, [pc, #216]	; (8002570 <step_motor_processing+0xb28>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d009      	beq.n	80024b0 <step_motor_processing+0xa68>
		{
			lcd_stop = 0;
 800249c:	4b34      	ldr	r3, [pc, #208]	; (8002570 <step_motor_processing+0xb28>)
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
			move_cursor(0, 0);
 80024a2:	2100      	movs	r1, #0
 80024a4:	2000      	movs	r0, #0
 80024a6:	f7fe fa6b 	bl	8000980 <move_cursor>
			lcd_string("STOP");
 80024aa:	4832      	ldr	r0, [pc, #200]	; (8002574 <step_motor_processing+0xb2c>)
 80024ac:	f7fe fa53 	bl	8000956 <lcd_string>
		}

		if (get_button(BUTTON5_GPIO_Port, BUTTON5_Pin, 5) == BUTTON_PRESS)
 80024b0:	2205      	movs	r2, #5
 80024b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024b6:	4824      	ldr	r0, [pc, #144]	; (8002548 <step_motor_processing+0xb00>)
 80024b8:	f7fe f81c 	bl	80004f4 <get_button>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <step_motor_processing+0xa8e>
		{
			up = 1;
 80024c2:	4b22      	ldr	r3, [pc, #136]	; (800254c <step_motor_processing+0xb04>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
			stop = 0;
 80024c8:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <step_motor_processing+0xafc>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
			TIM10_10ms_wait = 0;
 80024ce:	4b1b      	ldr	r3, [pc, #108]	; (800253c <step_motor_processing+0xaf4>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
			down = 1;
			stop = 0;
			TIM10_10ms_wait = 0;
		}
	}
}
 80024d4:	e01d      	b.n	8002512 <step_motor_processing+0xaca>
		else if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 80024d6:	2200      	movs	r2, #0
 80024d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024dc:	481a      	ldr	r0, [pc, #104]	; (8002548 <step_motor_processing+0xb00>)
 80024de:	f7fe f809 	bl	80004f4 <get_button>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d114      	bne.n	8002512 <step_motor_processing+0xaca>
			down = 1;
 80024e8:	4b15      	ldr	r3, [pc, #84]	; (8002540 <step_motor_processing+0xaf8>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	601a      	str	r2, [r3, #0]
			stop = 0;
 80024ee:	4b15      	ldr	r3, [pc, #84]	; (8002544 <step_motor_processing+0xafc>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
			TIM10_10ms_wait = 0;
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <step_motor_processing+0xaf4>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
}
 80024fa:	e00a      	b.n	8002512 <step_motor_processing+0xaca>
			break;
 80024fc:	bf00      	nop
 80024fe:	e008      	b.n	8002512 <step_motor_processing+0xaca>
			break;
 8002500:	bf00      	nop
 8002502:	e006      	b.n	8002512 <step_motor_processing+0xaca>
			break;
 8002504:	bf00      	nop
 8002506:	e004      	b.n	8002512 <step_motor_processing+0xaca>
			break;
 8002508:	bf00      	nop
 800250a:	e002      	b.n	8002512 <step_motor_processing+0xaca>
		if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 800250c:	bf00      	nop
 800250e:	e000      	b.n	8002512 <step_motor_processing+0xaca>
		if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8002510:	bf00      	nop
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000bcc 	.word	0x20000bcc
 800251c:	20000ba0 	.word	0x20000ba0
 8002520:	20000b94 	.word	0x20000b94
 8002524:	20000bd0 	.word	0x20000bd0
 8002528:	20000bbc 	.word	0x20000bbc
 800252c:	20000bc0 	.word	0x20000bc0
 8002530:	20000bc4 	.word	0x20000bc4
 8002534:	20000bc8 	.word	0x20000bc8
 8002538:	20000ba4 	.word	0x20000ba4
 800253c:	20000b98 	.word	0x20000b98
 8002540:	20000bd8 	.word	0x20000bd8
 8002544:	200000a8 	.word	0x200000a8
 8002548:	40021000 	.word	0x40021000
 800254c:	20000bd4 	.word	0x20000bd4
 8002550:	0800ceac 	.word	0x0800ceac
 8002554:	0800ceb4 	.word	0x0800ceb4
 8002558:	0800cebc 	.word	0x0800cebc
 800255c:	0800cec4 	.word	0x0800cec4
 8002560:	0800cecc 	.word	0x0800cecc
 8002564:	20000098 	.word	0x20000098
 8002568:	200000a4 	.word	0x200000a4
 800256c:	200000a0 	.word	0x200000a0
 8002570:	2000009c 	.word	0x2000009c
 8002574:	0800cee4 	.word	0x0800cee4

08002578 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	607b      	str	r3, [r7, #4]
 8002582:	4b12      	ldr	r3, [pc, #72]	; (80025cc <HAL_MspInit+0x54>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	4a11      	ldr	r2, [pc, #68]	; (80025cc <HAL_MspInit+0x54>)
 8002588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800258c:	6453      	str	r3, [r2, #68]	; 0x44
 800258e:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <HAL_MspInit+0x54>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002596:	607b      	str	r3, [r7, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	603b      	str	r3, [r7, #0]
 800259e:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_MspInit+0x54>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	4a0a      	ldr	r2, [pc, #40]	; (80025cc <HAL_MspInit+0x54>)
 80025a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a8:	6413      	str	r3, [r2, #64]	; 0x40
 80025aa:	4b08      	ldr	r3, [pc, #32]	; (80025cc <HAL_MspInit+0x54>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025b6:	2200      	movs	r2, #0
 80025b8:	210f      	movs	r1, #15
 80025ba:	f06f 0001 	mvn.w	r0, #1
 80025be:	f001 fc1d 	bl	8003dfc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800

080025d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08a      	sub	sp, #40	; 0x28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d8:	f107 0314 	add.w	r3, r7, #20
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a1b      	ldr	r2, [pc, #108]	; (800265c <HAL_ADC_MspInit+0x8c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d12f      	bne.n	8002652 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <HAL_ADC_MspInit+0x90>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	4a19      	ldr	r2, [pc, #100]	; (8002660 <HAL_ADC_MspInit+0x90>)
 80025fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002600:	6453      	str	r3, [r2, #68]	; 0x44
 8002602:	4b17      	ldr	r3, [pc, #92]	; (8002660 <HAL_ADC_MspInit+0x90>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	4b13      	ldr	r3, [pc, #76]	; (8002660 <HAL_ADC_MspInit+0x90>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	4a12      	ldr	r2, [pc, #72]	; (8002660 <HAL_ADC_MspInit+0x90>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	6313      	str	r3, [r2, #48]	; 0x30
 800261e:	4b10      	ldr	r3, [pc, #64]	; (8002660 <HAL_ADC_MspInit+0x90>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800262a:	2310      	movs	r3, #16
 800262c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800262e:	2303      	movs	r3, #3
 8002630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002636:	f107 0314 	add.w	r3, r7, #20
 800263a:	4619      	mov	r1, r3
 800263c:	4809      	ldr	r0, [pc, #36]	; (8002664 <HAL_ADC_MspInit+0x94>)
 800263e:	f001 ffc1 	bl	80045c4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002642:	2200      	movs	r2, #0
 8002644:	2105      	movs	r1, #5
 8002646:	2012      	movs	r0, #18
 8002648:	f001 fbd8 	bl	8003dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800264c:	2012      	movs	r0, #18
 800264e:	f001 fbf1 	bl	8003e34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002652:	bf00      	nop
 8002654:	3728      	adds	r7, #40	; 0x28
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40012000 	.word	0x40012000
 8002660:	40023800 	.word	0x40023800
 8002664:	40020000 	.word	0x40020000

08002668 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08e      	sub	sp, #56	; 0x38
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a55      	ldr	r2, [pc, #340]	; (80027dc <HAL_ETH_MspInit+0x174>)
 8002686:	4293      	cmp	r3, r2
 8002688:	f040 80a4 	bne.w	80027d4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800268c:	2300      	movs	r3, #0
 800268e:	623b      	str	r3, [r7, #32]
 8002690:	4b53      	ldr	r3, [pc, #332]	; (80027e0 <HAL_ETH_MspInit+0x178>)
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	4a52      	ldr	r2, [pc, #328]	; (80027e0 <HAL_ETH_MspInit+0x178>)
 8002696:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800269a:	6313      	str	r3, [r2, #48]	; 0x30
 800269c:	4b50      	ldr	r3, [pc, #320]	; (80027e0 <HAL_ETH_MspInit+0x178>)
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a4:	623b      	str	r3, [r7, #32]
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
 80026ac:	4b4c      	ldr	r3, [pc, #304]	; (80027e0 <HAL_ETH_MspInit+0x178>)
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	4a4b      	ldr	r2, [pc, #300]	; (80027e0 <HAL_ETH_MspInit+0x178>)
 80026b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026b6:	6313      	str	r3, [r2, #48]	; 0x30
 80026b8:	4b49      	ldr	r3, [pc, #292]	; (80027e0 <HAL_ETH_MspInit+0x178>)
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	2300      	movs	r3, #0
 80026c6:	61bb      	str	r3, [r7, #24]
 80026c8:	4b45      	ldr	r3, [pc, #276]	; (80027e0 <HAL_ETH_MspInit+0x178>)
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	4a44      	ldr	r2, [pc, #272]	; (80027e0 <HAL_ETH_MspInit+0x178>)
 80026ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026d2:	6313      	str	r3, [r2, #48]	; 0x30
 80026d4:	4b42      	ldr	r3, [pc, #264]	; (80027e0 <HAL_ETH_MspInit+0x178>)
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	4b3e      	ldr	r3, [pc, #248]	; (80027e0 <HAL_ETH_MspInit+0x178>)
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	4a3d      	ldr	r2, [pc, #244]	; (80027e0 <HAL_ETH_MspInit+0x178>)
 80026ea:	f043 0304 	orr.w	r3, r3, #4
 80026ee:	6313      	str	r3, [r2, #48]	; 0x30
 80026f0:	4b3b      	ldr	r3, [pc, #236]	; (80027e0 <HAL_ETH_MspInit+0x178>)
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fc:	2300      	movs	r3, #0
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	4b37      	ldr	r3, [pc, #220]	; (80027e0 <HAL_ETH_MspInit+0x178>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	4a36      	ldr	r2, [pc, #216]	; (80027e0 <HAL_ETH_MspInit+0x178>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	6313      	str	r3, [r2, #48]	; 0x30
 800270c:	4b34      	ldr	r3, [pc, #208]	; (80027e0 <HAL_ETH_MspInit+0x178>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002718:	2300      	movs	r3, #0
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	4b30      	ldr	r3, [pc, #192]	; (80027e0 <HAL_ETH_MspInit+0x178>)
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	4a2f      	ldr	r2, [pc, #188]	; (80027e0 <HAL_ETH_MspInit+0x178>)
 8002722:	f043 0302 	orr.w	r3, r3, #2
 8002726:	6313      	str	r3, [r2, #48]	; 0x30
 8002728:	4b2d      	ldr	r3, [pc, #180]	; (80027e0 <HAL_ETH_MspInit+0x178>)
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002734:	2300      	movs	r3, #0
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	4b29      	ldr	r3, [pc, #164]	; (80027e0 <HAL_ETH_MspInit+0x178>)
 800273a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273c:	4a28      	ldr	r2, [pc, #160]	; (80027e0 <HAL_ETH_MspInit+0x178>)
 800273e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002742:	6313      	str	r3, [r2, #48]	; 0x30
 8002744:	4b26      	ldr	r3, [pc, #152]	; (80027e0 <HAL_ETH_MspInit+0x178>)
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002750:	2332      	movs	r3, #50	; 0x32
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002754:	2302      	movs	r3, #2
 8002756:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2300      	movs	r3, #0
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275c:	2303      	movs	r3, #3
 800275e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002760:	230b      	movs	r3, #11
 8002762:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002768:	4619      	mov	r1, r3
 800276a:	481e      	ldr	r0, [pc, #120]	; (80027e4 <HAL_ETH_MspInit+0x17c>)
 800276c:	f001 ff2a 	bl	80045c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002770:	2386      	movs	r3, #134	; 0x86
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002774:	2302      	movs	r3, #2
 8002776:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277c:	2303      	movs	r3, #3
 800277e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002780:	230b      	movs	r3, #11
 8002782:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002788:	4619      	mov	r1, r3
 800278a:	4817      	ldr	r0, [pc, #92]	; (80027e8 <HAL_ETH_MspInit+0x180>)
 800278c:	f001 ff1a 	bl	80045c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279e:	2303      	movs	r3, #3
 80027a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80027a2:	230b      	movs	r3, #11
 80027a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80027a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027aa:	4619      	mov	r1, r3
 80027ac:	480f      	ldr	r0, [pc, #60]	; (80027ec <HAL_ETH_MspInit+0x184>)
 80027ae:	f001 ff09 	bl	80045c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80027b2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b8:	2302      	movs	r3, #2
 80027ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c0:	2303      	movs	r3, #3
 80027c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80027c4:	230b      	movs	r3, #11
 80027c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027cc:	4619      	mov	r1, r3
 80027ce:	4808      	ldr	r0, [pc, #32]	; (80027f0 <HAL_ETH_MspInit+0x188>)
 80027d0:	f001 fef8 	bl	80045c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80027d4:	bf00      	nop
 80027d6:	3738      	adds	r7, #56	; 0x38
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40028000 	.word	0x40028000
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40020800 	.word	0x40020800
 80027e8:	40020000 	.word	0x40020000
 80027ec:	40020400 	.word	0x40020400
 80027f0:	40021800 	.word	0x40021800

080027f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08a      	sub	sp, #40	; 0x28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	f107 0314 	add.w	r3, r7, #20
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a19      	ldr	r2, [pc, #100]	; (8002878 <HAL_I2C_MspInit+0x84>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d12c      	bne.n	8002870 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	4b18      	ldr	r3, [pc, #96]	; (800287c <HAL_I2C_MspInit+0x88>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a17      	ldr	r2, [pc, #92]	; (800287c <HAL_I2C_MspInit+0x88>)
 8002820:	f043 0302 	orr.w	r3, r3, #2
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b15      	ldr	r3, [pc, #84]	; (800287c <HAL_I2C_MspInit+0x88>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002832:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002838:	2312      	movs	r3, #18
 800283a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002840:	2303      	movs	r3, #3
 8002842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002844:	2304      	movs	r3, #4
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4619      	mov	r1, r3
 800284e:	480c      	ldr	r0, [pc, #48]	; (8002880 <HAL_I2C_MspInit+0x8c>)
 8002850:	f001 feb8 	bl	80045c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002854:	2300      	movs	r3, #0
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <HAL_I2C_MspInit+0x88>)
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	4a07      	ldr	r2, [pc, #28]	; (800287c <HAL_I2C_MspInit+0x88>)
 800285e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002862:	6413      	str	r3, [r2, #64]	; 0x40
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <HAL_I2C_MspInit+0x88>)
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002870:	bf00      	nop
 8002872:	3728      	adds	r7, #40	; 0x28
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40005400 	.word	0x40005400
 800287c:	40023800 	.word	0x40023800
 8002880:	40020400 	.word	0x40020400

08002884 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08e      	sub	sp, #56	; 0x38
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800288c:	f107 0308 	add.w	r3, r7, #8
 8002890:	2230      	movs	r2, #48	; 0x30
 8002892:	2100      	movs	r1, #0
 8002894:	4618      	mov	r0, r3
 8002896:	f009 fe5a 	bl	800c54e <memset>
  if(hrtc->Instance==RTC)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a0c      	ldr	r2, [pc, #48]	; (80028d0 <HAL_RTC_MspInit+0x4c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d111      	bne.n	80028c8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80028a4:	2320      	movs	r3, #32
 80028a6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80028a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028ac:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028ae:	f107 0308 	add.w	r3, r7, #8
 80028b2:	4618      	mov	r0, r3
 80028b4:	f003 fb2a 	bl	8005f0c <HAL_RCCEx_PeriphCLKConfig>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80028be:	f7fe ff9d 	bl	80017fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80028c2:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <HAL_RTC_MspInit+0x50>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80028c8:	bf00      	nop
 80028ca:	3738      	adds	r7, #56	; 0x38
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40002800 	.word	0x40002800
 80028d4:	42470e3c 	.word	0x42470e3c

080028d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e8:	d115      	bne.n	8002916 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <HAL_TIM_PWM_MspInit+0x48>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	4a0b      	ldr	r2, [pc, #44]	; (8002920 <HAL_TIM_PWM_MspInit+0x48>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	6413      	str	r3, [r2, #64]	; 0x40
 80028fa:	4b09      	ldr	r3, [pc, #36]	; (8002920 <HAL_TIM_PWM_MspInit+0x48>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002906:	2200      	movs	r2, #0
 8002908:	2105      	movs	r1, #5
 800290a:	201c      	movs	r0, #28
 800290c:	f001 fa76 	bl	8003dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002910:	201c      	movs	r0, #28
 8002912:	f001 fa8f 	bl	8003e34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002916:	bf00      	nop
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40023800 	.word	0x40023800

08002924 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08a      	sub	sp, #40	; 0x28
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292c:	f107 0314 	add.w	r3, r7, #20
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1d      	ldr	r2, [pc, #116]	; (80029b8 <HAL_TIM_IC_MspInit+0x94>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d133      	bne.n	80029ae <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	4b1c      	ldr	r3, [pc, #112]	; (80029bc <HAL_TIM_IC_MspInit+0x98>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	4a1b      	ldr	r2, [pc, #108]	; (80029bc <HAL_TIM_IC_MspInit+0x98>)
 8002950:	f043 0302 	orr.w	r3, r3, #2
 8002954:	6413      	str	r3, [r2, #64]	; 0x40
 8002956:	4b19      	ldr	r3, [pc, #100]	; (80029bc <HAL_TIM_IC_MspInit+0x98>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <HAL_TIM_IC_MspInit+0x98>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	4a14      	ldr	r2, [pc, #80]	; (80029bc <HAL_TIM_IC_MspInit+0x98>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6313      	str	r3, [r2, #48]	; 0x30
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_TIM_IC_MspInit+0x98>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 800297e:	2340      	movs	r3, #64	; 0x40
 8002980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002982:	2302      	movs	r3, #2
 8002984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298a:	2300      	movs	r3, #0
 800298c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800298e:	2302      	movs	r3, #2
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 8002992:	f107 0314 	add.w	r3, r7, #20
 8002996:	4619      	mov	r1, r3
 8002998:	4809      	ldr	r0, [pc, #36]	; (80029c0 <HAL_TIM_IC_MspInit+0x9c>)
 800299a:	f001 fe13 	bl	80045c4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800299e:	2200      	movs	r2, #0
 80029a0:	2105      	movs	r1, #5
 80029a2:	201d      	movs	r0, #29
 80029a4:	f001 fa2a 	bl	8003dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029a8:	201d      	movs	r0, #29
 80029aa:	f001 fa43 	bl	8003e34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80029ae:	bf00      	nop
 80029b0:	3728      	adds	r7, #40	; 0x28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40000400 	.word	0x40000400
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40020000 	.word	0x40020000

080029c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a38      	ldr	r2, [pc, #224]	; (8002ab4 <HAL_TIM_Base_MspInit+0xf0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d116      	bne.n	8002a04 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	4b37      	ldr	r3, [pc, #220]	; (8002ab8 <HAL_TIM_Base_MspInit+0xf4>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	4a36      	ldr	r2, [pc, #216]	; (8002ab8 <HAL_TIM_Base_MspInit+0xf4>)
 80029e0:	f043 0304 	orr.w	r3, r3, #4
 80029e4:	6413      	str	r3, [r2, #64]	; 0x40
 80029e6:	4b34      	ldr	r3, [pc, #208]	; (8002ab8 <HAL_TIM_Base_MspInit+0xf4>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80029f2:	2200      	movs	r2, #0
 80029f4:	2105      	movs	r1, #5
 80029f6:	201e      	movs	r0, #30
 80029f8:	f001 fa00 	bl	8003dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80029fc:	201e      	movs	r0, #30
 80029fe:	f001 fa19 	bl	8003e34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002a02:	e052      	b.n	8002aaa <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a2c      	ldr	r2, [pc, #176]	; (8002abc <HAL_TIM_Base_MspInit+0xf8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d116      	bne.n	8002a3c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	4b29      	ldr	r3, [pc, #164]	; (8002ab8 <HAL_TIM_Base_MspInit+0xf4>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	4a28      	ldr	r2, [pc, #160]	; (8002ab8 <HAL_TIM_Base_MspInit+0xf4>)
 8002a18:	f043 0308 	orr.w	r3, r3, #8
 8002a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a1e:	4b26      	ldr	r3, [pc, #152]	; (8002ab8 <HAL_TIM_Base_MspInit+0xf4>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2105      	movs	r1, #5
 8002a2e:	2032      	movs	r0, #50	; 0x32
 8002a30:	f001 f9e4 	bl	8003dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002a34:	2032      	movs	r0, #50	; 0x32
 8002a36:	f001 f9fd 	bl	8003e34 <HAL_NVIC_EnableIRQ>
}
 8002a3a:	e036      	b.n	8002aaa <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a1f      	ldr	r2, [pc, #124]	; (8002ac0 <HAL_TIM_Base_MspInit+0xfc>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d116      	bne.n	8002a74 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_TIM_Base_MspInit+0xf4>)
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	4a1a      	ldr	r2, [pc, #104]	; (8002ab8 <HAL_TIM_Base_MspInit+0xf4>)
 8002a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a54:	6453      	str	r3, [r2, #68]	; 0x44
 8002a56:	4b18      	ldr	r3, [pc, #96]	; (8002ab8 <HAL_TIM_Base_MspInit+0xf4>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002a62:	2200      	movs	r2, #0
 8002a64:	2105      	movs	r1, #5
 8002a66:	2019      	movs	r0, #25
 8002a68:	f001 f9c8 	bl	8003dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002a6c:	2019      	movs	r0, #25
 8002a6e:	f001 f9e1 	bl	8003e34 <HAL_NVIC_EnableIRQ>
}
 8002a72:	e01a      	b.n	8002aaa <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a12      	ldr	r2, [pc, #72]	; (8002ac4 <HAL_TIM_Base_MspInit+0x100>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d115      	bne.n	8002aaa <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <HAL_TIM_Base_MspInit+0xf4>)
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	4a0c      	ldr	r2, [pc, #48]	; (8002ab8 <HAL_TIM_Base_MspInit+0xf4>)
 8002a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <HAL_TIM_Base_MspInit+0xf4>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2105      	movs	r1, #5
 8002a9e:	201a      	movs	r0, #26
 8002aa0:	f001 f9ac 	bl	8003dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002aa4:	201a      	movs	r0, #26
 8002aa6:	f001 f9c5 	bl	8003e34 <HAL_NVIC_EnableIRQ>
}
 8002aaa:	bf00      	nop
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40000800 	.word	0x40000800
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	40000c00 	.word	0x40000c00
 8002ac0:	40014400 	.word	0x40014400
 8002ac4:	40014800 	.word	0x40014800

08002ac8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08a      	sub	sp, #40	; 0x28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad0:	f107 0314 	add.w	r3, r7, #20
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	605a      	str	r2, [r3, #4]
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	60da      	str	r2, [r3, #12]
 8002ade:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae8:	d11e      	bne.n	8002b28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	4b22      	ldr	r3, [pc, #136]	; (8002b78 <HAL_TIM_MspPostInit+0xb0>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	4a21      	ldr	r2, [pc, #132]	; (8002b78 <HAL_TIM_MspPostInit+0xb0>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6313      	str	r3, [r2, #48]	; 0x30
 8002afa:	4b1f      	ldr	r3, [pc, #124]	; (8002b78 <HAL_TIM_MspPostInit+0xb0>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_SERVO_Pin;
 8002b06:	2320      	movs	r3, #32
 8002b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b12:	2300      	movs	r3, #0
 8002b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b16:	2301      	movs	r3, #1
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1_SERVO_GPIO_Port, &GPIO_InitStruct);
 8002b1a:	f107 0314 	add.w	r3, r7, #20
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4816      	ldr	r0, [pc, #88]	; (8002b7c <HAL_TIM_MspPostInit+0xb4>)
 8002b22:	f001 fd4f 	bl	80045c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002b26:	e022      	b.n	8002b6e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a14      	ldr	r2, [pc, #80]	; (8002b80 <HAL_TIM_MspPostInit+0xb8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d11d      	bne.n	8002b6e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <HAL_TIM_MspPostInit+0xb0>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	4a0f      	ldr	r2, [pc, #60]	; (8002b78 <HAL_TIM_MspPostInit+0xb0>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30
 8002b42:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <HAL_TIM_MspPostInit+0xb0>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b4e:	2308      	movs	r3, #8
 8002b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b52:	2302      	movs	r3, #2
 8002b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b62:	f107 0314 	add.w	r3, r7, #20
 8002b66:	4619      	mov	r1, r3
 8002b68:	4804      	ldr	r0, [pc, #16]	; (8002b7c <HAL_TIM_MspPostInit+0xb4>)
 8002b6a:	f001 fd2b 	bl	80045c4 <HAL_GPIO_Init>
}
 8002b6e:	bf00      	nop
 8002b70:	3728      	adds	r7, #40	; 0x28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40020000 	.word	0x40020000
 8002b80:	40000c00 	.word	0x40000c00

08002b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08c      	sub	sp, #48	; 0x30
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	f107 031c 	add.w	r3, r7, #28
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a3a      	ldr	r2, [pc, #232]	; (8002c8c <HAL_UART_MspInit+0x108>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d135      	bne.n	8002c12 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
 8002baa:	4b39      	ldr	r3, [pc, #228]	; (8002c90 <HAL_UART_MspInit+0x10c>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	4a38      	ldr	r2, [pc, #224]	; (8002c90 <HAL_UART_MspInit+0x10c>)
 8002bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb6:	4b36      	ldr	r3, [pc, #216]	; (8002c90 <HAL_UART_MspInit+0x10c>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bbe:	61bb      	str	r3, [r7, #24]
 8002bc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	4b32      	ldr	r3, [pc, #200]	; (8002c90 <HAL_UART_MspInit+0x10c>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	4a31      	ldr	r2, [pc, #196]	; (8002c90 <HAL_UART_MspInit+0x10c>)
 8002bcc:	f043 0308 	orr.w	r3, r3, #8
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd2:	4b2f      	ldr	r3, [pc, #188]	; (8002c90 <HAL_UART_MspInit+0x10c>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002bde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be4:	2302      	movs	r3, #2
 8002be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bec:	2303      	movs	r3, #3
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002bf0:	2307      	movs	r3, #7
 8002bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bf4:	f107 031c 	add.w	r3, r7, #28
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4826      	ldr	r0, [pc, #152]	; (8002c94 <HAL_UART_MspInit+0x110>)
 8002bfc:	f001 fce2 	bl	80045c4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002c00:	2200      	movs	r2, #0
 8002c02:	2105      	movs	r1, #5
 8002c04:	2027      	movs	r0, #39	; 0x27
 8002c06:	f001 f8f9 	bl	8003dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c0a:	2027      	movs	r0, #39	; 0x27
 8002c0c:	f001 f912 	bl	8003e34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002c10:	e038      	b.n	8002c84 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a20      	ldr	r2, [pc, #128]	; (8002c98 <HAL_UART_MspInit+0x114>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d133      	bne.n	8002c84 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	613b      	str	r3, [r7, #16]
 8002c20:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <HAL_UART_MspInit+0x10c>)
 8002c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c24:	4a1a      	ldr	r2, [pc, #104]	; (8002c90 <HAL_UART_MspInit+0x10c>)
 8002c26:	f043 0320 	orr.w	r3, r3, #32
 8002c2a:	6453      	str	r3, [r2, #68]	; 0x44
 8002c2c:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <HAL_UART_MspInit+0x10c>)
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <HAL_UART_MspInit+0x10c>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	4a13      	ldr	r2, [pc, #76]	; (8002c90 <HAL_UART_MspInit+0x10c>)
 8002c42:	f043 0304 	orr.w	r3, r3, #4
 8002c46:	6313      	str	r3, [r2, #48]	; 0x30
 8002c48:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <HAL_UART_MspInit+0x10c>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c54:	23c0      	movs	r3, #192	; 0xc0
 8002c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c60:	2303      	movs	r3, #3
 8002c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c64:	2308      	movs	r3, #8
 8002c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c68:	f107 031c 	add.w	r3, r7, #28
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	480b      	ldr	r0, [pc, #44]	; (8002c9c <HAL_UART_MspInit+0x118>)
 8002c70:	f001 fca8 	bl	80045c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002c74:	2200      	movs	r2, #0
 8002c76:	2105      	movs	r1, #5
 8002c78:	2047      	movs	r0, #71	; 0x47
 8002c7a:	f001 f8bf 	bl	8003dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002c7e:	2047      	movs	r0, #71	; 0x47
 8002c80:	f001 f8d8 	bl	8003e34 <HAL_NVIC_EnableIRQ>
}
 8002c84:	bf00      	nop
 8002c86:	3730      	adds	r7, #48	; 0x30
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40004800 	.word	0x40004800
 8002c90:	40023800 	.word	0x40023800
 8002c94:	40020c00 	.word	0x40020c00
 8002c98:	40011400 	.word	0x40011400
 8002c9c:	40020800 	.word	0x40020800

08002ca0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	f107 0314 	add.w	r3, r7, #20
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cc0:	d13f      	bne.n	8002d42 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	4b21      	ldr	r3, [pc, #132]	; (8002d4c <HAL_PCD_MspInit+0xac>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	4a20      	ldr	r2, [pc, #128]	; (8002d4c <HAL_PCD_MspInit+0xac>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd2:	4b1e      	ldr	r3, [pc, #120]	; (8002d4c <HAL_PCD_MspInit+0xac>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002cde:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cec:	2303      	movs	r3, #3
 8002cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002cf0:	230a      	movs	r3, #10
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4815      	ldr	r0, [pc, #84]	; (8002d50 <HAL_PCD_MspInit+0xb0>)
 8002cfc:	f001 fc62 	bl	80045c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002d00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002d0e:	f107 0314 	add.w	r3, r7, #20
 8002d12:	4619      	mov	r1, r3
 8002d14:	480e      	ldr	r0, [pc, #56]	; (8002d50 <HAL_PCD_MspInit+0xb0>)
 8002d16:	f001 fc55 	bl	80045c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002d1a:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <HAL_PCD_MspInit+0xac>)
 8002d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1e:	4a0b      	ldr	r2, [pc, #44]	; (8002d4c <HAL_PCD_MspInit+0xac>)
 8002d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d24:	6353      	str	r3, [r2, #52]	; 0x34
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	4b08      	ldr	r3, [pc, #32]	; (8002d4c <HAL_PCD_MspInit+0xac>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	4a07      	ldr	r2, [pc, #28]	; (8002d4c <HAL_PCD_MspInit+0xac>)
 8002d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d34:	6453      	str	r3, [r2, #68]	; 0x44
 8002d36:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <HAL_PCD_MspInit+0xac>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002d42:	bf00      	nop
 8002d44:	3728      	adds	r7, #40	; 0x28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40020000 	.word	0x40020000

08002d54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08e      	sub	sp, #56	; 0x38
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002d64:	2300      	movs	r3, #0
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	4b33      	ldr	r3, [pc, #204]	; (8002e38 <HAL_InitTick+0xe4>)
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	4a32      	ldr	r2, [pc, #200]	; (8002e38 <HAL_InitTick+0xe4>)
 8002d6e:	f043 0310 	orr.w	r3, r3, #16
 8002d72:	6413      	str	r3, [r2, #64]	; 0x40
 8002d74:	4b30      	ldr	r3, [pc, #192]	; (8002e38 <HAL_InitTick+0xe4>)
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d80:	f107 0210 	add.w	r2, r7, #16
 8002d84:	f107 0314 	add.w	r3, r7, #20
 8002d88:	4611      	mov	r1, r2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f003 f88c 	bl	8005ea8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d103      	bne.n	8002da2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002d9a:	f003 f85d 	bl	8005e58 <HAL_RCC_GetPCLK1Freq>
 8002d9e:	6378      	str	r0, [r7, #52]	; 0x34
 8002da0:	e004      	b.n	8002dac <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002da2:	f003 f859 	bl	8005e58 <HAL_RCC_GetPCLK1Freq>
 8002da6:	4603      	mov	r3, r0
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dae:	4a23      	ldr	r2, [pc, #140]	; (8002e3c <HAL_InitTick+0xe8>)
 8002db0:	fba2 2303 	umull	r2, r3, r2, r3
 8002db4:	0c9b      	lsrs	r3, r3, #18
 8002db6:	3b01      	subs	r3, #1
 8002db8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002dba:	4b21      	ldr	r3, [pc, #132]	; (8002e40 <HAL_InitTick+0xec>)
 8002dbc:	4a21      	ldr	r2, [pc, #132]	; (8002e44 <HAL_InitTick+0xf0>)
 8002dbe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002dc0:	4b1f      	ldr	r3, [pc, #124]	; (8002e40 <HAL_InitTick+0xec>)
 8002dc2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002dc6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002dc8:	4a1d      	ldr	r2, [pc, #116]	; (8002e40 <HAL_InitTick+0xec>)
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002dce:	4b1c      	ldr	r3, [pc, #112]	; (8002e40 <HAL_InitTick+0xec>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd4:	4b1a      	ldr	r3, [pc, #104]	; (8002e40 <HAL_InitTick+0xec>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dda:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <HAL_InitTick+0xec>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002de0:	4817      	ldr	r0, [pc, #92]	; (8002e40 <HAL_InitTick+0xec>)
 8002de2:	f003 fc88 	bl	80066f6 <HAL_TIM_Base_Init>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002dec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d11b      	bne.n	8002e2c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002df4:	4812      	ldr	r0, [pc, #72]	; (8002e40 <HAL_InitTick+0xec>)
 8002df6:	f003 fccd 	bl	8006794 <HAL_TIM_Base_Start_IT>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002e00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d111      	bne.n	8002e2c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e08:	2036      	movs	r0, #54	; 0x36
 8002e0a:	f001 f813 	bl	8003e34 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b0f      	cmp	r3, #15
 8002e12:	d808      	bhi.n	8002e26 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002e14:	2200      	movs	r2, #0
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	2036      	movs	r0, #54	; 0x36
 8002e1a:	f000 ffef 	bl	8003dfc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e1e:	4a0a      	ldr	r2, [pc, #40]	; (8002e48 <HAL_InitTick+0xf4>)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	e002      	b.n	8002e2c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002e2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3738      	adds	r7, #56	; 0x38
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	431bde83 	.word	0x431bde83
 8002e40:	20000be0 	.word	0x20000be0
 8002e44:	40001000 	.word	0x40001000
 8002e48:	200000b0 	.word	0x200000b0

08002e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e50:	e7fe      	b.n	8002e50 <NMI_Handler+0x4>

08002e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e52:	b480      	push	{r7}
 8002e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e56:	e7fe      	b.n	8002e56 <HardFault_Handler+0x4>

08002e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e5c:	e7fe      	b.n	8002e5c <MemManage_Handler+0x4>

08002e5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e62:	e7fe      	b.n	8002e62 <BusFault_Handler+0x4>

08002e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e68:	e7fe      	b.n	8002e68 <UsageFault_Handler+0x4>

08002e6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO0_Pin);
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	f001 fd7f 	bl	8004980 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO1_Pin);
 8002e8a:	2004      	movs	r0, #4
 8002e8c:	f001 fd78 	bl	8004980 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002e90:	bf00      	nop
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO2_Pin);
 8002e98:	2008      	movs	r0, #8
 8002e9a:	f001 fd71 	bl	8004980 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO3_Pin);
 8002ea6:	2010      	movs	r0, #16
 8002ea8:	f001 fd6a 	bl	8004980 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002eac:	bf00      	nop
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002eb4:	4802      	ldr	r0, [pc, #8]	; (8002ec0 <ADC_IRQHandler+0x10>)
 8002eb6:	f000 fb7f 	bl	80035b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	200002c4 	.word	0x200002c4

08002ec4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002ec8:	4802      	ldr	r0, [pc, #8]	; (8002ed4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002eca:	f004 f879 	bl	8006fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20000550 	.word	0x20000550

08002ed8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002edc:	4802      	ldr	r0, [pc, #8]	; (8002ee8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002ede:	f004 f86f 	bl	8006fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000598 	.word	0x20000598

08002eec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ef0:	4802      	ldr	r0, [pc, #8]	; (8002efc <TIM2_IRQHandler+0x10>)
 8002ef2:	f004 f865 	bl	8006fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20000430 	.word	0x20000430

08002f00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f04:	4802      	ldr	r0, [pc, #8]	; (8002f10 <TIM3_IRQHandler+0x10>)
 8002f06:	f004 f85b 	bl	8006fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000478 	.word	0x20000478

08002f14 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002f18:	4802      	ldr	r0, [pc, #8]	; (8002f24 <TIM4_IRQHandler+0x10>)
 8002f1a:	f004 f851 	bl	8006fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	200004c0 	.word	0x200004c0

08002f28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002f2c:	4802      	ldr	r0, [pc, #8]	; (8002f38 <USART3_IRQHandler+0x10>)
 8002f2e:	f005 f9b1 	bl	8008294 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	200005e0 	.word	0x200005e0

08002f3c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002f40:	4802      	ldr	r0, [pc, #8]	; (8002f4c <TIM5_IRQHandler+0x10>)
 8002f42:	f004 f83d 	bl	8006fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20000508 	.word	0x20000508

08002f50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f54:	4802      	ldr	r0, [pc, #8]	; (8002f60 <TIM6_DAC_IRQHandler+0x10>)
 8002f56:	f004 f833 	bl	8006fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f5a:	bf00      	nop
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000be0 	.word	0x20000be0

08002f64 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002f68:	4802      	ldr	r0, [pc, #8]	; (8002f74 <USART6_IRQHandler+0x10>)
 8002f6a:	f005 f993 	bl	8008294 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000624 	.word	0x20000624

08002f78 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	e00a      	b.n	8002fa0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f8a:	f3af 8000 	nop.w
 8002f8e:	4601      	mov	r1, r0
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	60ba      	str	r2, [r7, #8]
 8002f96:	b2ca      	uxtb	r2, r1
 8002f98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	dbf0      	blt.n	8002f8a <_read+0x12>
  }

  return len;
 8002fa8:	687b      	ldr	r3, [r7, #4]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b086      	sub	sp, #24
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	e009      	b.n	8002fd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	60ba      	str	r2, [r7, #8]
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fd fcef 	bl	80009b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	dbf1      	blt.n	8002fc4 <_write+0x12>
  }
  return len;
 8002fe0:	687b      	ldr	r3, [r7, #4]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <_close>:

int _close(int file)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ff2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003012:	605a      	str	r2, [r3, #4]
  return 0;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <_isatty>:

int _isatty(int file)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800302a:	2301      	movs	r3, #1
}
 800302c:	4618      	mov	r0, r3
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
	...

08003054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800305c:	4a14      	ldr	r2, [pc, #80]	; (80030b0 <_sbrk+0x5c>)
 800305e:	4b15      	ldr	r3, [pc, #84]	; (80030b4 <_sbrk+0x60>)
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003068:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <_sbrk+0x64>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d102      	bne.n	8003076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003070:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <_sbrk+0x64>)
 8003072:	4a12      	ldr	r2, [pc, #72]	; (80030bc <_sbrk+0x68>)
 8003074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003076:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <_sbrk+0x64>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4413      	add	r3, r2
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	429a      	cmp	r2, r3
 8003082:	d207      	bcs.n	8003094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003084:	f009 f932 	bl	800c2ec <__errno>
 8003088:	4603      	mov	r3, r0
 800308a:	220c      	movs	r2, #12
 800308c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800308e:	f04f 33ff 	mov.w	r3, #4294967295
 8003092:	e009      	b.n	80030a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003094:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <_sbrk+0x64>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800309a:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <_sbrk+0x64>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4413      	add	r3, r2
 80030a2:	4a05      	ldr	r2, [pc, #20]	; (80030b8 <_sbrk+0x64>)
 80030a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030a6:	68fb      	ldr	r3, [r7, #12]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	20030000 	.word	0x20030000
 80030b4:	00000400 	.word	0x00000400
 80030b8:	20000c28 	.word	0x20000c28
 80030bc:	200056c0 	.word	0x200056c0

080030c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030c4:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <SystemInit+0x20>)
 80030c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ca:	4a05      	ldr	r2, [pc, #20]	; (80030e0 <SystemInit+0x20>)
 80030cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <HAL_UART_RxCpltCallback>:
volatile unsigned char bt_rx_buff[COMMAND_LENGTH];  // UART6으로부터 수신된 char를 저장하는 공간(\n을 만날때 까지)
volatile int bt_rx_index=0;  // bt rx_buff의 save위치
volatile int bt_newline_detect_flag=0;  // new line을 만났을때의 indicator 예) ledallon\n

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)   // comport master와 연결된 uart
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a32      	ldr	r2, [pc, #200]	; (80031b8 <HAL_UART_RxCpltCallback+0xd4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d12c      	bne.n	800314e <HAL_UART_RxCpltCallback+0x6a>
	{
		if (rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 80030f4:	4b31      	ldr	r3, [pc, #196]	; (80031bc <HAL_UART_RxCpltCallback+0xd8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b27      	cmp	r3, #39	; 0x27
 80030fa:	dc1d      	bgt.n	8003138 <HAL_UART_RxCpltCallback+0x54>
		{
			if (rx_data == '\n' || rx_data == '\r')
 80030fc:	4b30      	ldr	r3, [pc, #192]	; (80031c0 <HAL_UART_RxCpltCallback+0xdc>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b0a      	cmp	r3, #10
 8003102:	d003      	beq.n	800310c <HAL_UART_RxCpltCallback+0x28>
 8003104:	4b2e      	ldr	r3, [pc, #184]	; (80031c0 <HAL_UART_RxCpltCallback+0xdc>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b0d      	cmp	r3, #13
 800310a:	d10b      	bne.n	8003124 <HAL_UART_RxCpltCallback+0x40>
			{
				rx_buff[rx_index] = 0; // '\0'
 800310c:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <HAL_UART_RxCpltCallback+0xd8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a2c      	ldr	r2, [pc, #176]	; (80031c4 <HAL_UART_RxCpltCallback+0xe0>)
 8003112:	2100      	movs	r1, #0
 8003114:	54d1      	strb	r1, [r2, r3]
				newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8003116:	4b2c      	ldr	r3, [pc, #176]	; (80031c8 <HAL_UART_RxCpltCallback+0xe4>)
 8003118:	2201      	movs	r2, #1
 800311a:	601a      	str	r2, [r3, #0]
				rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 800311c:	4b27      	ldr	r3, [pc, #156]	; (80031bc <HAL_UART_RxCpltCallback+0xd8>)
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	e00f      	b.n	8003144 <HAL_UART_RxCpltCallback+0x60>
			}
			else
			{
				rx_buff[rx_index++]=rx_data;
 8003124:	4b25      	ldr	r3, [pc, #148]	; (80031bc <HAL_UART_RxCpltCallback+0xd8>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	4924      	ldr	r1, [pc, #144]	; (80031bc <HAL_UART_RxCpltCallback+0xd8>)
 800312c:	600a      	str	r2, [r1, #0]
 800312e:	4a24      	ldr	r2, [pc, #144]	; (80031c0 <HAL_UART_RxCpltCallback+0xdc>)
 8003130:	7811      	ldrb	r1, [r2, #0]
 8003132:	4a24      	ldr	r2, [pc, #144]	; (80031c4 <HAL_UART_RxCpltCallback+0xe0>)
 8003134:	54d1      	strb	r1, [r2, r3]
 8003136:	e005      	b.n	8003144 <HAL_UART_RxCpltCallback+0x60>
			}

		}
		else
		{
			rx_index=0;
 8003138:	4b20      	ldr	r3, [pc, #128]	; (80031bc <HAL_UART_RxCpltCallback+0xd8>)
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!!\n");
 800313e:	4823      	ldr	r0, [pc, #140]	; (80031cc <HAL_UART_RxCpltCallback+0xe8>)
 8003140:	f009 fb10 	bl	800c764 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8003144:	2201      	movs	r2, #1
 8003146:	491e      	ldr	r1, [pc, #120]	; (80031c0 <HAL_UART_RxCpltCallback+0xdc>)
 8003148:	481b      	ldr	r0, [pc, #108]	; (80031b8 <HAL_UART_RxCpltCallback+0xd4>)
 800314a:	f005 f872 	bl	8008232 <HAL_UART_Receive_IT>
	}

	if (huart == &huart6)   // BT 와 연결된 uart
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a1f      	ldr	r2, [pc, #124]	; (80031d0 <HAL_UART_RxCpltCallback+0xec>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d12c      	bne.n	80031b0 <HAL_UART_RxCpltCallback+0xcc>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8003156:	4b1f      	ldr	r3, [pc, #124]	; (80031d4 <HAL_UART_RxCpltCallback+0xf0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b27      	cmp	r3, #39	; 0x27
 800315c:	dc1d      	bgt.n	800319a <HAL_UART_RxCpltCallback+0xb6>
		{
			if (bt_rx_data == '\n' || bt_rx_data == '\r')
 800315e:	4b1e      	ldr	r3, [pc, #120]	; (80031d8 <HAL_UART_RxCpltCallback+0xf4>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b0a      	cmp	r3, #10
 8003164:	d003      	beq.n	800316e <HAL_UART_RxCpltCallback+0x8a>
 8003166:	4b1c      	ldr	r3, [pc, #112]	; (80031d8 <HAL_UART_RxCpltCallback+0xf4>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b0d      	cmp	r3, #13
 800316c:	d10b      	bne.n	8003186 <HAL_UART_RxCpltCallback+0xa2>
			{
				bt_rx_buff[rx_index] = 0; // '\0'
 800316e:	4b13      	ldr	r3, [pc, #76]	; (80031bc <HAL_UART_RxCpltCallback+0xd8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a1a      	ldr	r2, [pc, #104]	; (80031dc <HAL_UART_RxCpltCallback+0xf8>)
 8003174:	2100      	movs	r1, #0
 8003176:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8003178:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <HAL_UART_RxCpltCallback+0xfc>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]
				bt_rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 800317e:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <HAL_UART_RxCpltCallback+0xf0>)
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	e00f      	b.n	80031a6 <HAL_UART_RxCpltCallback+0xc2>
			}
			else
			{
				bt_rx_buff[bt_rx_index++]=bt_rx_data;
 8003186:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <HAL_UART_RxCpltCallback+0xf0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	4911      	ldr	r1, [pc, #68]	; (80031d4 <HAL_UART_RxCpltCallback+0xf0>)
 800318e:	600a      	str	r2, [r1, #0]
 8003190:	4a11      	ldr	r2, [pc, #68]	; (80031d8 <HAL_UART_RxCpltCallback+0xf4>)
 8003192:	7811      	ldrb	r1, [r2, #0]
 8003194:	4a11      	ldr	r2, [pc, #68]	; (80031dc <HAL_UART_RxCpltCallback+0xf8>)
 8003196:	54d1      	strb	r1, [r2, r3]
 8003198:	e005      	b.n	80031a6 <HAL_UART_RxCpltCallback+0xc2>
			}

		}
		else
		{
			bt_rx_index=0;
 800319a:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <HAL_UART_RxCpltCallback+0xf0>)
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
			printf("BT Message Overflow !!!!\n");
 80031a0:	4810      	ldr	r0, [pc, #64]	; (80031e4 <HAL_UART_RxCpltCallback+0x100>)
 80031a2:	f009 fadf 	bl	800c764 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 80031a6:	2201      	movs	r2, #1
 80031a8:	490b      	ldr	r1, [pc, #44]	; (80031d8 <HAL_UART_RxCpltCallback+0xf4>)
 80031aa:	4809      	ldr	r0, [pc, #36]	; (80031d0 <HAL_UART_RxCpltCallback+0xec>)
 80031ac:	f005 f841 	bl	8008232 <HAL_UART_Receive_IT>
	}
}
 80031b0:	bf00      	nop
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	200005e0 	.word	0x200005e0
 80031bc:	20000c54 	.word	0x20000c54
 80031c0:	20000b88 	.word	0x20000b88
 80031c4:	20000c2c 	.word	0x20000c2c
 80031c8:	20000c58 	.word	0x20000c58
 80031cc:	0800ceec 	.word	0x0800ceec
 80031d0:	20000624 	.word	0x20000624
 80031d4:	20000c84 	.word	0x20000c84
 80031d8:	20000b89 	.word	0x20000b89
 80031dc:	20000c5c 	.word	0x20000c5c
 80031e0:	20000c88 	.word	0x20000c88
 80031e4:	0800cf04 	.word	0x0800cf04

080031e8 <HAL_TIM_IC_CaptureCallback>:
// 1. Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c에 가서
//  HAL_TIM_IC_CaptureCallback를 잘라내기를 해서 이곳으로 가져 온다.
// 2. 초음파 센서의 ECHO핀의 상승 에지와 하강에지 발생시 이곳으로 들어 온다.
volatile uint8_t  is_first_capture=0;  // 0:상승에지 1:하강에지
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a13      	ldr	r2, [pc, #76]	; (8003244 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d11f      	bne.n	800323a <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0)   // 상승에지
 80031fa:	4b13      	ldr	r3, [pc, #76]	; (8003248 <HAL_TIM_IC_CaptureCallback+0x60>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d107      	bne.n	8003214 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim,0);   // clear H/W counter
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2200      	movs	r2, #0
 800320a:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture=1;  // 상승에지를 만났다는 flag변수 indicator를 set
 800320c:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <HAL_TIM_IC_CaptureCallback+0x60>)
 800320e:	2201      	movs	r2, #1
 8003210:	701a      	strb	r2, [r3, #0]
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
		}
	}
}
 8003212:	e012      	b.n	800323a <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1)   // 하강 에지를 만나면
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <HAL_TIM_IC_CaptureCallback+0x60>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b01      	cmp	r3, #1
 800321c:	d10d      	bne.n	800323a <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <HAL_TIM_IC_CaptureCallback+0x60>)
 8003220:	2200      	movs	r2, #0
 8003222:	701a      	strb	r2, [r3, #0]
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
 8003224:	2100      	movs	r1, #0
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f004 f9f8 	bl	800761c <HAL_TIM_ReadCapturedValue>
 800322c:	4603      	mov	r3, r0
 800322e:	461a      	mov	r2, r3
 8003230:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_TIM_IC_CaptureCallback+0x64>)
 8003232:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
 8003234:	4b06      	ldr	r3, [pc, #24]	; (8003250 <HAL_TIM_IC_CaptureCallback+0x68>)
 8003236:	2201      	movs	r2, #1
 8003238:	601a      	str	r2, [r3, #0]
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40000400 	.word	0x40000400
 8003248:	20000c94 	.word	0x20000c94
 800324c:	20000c8c 	.word	0x20000c8c
 8003250:	20000c90 	.word	0x20000c90

08003254 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003254:	f8df d034 	ldr.w	sp, [pc, #52]	; 800328c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003258:	480d      	ldr	r0, [pc, #52]	; (8003290 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800325a:	490e      	ldr	r1, [pc, #56]	; (8003294 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800325c:	4a0e      	ldr	r2, [pc, #56]	; (8003298 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800325e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003260:	e002      	b.n	8003268 <LoopCopyDataInit>

08003262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003266:	3304      	adds	r3, #4

08003268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800326a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800326c:	d3f9      	bcc.n	8003262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800326e:	4a0b      	ldr	r2, [pc, #44]	; (800329c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003270:	4c0b      	ldr	r4, [pc, #44]	; (80032a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003274:	e001      	b.n	800327a <LoopFillZerobss>

08003276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003278:	3204      	adds	r2, #4

0800327a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800327a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800327c:	d3fb      	bcc.n	8003276 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800327e:	f7ff ff1f 	bl	80030c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003282:	f009 f92f 	bl	800c4e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003286:	f7fd fc2f 	bl	8000ae8 <main>
  bx  lr    
 800328a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800328c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003294:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8003298:	0800d0f4 	.word	0x0800d0f4
  ldr r2, =_sbss
 800329c:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 80032a0:	200056bc 	.word	0x200056bc

080032a4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032a4:	e7fe      	b.n	80032a4 <CAN1_RX0_IRQHandler>
	...

080032a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032ac:	4b0e      	ldr	r3, [pc, #56]	; (80032e8 <HAL_Init+0x40>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a0d      	ldr	r2, [pc, #52]	; (80032e8 <HAL_Init+0x40>)
 80032b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_Init+0x40>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a0a      	ldr	r2, [pc, #40]	; (80032e8 <HAL_Init+0x40>)
 80032be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032c4:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <HAL_Init+0x40>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a07      	ldr	r2, [pc, #28]	; (80032e8 <HAL_Init+0x40>)
 80032ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032d0:	2003      	movs	r0, #3
 80032d2:	f000 fd88 	bl	8003de6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032d6:	200f      	movs	r0, #15
 80032d8:	f7ff fd3c 	bl	8002d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032dc:	f7ff f94c 	bl	8002578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40023c00 	.word	0x40023c00

080032ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032f0:	4b06      	ldr	r3, [pc, #24]	; (800330c <HAL_IncTick+0x20>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	461a      	mov	r2, r3
 80032f6:	4b06      	ldr	r3, [pc, #24]	; (8003310 <HAL_IncTick+0x24>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4413      	add	r3, r2
 80032fc:	4a04      	ldr	r2, [pc, #16]	; (8003310 <HAL_IncTick+0x24>)
 80032fe:	6013      	str	r3, [r2, #0]
}
 8003300:	bf00      	nop
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	200000b4 	.word	0x200000b4
 8003310:	20000c98 	.word	0x20000c98

08003314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return uwTick;
 8003318:	4b03      	ldr	r3, [pc, #12]	; (8003328 <HAL_GetTick+0x14>)
 800331a:	681b      	ldr	r3, [r3, #0]
}
 800331c:	4618      	mov	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	20000c98 	.word	0x20000c98

0800332c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003334:	f7ff ffee 	bl	8003314 <HAL_GetTick>
 8003338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003344:	d005      	beq.n	8003352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003346:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <HAL_Delay+0x44>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4413      	add	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003352:	bf00      	nop
 8003354:	f7ff ffde 	bl	8003314 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	429a      	cmp	r2, r3
 8003362:	d8f7      	bhi.n	8003354 <HAL_Delay+0x28>
  {
  }
}
 8003364:	bf00      	nop
 8003366:	bf00      	nop
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	200000b4 	.word	0x200000b4

08003374 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e033      	b.n	80033f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff f91c 	bl	80025d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	f003 0310 	and.w	r3, r3, #16
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d118      	bne.n	80033e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033ba:	f023 0302 	bic.w	r3, r3, #2
 80033be:	f043 0202 	orr.w	r2, r3, #2
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 fb5a 	bl	8003a80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f023 0303 	bic.w	r3, r3, #3
 80033da:	f043 0201 	orr.w	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40
 80033e2:	e001      	b.n	80033e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_ADC_Start_IT+0x1a>
 8003412:	2302      	movs	r3, #2
 8003414:	e0bd      	b.n	8003592 <HAL_ADC_Start_IT+0x196>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b01      	cmp	r3, #1
 800342a:	d018      	beq.n	800345e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800343c:	4b58      	ldr	r3, [pc, #352]	; (80035a0 <HAL_ADC_Start_IT+0x1a4>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a58      	ldr	r2, [pc, #352]	; (80035a4 <HAL_ADC_Start_IT+0x1a8>)
 8003442:	fba2 2303 	umull	r2, r3, r2, r3
 8003446:	0c9a      	lsrs	r2, r3, #18
 8003448:	4613      	mov	r3, r2
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	4413      	add	r3, r2
 800344e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003450:	e002      	b.n	8003458 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	3b01      	subs	r3, #1
 8003456:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f9      	bne.n	8003452 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b01      	cmp	r3, #1
 800346a:	f040 8085 	bne.w	8003578 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003476:	f023 0301 	bic.w	r3, r3, #1
 800347a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348c:	2b00      	cmp	r3, #0
 800348e:	d007      	beq.n	80034a0 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003498:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ac:	d106      	bne.n	80034bc <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	f023 0206 	bic.w	r2, r3, #6
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	645a      	str	r2, [r3, #68]	; 0x44
 80034ba:	e002      	b.n	80034c2 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034ca:	4b37      	ldr	r3, [pc, #220]	; (80035a8 <HAL_ADC_Start_IT+0x1ac>)
 80034cc:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80034d6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6812      	ldr	r2, [r2, #0]
 80034e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034e6:	f043 0320 	orr.w	r3, r3, #32
 80034ea:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 031f 	and.w	r3, r3, #31
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d12a      	bne.n	800354e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a2b      	ldr	r2, [pc, #172]	; (80035ac <HAL_ADC_Start_IT+0x1b0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d015      	beq.n	800352e <HAL_ADC_Start_IT+0x132>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a2a      	ldr	r2, [pc, #168]	; (80035b0 <HAL_ADC_Start_IT+0x1b4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d105      	bne.n	8003518 <HAL_ADC_Start_IT+0x11c>
 800350c:	4b26      	ldr	r3, [pc, #152]	; (80035a8 <HAL_ADC_Start_IT+0x1ac>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 031f 	and.w	r3, r3, #31
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a25      	ldr	r2, [pc, #148]	; (80035b4 <HAL_ADC_Start_IT+0x1b8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d136      	bne.n	8003590 <HAL_ADC_Start_IT+0x194>
 8003522:	4b21      	ldr	r3, [pc, #132]	; (80035a8 <HAL_ADC_Start_IT+0x1ac>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 0310 	and.w	r3, r3, #16
 800352a:	2b00      	cmp	r3, #0
 800352c:	d130      	bne.n	8003590 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d129      	bne.n	8003590 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	e020      	b.n	8003590 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a16      	ldr	r2, [pc, #88]	; (80035ac <HAL_ADC_Start_IT+0x1b0>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d11b      	bne.n	8003590 <HAL_ADC_Start_IT+0x194>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d114      	bne.n	8003590 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003574:	609a      	str	r2, [r3, #8]
 8003576:	e00b      	b.n	8003590 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	f043 0210 	orr.w	r2, r3, #16
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003588:	f043 0201 	orr.w	r2, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	200000ac 	.word	0x200000ac
 80035a4:	431bde83 	.word	0x431bde83
 80035a8:	40012300 	.word	0x40012300
 80035ac:	40012000 	.word	0x40012000
 80035b0:	40012100 	.word	0x40012100
 80035b4:	40012200 	.word	0x40012200

080035b8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	2300      	movs	r3, #0
 80035c6:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d049      	beq.n	8003682 <HAL_ADC_IRQHandler+0xca>
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d046      	beq.n	8003682 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d105      	bne.n	800360c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d12b      	bne.n	8003672 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800361e:	2b00      	cmp	r3, #0
 8003620:	d127      	bne.n	8003672 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800362c:	2b00      	cmp	r3, #0
 800362e:	d006      	beq.n	800363e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800363a:	2b00      	cmp	r3, #0
 800363c:	d119      	bne.n	8003672 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0220 	bic.w	r2, r2, #32
 800364c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d105      	bne.n	8003672 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	f043 0201 	orr.w	r2, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fd fa1a 	bl	8000aac <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0212 	mvn.w	r2, #18
 8003680:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003690:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d057      	beq.n	8003748 <HAL_ADC_IRQHandler+0x190>
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d054      	beq.n	8003748 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f003 0310 	and.w	r3, r3, #16
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d105      	bne.n	80036b6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d139      	bne.n	8003738 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d006      	beq.n	80036e0 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d12b      	bne.n	8003738 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d124      	bne.n	8003738 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d11d      	bne.n	8003738 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003700:	2b00      	cmp	r3, #0
 8003702:	d119      	bne.n	8003738 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003712:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d105      	bne.n	8003738 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	f043 0201 	orr.w	r2, r3, #1
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 fa9d 	bl	8003c78 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f06f 020c 	mvn.w	r2, #12
 8003746:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003756:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d017      	beq.n	800378e <HAL_ADC_IRQHandler+0x1d6>
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d014      	beq.n	800378e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b01      	cmp	r3, #1
 8003770:	d10d      	bne.n	800378e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f837 	bl	80037f2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0201 	mvn.w	r2, #1
 800378c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800379c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d015      	beq.n	80037d0 <HAL_ADC_IRQHandler+0x218>
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d012      	beq.n	80037d0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	f043 0202 	orr.w	r2, r3, #2
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f06f 0220 	mvn.w	r2, #32
 80037be:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f820 	bl	8003806 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f06f 0220 	mvn.w	r2, #32
 80037ce:	601a      	str	r2, [r3, #0]
  }
}
 80037d0:	bf00      	nop
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
	...

0800381c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003826:	2300      	movs	r3, #0
 8003828:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x1c>
 8003834:	2302      	movs	r3, #2
 8003836:	e113      	b.n	8003a60 <HAL_ADC_ConfigChannel+0x244>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b09      	cmp	r3, #9
 8003846:	d925      	bls.n	8003894 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68d9      	ldr	r1, [r3, #12]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	b29b      	uxth	r3, r3
 8003854:	461a      	mov	r2, r3
 8003856:	4613      	mov	r3, r2
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4413      	add	r3, r2
 800385c:	3b1e      	subs	r3, #30
 800385e:	2207      	movs	r2, #7
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43da      	mvns	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	400a      	ands	r2, r1
 800386c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68d9      	ldr	r1, [r3, #12]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	b29b      	uxth	r3, r3
 800387e:	4618      	mov	r0, r3
 8003880:	4603      	mov	r3, r0
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	4403      	add	r3, r0
 8003886:	3b1e      	subs	r3, #30
 8003888:	409a      	lsls	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	60da      	str	r2, [r3, #12]
 8003892:	e022      	b.n	80038da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6919      	ldr	r1, [r3, #16]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	461a      	mov	r2, r3
 80038a2:	4613      	mov	r3, r2
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	4413      	add	r3, r2
 80038a8:	2207      	movs	r2, #7
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43da      	mvns	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	400a      	ands	r2, r1
 80038b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6919      	ldr	r1, [r3, #16]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	4618      	mov	r0, r3
 80038ca:	4603      	mov	r3, r0
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	4403      	add	r3, r0
 80038d0:	409a      	lsls	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b06      	cmp	r3, #6
 80038e0:	d824      	bhi.n	800392c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	3b05      	subs	r3, #5
 80038f4:	221f      	movs	r2, #31
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43da      	mvns	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	400a      	ands	r2, r1
 8003902:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	b29b      	uxth	r3, r3
 8003910:	4618      	mov	r0, r3
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	3b05      	subs	r3, #5
 800391e:	fa00 f203 	lsl.w	r2, r0, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	635a      	str	r2, [r3, #52]	; 0x34
 800392a:	e04c      	b.n	80039c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b0c      	cmp	r3, #12
 8003932:	d824      	bhi.n	800397e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	3b23      	subs	r3, #35	; 0x23
 8003946:	221f      	movs	r2, #31
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	43da      	mvns	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	400a      	ands	r2, r1
 8003954:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	b29b      	uxth	r3, r3
 8003962:	4618      	mov	r0, r3
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	3b23      	subs	r3, #35	; 0x23
 8003970:	fa00 f203 	lsl.w	r2, r0, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	631a      	str	r2, [r3, #48]	; 0x30
 800397c:	e023      	b.n	80039c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	4613      	mov	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	3b41      	subs	r3, #65	; 0x41
 8003990:	221f      	movs	r2, #31
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43da      	mvns	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	400a      	ands	r2, r1
 800399e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	4618      	mov	r0, r3
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	4613      	mov	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	3b41      	subs	r3, #65	; 0x41
 80039ba:	fa00 f203 	lsl.w	r2, r0, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039c6:	4b29      	ldr	r3, [pc, #164]	; (8003a6c <HAL_ADC_ConfigChannel+0x250>)
 80039c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a28      	ldr	r2, [pc, #160]	; (8003a70 <HAL_ADC_ConfigChannel+0x254>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d10f      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x1d8>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b12      	cmp	r3, #18
 80039da:	d10b      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a1d      	ldr	r2, [pc, #116]	; (8003a70 <HAL_ADC_ConfigChannel+0x254>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d12b      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x23a>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1c      	ldr	r2, [pc, #112]	; (8003a74 <HAL_ADC_ConfigChannel+0x258>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d003      	beq.n	8003a10 <HAL_ADC_ConfigChannel+0x1f4>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b11      	cmp	r3, #17
 8003a0e:	d122      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a11      	ldr	r2, [pc, #68]	; (8003a74 <HAL_ADC_ConfigChannel+0x258>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d111      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a32:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <HAL_ADC_ConfigChannel+0x25c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a11      	ldr	r2, [pc, #68]	; (8003a7c <HAL_ADC_ConfigChannel+0x260>)
 8003a38:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3c:	0c9a      	lsrs	r2, r3, #18
 8003a3e:	4613      	mov	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a48:	e002      	b.n	8003a50 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f9      	bne.n	8003a4a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	40012300 	.word	0x40012300
 8003a70:	40012000 	.word	0x40012000
 8003a74:	10000012 	.word	0x10000012
 8003a78:	200000ac 	.word	0x200000ac
 8003a7c:	431bde83 	.word	0x431bde83

08003a80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a88:	4b79      	ldr	r3, [pc, #484]	; (8003c70 <ADC_Init+0x1f0>)
 8003a8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ab4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6859      	ldr	r1, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	021a      	lsls	r2, r3, #8
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ad8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6859      	ldr	r1, [r3, #4]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003afa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6899      	ldr	r1, [r3, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	4a58      	ldr	r2, [pc, #352]	; (8003c74 <ADC_Init+0x1f4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d022      	beq.n	8003b5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6899      	ldr	r1, [r3, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6899      	ldr	r1, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	609a      	str	r2, [r3, #8]
 8003b5c:	e00f      	b.n	8003b7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0202 	bic.w	r2, r2, #2
 8003b8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6899      	ldr	r1, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	7e1b      	ldrb	r3, [r3, #24]
 8003b98:	005a      	lsls	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d01b      	beq.n	8003be4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003bca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6859      	ldr	r1, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	035a      	lsls	r2, r3, #13
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	605a      	str	r2, [r3, #4]
 8003be2:	e007      	b.n	8003bf4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003c02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	051a      	lsls	r2, r3, #20
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6899      	ldr	r1, [r3, #8]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c36:	025a      	lsls	r2, r3, #9
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6899      	ldr	r1, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	029a      	lsls	r2, r3, #10
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	609a      	str	r2, [r3, #8]
}
 8003c64:	bf00      	nop
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	40012300 	.word	0x40012300
 8003c74:	0f000001 	.word	0x0f000001

08003c78 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ca8:	4013      	ands	r3, r2
 8003caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cbe:	4a04      	ldr	r2, [pc, #16]	; (8003cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	60d3      	str	r3, [r2, #12]
}
 8003cc4:	bf00      	nop
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	e000ed00 	.word	0xe000ed00

08003cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cd8:	4b04      	ldr	r3, [pc, #16]	; (8003cec <__NVIC_GetPriorityGrouping+0x18>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	0a1b      	lsrs	r3, r3, #8
 8003cde:	f003 0307 	and.w	r3, r3, #7
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	e000ed00 	.word	0xe000ed00

08003cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	db0b      	blt.n	8003d1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d02:	79fb      	ldrb	r3, [r7, #7]
 8003d04:	f003 021f 	and.w	r2, r3, #31
 8003d08:	4907      	ldr	r1, [pc, #28]	; (8003d28 <__NVIC_EnableIRQ+0x38>)
 8003d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	2001      	movs	r0, #1
 8003d12:	fa00 f202 	lsl.w	r2, r0, r2
 8003d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	e000e100 	.word	0xe000e100

08003d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	6039      	str	r1, [r7, #0]
 8003d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	db0a      	blt.n	8003d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	490c      	ldr	r1, [pc, #48]	; (8003d78 <__NVIC_SetPriority+0x4c>)
 8003d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4a:	0112      	lsls	r2, r2, #4
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	440b      	add	r3, r1
 8003d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d54:	e00a      	b.n	8003d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	4908      	ldr	r1, [pc, #32]	; (8003d7c <__NVIC_SetPriority+0x50>)
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	3b04      	subs	r3, #4
 8003d64:	0112      	lsls	r2, r2, #4
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	440b      	add	r3, r1
 8003d6a:	761a      	strb	r2, [r3, #24]
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	e000e100 	.word	0xe000e100
 8003d7c:	e000ed00 	.word	0xe000ed00

08003d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b089      	sub	sp, #36	; 0x24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f1c3 0307 	rsb	r3, r3, #7
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	bf28      	it	cs
 8003d9e:	2304      	movcs	r3, #4
 8003da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	3304      	adds	r3, #4
 8003da6:	2b06      	cmp	r3, #6
 8003da8:	d902      	bls.n	8003db0 <NVIC_EncodePriority+0x30>
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	3b03      	subs	r3, #3
 8003dae:	e000      	b.n	8003db2 <NVIC_EncodePriority+0x32>
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db4:	f04f 32ff 	mov.w	r2, #4294967295
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	43da      	mvns	r2, r3
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	401a      	ands	r2, r3
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd2:	43d9      	mvns	r1, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dd8:	4313      	orrs	r3, r2
         );
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3724      	adds	r7, #36	; 0x24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff ff4c 	bl	8003c8c <__NVIC_SetPriorityGrouping>
}
 8003df4:	bf00      	nop
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e0e:	f7ff ff61 	bl	8003cd4 <__NVIC_GetPriorityGrouping>
 8003e12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	68b9      	ldr	r1, [r7, #8]
 8003e18:	6978      	ldr	r0, [r7, #20]
 8003e1a:	f7ff ffb1 	bl	8003d80 <NVIC_EncodePriority>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e24:	4611      	mov	r1, r2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff ff80 	bl	8003d2c <__NVIC_SetPriority>
}
 8003e2c:	bf00      	nop
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff ff54 	bl	8003cf0 <__NVIC_EnableIRQ>
}
 8003e48:	bf00      	nop
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e5e:	f7ff fa59 	bl	8003314 <HAL_GetTick>
 8003e62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d008      	beq.n	8003e82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2280      	movs	r2, #128	; 0x80
 8003e74:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e052      	b.n	8003f28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0216 	bic.w	r2, r2, #22
 8003e90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695a      	ldr	r2, [r3, #20]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ea0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d103      	bne.n	8003eb2 <HAL_DMA_Abort+0x62>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d007      	beq.n	8003ec2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0208 	bic.w	r2, r2, #8
 8003ec0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0201 	bic.w	r2, r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ed2:	e013      	b.n	8003efc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ed4:	f7ff fa1e 	bl	8003314 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b05      	cmp	r3, #5
 8003ee0:	d90c      	bls.n	8003efc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2203      	movs	r2, #3
 8003eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e015      	b.n	8003f28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1e4      	bne.n	8003ed4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0e:	223f      	movs	r2, #63	; 0x3f
 8003f10:	409a      	lsls	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d004      	beq.n	8003f4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2280      	movs	r2, #128	; 0x80
 8003f48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e00c      	b.n	8003f68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2205      	movs	r2, #5
 8003f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0201 	bic.w	r2, r2, #1
 8003f64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e06c      	b.n	8004060 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d106      	bne.n	8003f9e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2223      	movs	r2, #35	; 0x23
 8003f94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7fe fb65 	bl	8002668 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	4b31      	ldr	r3, [pc, #196]	; (8004068 <HAL_ETH_Init+0xf4>)
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa6:	4a30      	ldr	r2, [pc, #192]	; (8004068 <HAL_ETH_Init+0xf4>)
 8003fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fac:	6453      	str	r3, [r2, #68]	; 0x44
 8003fae:	4b2e      	ldr	r3, [pc, #184]	; (8004068 <HAL_ETH_Init+0xf4>)
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003fba:	4b2c      	ldr	r3, [pc, #176]	; (800406c <HAL_ETH_Init+0xf8>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4a2b      	ldr	r2, [pc, #172]	; (800406c <HAL_ETH_Init+0xf8>)
 8003fc0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003fc4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003fc6:	4b29      	ldr	r3, [pc, #164]	; (800406c <HAL_ETH_Init+0xf8>)
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	4927      	ldr	r1, [pc, #156]	; (800406c <HAL_ETH_Init+0xf8>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003fd4:	4b25      	ldr	r3, [pc, #148]	; (800406c <HAL_ETH_Init+0xf8>)
 8003fd6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6812      	ldr	r2, [r2, #0]
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ff0:	f7ff f990 	bl	8003314 <HAL_GetTick>
 8003ff4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003ff6:	e011      	b.n	800401c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003ff8:	f7ff f98c 	bl	8003314 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004006:	d909      	bls.n	800401c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2204      	movs	r2, #4
 800400c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	22e0      	movs	r2, #224	; 0xe0
 8004014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e021      	b.n	8004060 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1e4      	bne.n	8003ff8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f958 	bl	80042e4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f9ff 	bl	8004438 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 fa55 	bl	80044ea <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	461a      	mov	r2, r3
 8004046:	2100      	movs	r1, #0
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f9bd 	bl	80043c8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2210      	movs	r2, #16
 800405a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40023800 	.word	0x40023800
 800406c:	40013800 	.word	0x40013800

08004070 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4b51      	ldr	r3, [pc, #324]	; (80041cc <ETH_SetMACConfig+0x15c>)
 8004086:	4013      	ands	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	7c1b      	ldrb	r3, [r3, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d102      	bne.n	8004098 <ETH_SetMACConfig+0x28>
 8004092:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004096:	e000      	b.n	800409a <ETH_SetMACConfig+0x2a>
 8004098:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	7c5b      	ldrb	r3, [r3, #17]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d102      	bne.n	80040a8 <ETH_SetMACConfig+0x38>
 80040a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040a6:	e000      	b.n	80040aa <ETH_SetMACConfig+0x3a>
 80040a8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80040aa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80040b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	7fdb      	ldrb	r3, [r3, #31]
 80040b6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80040b8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80040be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	7f92      	ldrb	r2, [r2, #30]
 80040c4:	2a00      	cmp	r2, #0
 80040c6:	d102      	bne.n	80040ce <ETH_SetMACConfig+0x5e>
 80040c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040cc:	e000      	b.n	80040d0 <ETH_SetMACConfig+0x60>
 80040ce:	2200      	movs	r2, #0
                        macconf->Speed |
 80040d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	7f1b      	ldrb	r3, [r3, #28]
 80040d6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80040d8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80040de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	791b      	ldrb	r3, [r3, #4]
 80040e4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80040e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	f892 2020 	ldrb.w	r2, [r2, #32]
 80040ee:	2a00      	cmp	r2, #0
 80040f0:	d102      	bne.n	80040f8 <ETH_SetMACConfig+0x88>
 80040f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040f6:	e000      	b.n	80040fa <ETH_SetMACConfig+0x8a>
 80040f8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80040fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	7bdb      	ldrb	r3, [r3, #15]
 8004100:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004102:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004108:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004110:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004112:	4313      	orrs	r3, r2
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800412a:	2001      	movs	r0, #1
 800412c:	f7ff f8fe 	bl	800332c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004146:	4013      	ands	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800414e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004156:	2a00      	cmp	r2, #0
 8004158:	d101      	bne.n	800415e <ETH_SetMACConfig+0xee>
 800415a:	2280      	movs	r2, #128	; 0x80
 800415c:	e000      	b.n	8004160 <ETH_SetMACConfig+0xf0>
 800415e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004160:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004166:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800416e:	2a01      	cmp	r2, #1
 8004170:	d101      	bne.n	8004176 <ETH_SetMACConfig+0x106>
 8004172:	2208      	movs	r2, #8
 8004174:	e000      	b.n	8004178 <ETH_SetMACConfig+0x108>
 8004176:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004178:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004180:	2a01      	cmp	r2, #1
 8004182:	d101      	bne.n	8004188 <ETH_SetMACConfig+0x118>
 8004184:	2204      	movs	r2, #4
 8004186:	e000      	b.n	800418a <ETH_SetMACConfig+0x11a>
 8004188:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800418a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004192:	2a01      	cmp	r2, #1
 8004194:	d101      	bne.n	800419a <ETH_SetMACConfig+0x12a>
 8004196:	2202      	movs	r2, #2
 8004198:	e000      	b.n	800419c <ETH_SetMACConfig+0x12c>
 800419a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800419c:	4313      	orrs	r3, r2
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80041b4:	2001      	movs	r0, #1
 80041b6:	f7ff f8b9 	bl	800332c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	619a      	str	r2, [r3, #24]
}
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	ff20810f 	.word	0xff20810f

080041d0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4b3d      	ldr	r3, [pc, #244]	; (80042e0 <ETH_SetDMAConfig+0x110>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	7b1b      	ldrb	r3, [r3, #12]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d102      	bne.n	80041fc <ETH_SetDMAConfig+0x2c>
 80041f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80041fa:	e000      	b.n	80041fe <ETH_SetDMAConfig+0x2e>
 80041fc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	7b5b      	ldrb	r3, [r3, #13]
 8004202:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004204:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	7f52      	ldrb	r2, [r2, #29]
 800420a:	2a00      	cmp	r2, #0
 800420c:	d102      	bne.n	8004214 <ETH_SetDMAConfig+0x44>
 800420e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004212:	e000      	b.n	8004216 <ETH_SetDMAConfig+0x46>
 8004214:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004216:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	7b9b      	ldrb	r3, [r3, #14]
 800421c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800421e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004224:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	7f1b      	ldrb	r3, [r3, #28]
 800422a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800422c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	7f9b      	ldrb	r3, [r3, #30]
 8004232:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004234:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800423a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004242:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004244:	4313      	orrs	r3, r2
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004254:	461a      	mov	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004266:	2001      	movs	r0, #1
 8004268:	f7ff f860 	bl	800332c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004274:	461a      	mov	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	791b      	ldrb	r3, [r3, #4]
 800427e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004284:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800428a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004290:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004298:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800429a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80042a2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80042a8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6812      	ldr	r2, [r2, #0]
 80042ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042b6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80042c4:	2001      	movs	r0, #1
 80042c6:	f7ff f831 	bl	800332c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d2:	461a      	mov	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6013      	str	r3, [r2, #0]
}
 80042d8:	bf00      	nop
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	f8de3f23 	.word	0xf8de3f23

080042e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b0a6      	sub	sp, #152	; 0x98
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80042ec:	2301      	movs	r3, #1
 80042ee:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80042f2:	2301      	movs	r3, #1
 80042f4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80042f8:	2300      	movs	r3, #0
 80042fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80042fc:	2300      	movs	r3, #0
 80042fe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004302:	2301      	movs	r3, #1
 8004304:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004308:	2300      	movs	r3, #0
 800430a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800430e:	2301      	movs	r3, #1
 8004310:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004314:	2300      	movs	r3, #0
 8004316:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800431a:	2300      	movs	r3, #0
 800431c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004320:	2300      	movs	r3, #0
 8004322:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004324:	2300      	movs	r3, #0
 8004326:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800432a:	2300      	movs	r3, #0
 800432c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800432e:	2300      	movs	r3, #0
 8004330:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004334:	2300      	movs	r3, #0
 8004336:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800433a:	2300      	movs	r3, #0
 800433c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004340:	2300      	movs	r3, #0
 8004342:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004346:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800434a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800434c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004350:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004352:	2300      	movs	r3, #0
 8004354:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004358:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800435c:	4619      	mov	r1, r3
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7ff fe86 	bl	8004070 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004364:	2301      	movs	r3, #1
 8004366:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004368:	2301      	movs	r3, #1
 800436a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800436c:	2301      	movs	r3, #1
 800436e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004372:	2301      	movs	r3, #1
 8004374:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004376:	2300      	movs	r3, #0
 8004378:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800437a:	2300      	movs	r3, #0
 800437c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004380:	2300      	movs	r3, #0
 8004382:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004386:	2300      	movs	r3, #0
 8004388:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800438a:	2301      	movs	r3, #1
 800438c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004390:	2301      	movs	r3, #1
 8004392:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004394:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004398:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800439a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800439e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80043a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043a4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80043a6:	2301      	movs	r3, #1
 80043a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80043b0:	2300      	movs	r3, #0
 80043b2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80043b4:	f107 0308 	add.w	r3, r7, #8
 80043b8:	4619      	mov	r1, r3
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7ff ff08 	bl	80041d0 <ETH_SetDMAConfig>
}
 80043c0:	bf00      	nop
 80043c2:	3798      	adds	r7, #152	; 0x98
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3305      	adds	r3, #5
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	021b      	lsls	r3, r3, #8
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	3204      	adds	r2, #4
 80043e0:	7812      	ldrb	r2, [r2, #0]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	4b11      	ldr	r3, [pc, #68]	; (8004430 <ETH_MACAddressConfig+0x68>)
 80043ea:	4413      	add	r3, r2
 80043ec:	461a      	mov	r2, r3
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3303      	adds	r3, #3
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	061a      	lsls	r2, r3, #24
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3302      	adds	r3, #2
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	041b      	lsls	r3, r3, #16
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3301      	adds	r3, #1
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	021b      	lsls	r3, r3, #8
 800440c:	4313      	orrs	r3, r2
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	7812      	ldrb	r2, [r2, #0]
 8004412:	4313      	orrs	r3, r2
 8004414:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	4b06      	ldr	r3, [pc, #24]	; (8004434 <ETH_MACAddressConfig+0x6c>)
 800441a:	4413      	add	r3, r2
 800441c:	461a      	mov	r2, r3
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	6013      	str	r3, [r2, #0]
}
 8004422:	bf00      	nop
 8004424:	371c      	adds	r7, #28
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40028040 	.word	0x40028040
 8004434:	40028044 	.word	0x40028044

08004438 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004440:	2300      	movs	r3, #0
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	e03e      	b.n	80044c4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68d9      	ldr	r1, [r3, #12]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	440b      	add	r3, r1
 8004456:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2200      	movs	r2, #0
 8004462:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2200      	movs	r2, #0
 8004468:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2200      	movs	r2, #0
 800446e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004470:	68b9      	ldr	r1, [r7, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	3206      	adds	r2, #6
 8004478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d80c      	bhi.n	80044a8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68d9      	ldr	r1, [r3, #12]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	4613      	mov	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	440b      	add	r3, r1
 80044a0:	461a      	mov	r2, r3
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	60da      	str	r2, [r3, #12]
 80044a6:	e004      	b.n	80044b2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	461a      	mov	r2, r3
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3301      	adds	r3, #1
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b03      	cmp	r3, #3
 80044c8:	d9bd      	bls.n	8004446 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044dc:	611a      	str	r2, [r3, #16]
}
 80044de:	bf00      	nop
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b085      	sub	sp, #20
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80044f2:	2300      	movs	r3, #0
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	e046      	b.n	8004586 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6919      	ldr	r1, [r3, #16]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4613      	mov	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	440b      	add	r3, r1
 8004508:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2200      	movs	r2, #0
 8004514:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2200      	movs	r2, #0
 800451a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2200      	movs	r2, #0
 8004520:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2200      	movs	r2, #0
 8004526:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2200      	movs	r2, #0
 800452c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004534:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800453c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800454a:	68b9      	ldr	r1, [r7, #8]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	3212      	adds	r2, #18
 8004552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b02      	cmp	r3, #2
 800455a:	d80c      	bhi.n	8004576 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6919      	ldr	r1, [r3, #16]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	1c5a      	adds	r2, r3, #1
 8004564:	4613      	mov	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	440b      	add	r3, r1
 800456e:	461a      	mov	r2, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	60da      	str	r2, [r3, #12]
 8004574:	e004      	b.n	8004580 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	461a      	mov	r2, r3
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	3301      	adds	r3, #1
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b03      	cmp	r3, #3
 800458a:	d9b5      	bls.n	80044f8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691a      	ldr	r2, [r3, #16]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045b6:	60da      	str	r2, [r3, #12]
}
 80045b8:	bf00      	nop
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b089      	sub	sp, #36	; 0x24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045da:	2300      	movs	r3, #0
 80045dc:	61fb      	str	r3, [r7, #28]
 80045de:	e177      	b.n	80048d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045e0:	2201      	movs	r2, #1
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	4013      	ands	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	f040 8166 	bne.w	80048ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f003 0303 	and.w	r3, r3, #3
 8004606:	2b01      	cmp	r3, #1
 8004608:	d005      	beq.n	8004616 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004612:	2b02      	cmp	r3, #2
 8004614:	d130      	bne.n	8004678 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	2203      	movs	r2, #3
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	43db      	mvns	r3, r3
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	4013      	ands	r3, r2
 800462c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68da      	ldr	r2, [r3, #12]
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4313      	orrs	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800464c:	2201      	movs	r2, #1
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	fa02 f303 	lsl.w	r3, r2, r3
 8004654:	43db      	mvns	r3, r3
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	4013      	ands	r3, r2
 800465a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	091b      	lsrs	r3, r3, #4
 8004662:	f003 0201 	and.w	r2, r3, #1
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	4313      	orrs	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	2b03      	cmp	r3, #3
 8004682:	d017      	beq.n	80046b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	2203      	movs	r2, #3
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	43db      	mvns	r3, r3
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	4013      	ands	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f003 0303 	and.w	r3, r3, #3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d123      	bne.n	8004708 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	08da      	lsrs	r2, r3, #3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	3208      	adds	r2, #8
 80046c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	220f      	movs	r2, #15
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	43db      	mvns	r3, r3
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	4013      	ands	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	08da      	lsrs	r2, r3, #3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	3208      	adds	r2, #8
 8004702:	69b9      	ldr	r1, [r7, #24]
 8004704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	2203      	movs	r2, #3
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	43db      	mvns	r3, r3
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	4013      	ands	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f003 0203 	and.w	r2, r3, #3
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	4313      	orrs	r3, r2
 8004734:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 80c0 	beq.w	80048ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	4b66      	ldr	r3, [pc, #408]	; (80048e8 <HAL_GPIO_Init+0x324>)
 8004750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004752:	4a65      	ldr	r2, [pc, #404]	; (80048e8 <HAL_GPIO_Init+0x324>)
 8004754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004758:	6453      	str	r3, [r2, #68]	; 0x44
 800475a:	4b63      	ldr	r3, [pc, #396]	; (80048e8 <HAL_GPIO_Init+0x324>)
 800475c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004766:	4a61      	ldr	r2, [pc, #388]	; (80048ec <HAL_GPIO_Init+0x328>)
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	089b      	lsrs	r3, r3, #2
 800476c:	3302      	adds	r3, #2
 800476e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004772:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	220f      	movs	r2, #15
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	43db      	mvns	r3, r3
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	4013      	ands	r3, r2
 8004788:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a58      	ldr	r2, [pc, #352]	; (80048f0 <HAL_GPIO_Init+0x32c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d037      	beq.n	8004802 <HAL_GPIO_Init+0x23e>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a57      	ldr	r2, [pc, #348]	; (80048f4 <HAL_GPIO_Init+0x330>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d031      	beq.n	80047fe <HAL_GPIO_Init+0x23a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a56      	ldr	r2, [pc, #344]	; (80048f8 <HAL_GPIO_Init+0x334>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d02b      	beq.n	80047fa <HAL_GPIO_Init+0x236>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a55      	ldr	r2, [pc, #340]	; (80048fc <HAL_GPIO_Init+0x338>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d025      	beq.n	80047f6 <HAL_GPIO_Init+0x232>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a54      	ldr	r2, [pc, #336]	; (8004900 <HAL_GPIO_Init+0x33c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d01f      	beq.n	80047f2 <HAL_GPIO_Init+0x22e>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a53      	ldr	r2, [pc, #332]	; (8004904 <HAL_GPIO_Init+0x340>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d019      	beq.n	80047ee <HAL_GPIO_Init+0x22a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a52      	ldr	r2, [pc, #328]	; (8004908 <HAL_GPIO_Init+0x344>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d013      	beq.n	80047ea <HAL_GPIO_Init+0x226>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a51      	ldr	r2, [pc, #324]	; (800490c <HAL_GPIO_Init+0x348>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d00d      	beq.n	80047e6 <HAL_GPIO_Init+0x222>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a50      	ldr	r2, [pc, #320]	; (8004910 <HAL_GPIO_Init+0x34c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d007      	beq.n	80047e2 <HAL_GPIO_Init+0x21e>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a4f      	ldr	r2, [pc, #316]	; (8004914 <HAL_GPIO_Init+0x350>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d101      	bne.n	80047de <HAL_GPIO_Init+0x21a>
 80047da:	2309      	movs	r3, #9
 80047dc:	e012      	b.n	8004804 <HAL_GPIO_Init+0x240>
 80047de:	230a      	movs	r3, #10
 80047e0:	e010      	b.n	8004804 <HAL_GPIO_Init+0x240>
 80047e2:	2308      	movs	r3, #8
 80047e4:	e00e      	b.n	8004804 <HAL_GPIO_Init+0x240>
 80047e6:	2307      	movs	r3, #7
 80047e8:	e00c      	b.n	8004804 <HAL_GPIO_Init+0x240>
 80047ea:	2306      	movs	r3, #6
 80047ec:	e00a      	b.n	8004804 <HAL_GPIO_Init+0x240>
 80047ee:	2305      	movs	r3, #5
 80047f0:	e008      	b.n	8004804 <HAL_GPIO_Init+0x240>
 80047f2:	2304      	movs	r3, #4
 80047f4:	e006      	b.n	8004804 <HAL_GPIO_Init+0x240>
 80047f6:	2303      	movs	r3, #3
 80047f8:	e004      	b.n	8004804 <HAL_GPIO_Init+0x240>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e002      	b.n	8004804 <HAL_GPIO_Init+0x240>
 80047fe:	2301      	movs	r3, #1
 8004800:	e000      	b.n	8004804 <HAL_GPIO_Init+0x240>
 8004802:	2300      	movs	r3, #0
 8004804:	69fa      	ldr	r2, [r7, #28]
 8004806:	f002 0203 	and.w	r2, r2, #3
 800480a:	0092      	lsls	r2, r2, #2
 800480c:	4093      	lsls	r3, r2
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	4313      	orrs	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004814:	4935      	ldr	r1, [pc, #212]	; (80048ec <HAL_GPIO_Init+0x328>)
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	089b      	lsrs	r3, r3, #2
 800481a:	3302      	adds	r3, #2
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004822:	4b3d      	ldr	r3, [pc, #244]	; (8004918 <HAL_GPIO_Init+0x354>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	43db      	mvns	r3, r3
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	4013      	ands	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	4313      	orrs	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004846:	4a34      	ldr	r2, [pc, #208]	; (8004918 <HAL_GPIO_Init+0x354>)
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800484c:	4b32      	ldr	r3, [pc, #200]	; (8004918 <HAL_GPIO_Init+0x354>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	43db      	mvns	r3, r3
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	4013      	ands	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004870:	4a29      	ldr	r2, [pc, #164]	; (8004918 <HAL_GPIO_Init+0x354>)
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004876:	4b28      	ldr	r3, [pc, #160]	; (8004918 <HAL_GPIO_Init+0x354>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	43db      	mvns	r3, r3
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	4013      	ands	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	4313      	orrs	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800489a:	4a1f      	ldr	r2, [pc, #124]	; (8004918 <HAL_GPIO_Init+0x354>)
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048a0:	4b1d      	ldr	r3, [pc, #116]	; (8004918 <HAL_GPIO_Init+0x354>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	43db      	mvns	r3, r3
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	4013      	ands	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048c4:	4a14      	ldr	r2, [pc, #80]	; (8004918 <HAL_GPIO_Init+0x354>)
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	3301      	adds	r3, #1
 80048ce:	61fb      	str	r3, [r7, #28]
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	2b0f      	cmp	r3, #15
 80048d4:	f67f ae84 	bls.w	80045e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048d8:	bf00      	nop
 80048da:	bf00      	nop
 80048dc:	3724      	adds	r7, #36	; 0x24
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40023800 	.word	0x40023800
 80048ec:	40013800 	.word	0x40013800
 80048f0:	40020000 	.word	0x40020000
 80048f4:	40020400 	.word	0x40020400
 80048f8:	40020800 	.word	0x40020800
 80048fc:	40020c00 	.word	0x40020c00
 8004900:	40021000 	.word	0x40021000
 8004904:	40021400 	.word	0x40021400
 8004908:	40021800 	.word	0x40021800
 800490c:	40021c00 	.word	0x40021c00
 8004910:	40022000 	.word	0x40022000
 8004914:	40022400 	.word	0x40022400
 8004918:	40013c00 	.word	0x40013c00

0800491c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	460b      	mov	r3, r1
 8004926:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691a      	ldr	r2, [r3, #16]
 800492c:	887b      	ldrh	r3, [r7, #2]
 800492e:	4013      	ands	r3, r2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004934:	2301      	movs	r3, #1
 8004936:	73fb      	strb	r3, [r7, #15]
 8004938:	e001      	b.n	800493e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800493a:	2300      	movs	r3, #0
 800493c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800493e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	807b      	strh	r3, [r7, #2]
 8004958:	4613      	mov	r3, r2
 800495a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800495c:	787b      	ldrb	r3, [r7, #1]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004962:	887a      	ldrh	r2, [r7, #2]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004968:	e003      	b.n	8004972 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800496a:	887b      	ldrh	r3, [r7, #2]
 800496c:	041a      	lsls	r2, r3, #16
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	619a      	str	r2, [r3, #24]
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
	...

08004980 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	4603      	mov	r3, r0
 8004988:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800498a:	4b08      	ldr	r3, [pc, #32]	; (80049ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800498c:	695a      	ldr	r2, [r3, #20]
 800498e:	88fb      	ldrh	r3, [r7, #6]
 8004990:	4013      	ands	r3, r2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d006      	beq.n	80049a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004996:	4a05      	ldr	r2, [pc, #20]	; (80049ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004998:	88fb      	ldrh	r3, [r7, #6]
 800499a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800499c:	88fb      	ldrh	r3, [r7, #6]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fc f830 	bl	8000a04 <HAL_GPIO_EXTI_Callback>
  }
}
 80049a4:	bf00      	nop
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40013c00 	.word	0x40013c00

080049b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e12b      	b.n	8004c1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7fd ff0c 	bl	80027f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2224      	movs	r2, #36	; 0x24
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0201 	bic.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a14:	f001 fa20 	bl	8005e58 <HAL_RCC_GetPCLK1Freq>
 8004a18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	4a81      	ldr	r2, [pc, #516]	; (8004c24 <HAL_I2C_Init+0x274>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d807      	bhi.n	8004a34 <HAL_I2C_Init+0x84>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4a80      	ldr	r2, [pc, #512]	; (8004c28 <HAL_I2C_Init+0x278>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	bf94      	ite	ls
 8004a2c:	2301      	movls	r3, #1
 8004a2e:	2300      	movhi	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	e006      	b.n	8004a42 <HAL_I2C_Init+0x92>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4a7d      	ldr	r2, [pc, #500]	; (8004c2c <HAL_I2C_Init+0x27c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	bf94      	ite	ls
 8004a3c:	2301      	movls	r3, #1
 8004a3e:	2300      	movhi	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e0e7      	b.n	8004c1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4a78      	ldr	r2, [pc, #480]	; (8004c30 <HAL_I2C_Init+0x280>)
 8004a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a52:	0c9b      	lsrs	r3, r3, #18
 8004a54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	4a6a      	ldr	r2, [pc, #424]	; (8004c24 <HAL_I2C_Init+0x274>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d802      	bhi.n	8004a84 <HAL_I2C_Init+0xd4>
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	3301      	adds	r3, #1
 8004a82:	e009      	b.n	8004a98 <HAL_I2C_Init+0xe8>
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a8a:	fb02 f303 	mul.w	r3, r2, r3
 8004a8e:	4a69      	ldr	r2, [pc, #420]	; (8004c34 <HAL_I2C_Init+0x284>)
 8004a90:	fba2 2303 	umull	r2, r3, r2, r3
 8004a94:	099b      	lsrs	r3, r3, #6
 8004a96:	3301      	adds	r3, #1
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6812      	ldr	r2, [r2, #0]
 8004a9c:	430b      	orrs	r3, r1
 8004a9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004aaa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	495c      	ldr	r1, [pc, #368]	; (8004c24 <HAL_I2C_Init+0x274>)
 8004ab4:	428b      	cmp	r3, r1
 8004ab6:	d819      	bhi.n	8004aec <HAL_I2C_Init+0x13c>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	1e59      	subs	r1, r3, #1
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ac6:	1c59      	adds	r1, r3, #1
 8004ac8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004acc:	400b      	ands	r3, r1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <HAL_I2C_Init+0x138>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	1e59      	subs	r1, r3, #1
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ae6:	e051      	b.n	8004b8c <HAL_I2C_Init+0x1dc>
 8004ae8:	2304      	movs	r3, #4
 8004aea:	e04f      	b.n	8004b8c <HAL_I2C_Init+0x1dc>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d111      	bne.n	8004b18 <HAL_I2C_Init+0x168>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	1e58      	subs	r0, r3, #1
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6859      	ldr	r1, [r3, #4]
 8004afc:	460b      	mov	r3, r1
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	440b      	add	r3, r1
 8004b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b06:	3301      	adds	r3, #1
 8004b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	bf0c      	ite	eq
 8004b10:	2301      	moveq	r3, #1
 8004b12:	2300      	movne	r3, #0
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	e012      	b.n	8004b3e <HAL_I2C_Init+0x18e>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	1e58      	subs	r0, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6859      	ldr	r1, [r3, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	0099      	lsls	r1, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b2e:	3301      	adds	r3, #1
 8004b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	bf0c      	ite	eq
 8004b38:	2301      	moveq	r3, #1
 8004b3a:	2300      	movne	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <HAL_I2C_Init+0x196>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e022      	b.n	8004b8c <HAL_I2C_Init+0x1dc>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10e      	bne.n	8004b6c <HAL_I2C_Init+0x1bc>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	1e58      	subs	r0, r3, #1
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6859      	ldr	r1, [r3, #4]
 8004b56:	460b      	mov	r3, r1
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	440b      	add	r3, r1
 8004b5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b60:	3301      	adds	r3, #1
 8004b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b6a:	e00f      	b.n	8004b8c <HAL_I2C_Init+0x1dc>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	1e58      	subs	r0, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6859      	ldr	r1, [r3, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	0099      	lsls	r1, r3, #2
 8004b7c:	440b      	add	r3, r1
 8004b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b82:	3301      	adds	r3, #1
 8004b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b8c:	6879      	ldr	r1, [r7, #4]
 8004b8e:	6809      	ldr	r1, [r1, #0]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69da      	ldr	r2, [r3, #28]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004bba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6911      	ldr	r1, [r2, #16]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	68d2      	ldr	r2, [r2, #12]
 8004bc6:	4311      	orrs	r1, r2
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6812      	ldr	r2, [r2, #0]
 8004bcc:	430b      	orrs	r3, r1
 8004bce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	695a      	ldr	r2, [r3, #20]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	431a      	orrs	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0201 	orr.w	r2, r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	000186a0 	.word	0x000186a0
 8004c28:	001e847f 	.word	0x001e847f
 8004c2c:	003d08ff 	.word	0x003d08ff
 8004c30:	431bde83 	.word	0x431bde83
 8004c34:	10624dd3 	.word	0x10624dd3

08004c38 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b088      	sub	sp, #32
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	607a      	str	r2, [r7, #4]
 8004c42:	461a      	mov	r2, r3
 8004c44:	460b      	mov	r3, r1
 8004c46:	817b      	strh	r3, [r7, #10]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c4c:	f7fe fb62 	bl	8003314 <HAL_GetTick>
 8004c50:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b20      	cmp	r3, #32
 8004c5c:	f040 80e0 	bne.w	8004e20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	2319      	movs	r3, #25
 8004c66:	2201      	movs	r2, #1
 8004c68:	4970      	ldr	r1, [pc, #448]	; (8004e2c <HAL_I2C_Master_Transmit+0x1f4>)
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 f964 	bl	8004f38 <I2C_WaitOnFlagUntilTimeout>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c76:	2302      	movs	r3, #2
 8004c78:	e0d3      	b.n	8004e22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d101      	bne.n	8004c88 <HAL_I2C_Master_Transmit+0x50>
 8004c84:	2302      	movs	r3, #2
 8004c86:	e0cc      	b.n	8004e22 <HAL_I2C_Master_Transmit+0x1ea>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d007      	beq.n	8004cae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f042 0201 	orr.w	r2, r2, #1
 8004cac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cbc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2221      	movs	r2, #33	; 0x21
 8004cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2210      	movs	r2, #16
 8004cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	893a      	ldrh	r2, [r7, #8]
 8004cde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	4a50      	ldr	r2, [pc, #320]	; (8004e30 <HAL_I2C_Master_Transmit+0x1f8>)
 8004cee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004cf0:	8979      	ldrh	r1, [r7, #10]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	6a3a      	ldr	r2, [r7, #32]
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 f89c 	bl	8004e34 <I2C_MasterRequestWrite>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e08d      	b.n	8004e22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d06:	2300      	movs	r3, #0
 8004d08:	613b      	str	r3, [r7, #16]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	613b      	str	r3, [r7, #16]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	613b      	str	r3, [r7, #16]
 8004d1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004d1c:	e066      	b.n	8004dec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	6a39      	ldr	r1, [r7, #32]
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 f9de 	bl	80050e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00d      	beq.n	8004d4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d107      	bne.n	8004d46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e06b      	b.n	8004e22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	781a      	ldrb	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	1c5a      	adds	r2, r3, #1
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d11b      	bne.n	8004dc0 <HAL_I2C_Master_Transmit+0x188>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d017      	beq.n	8004dc0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	781a      	ldrb	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	6a39      	ldr	r1, [r7, #32]
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 f9ce 	bl	8005166 <I2C_WaitOnBTFFlagUntilTimeout>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00d      	beq.n	8004dec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d107      	bne.n	8004de8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004de6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e01a      	b.n	8004e22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d194      	bne.n	8004d1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	e000      	b.n	8004e22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004e20:	2302      	movs	r3, #2
  }
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	00100002 	.word	0x00100002
 8004e30:	ffff0000 	.word	0xffff0000

08004e34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b088      	sub	sp, #32
 8004e38:	af02      	add	r7, sp, #8
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	607a      	str	r2, [r7, #4]
 8004e3e:	603b      	str	r3, [r7, #0]
 8004e40:	460b      	mov	r3, r1
 8004e42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d006      	beq.n	8004e5e <I2C_MasterRequestWrite+0x2a>
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d003      	beq.n	8004e5e <I2C_MasterRequestWrite+0x2a>
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e5c:	d108      	bne.n	8004e70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	e00b      	b.n	8004e88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e74:	2b12      	cmp	r3, #18
 8004e76:	d107      	bne.n	8004e88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 f84f 	bl	8004f38 <I2C_WaitOnFlagUntilTimeout>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00d      	beq.n	8004ebc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eae:	d103      	bne.n	8004eb8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e035      	b.n	8004f28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ec4:	d108      	bne.n	8004ed8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ec6:	897b      	ldrh	r3, [r7, #10]
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	461a      	mov	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ed4:	611a      	str	r2, [r3, #16]
 8004ed6:	e01b      	b.n	8004f10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ed8:	897b      	ldrh	r3, [r7, #10]
 8004eda:	11db      	asrs	r3, r3, #7
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	f003 0306 	and.w	r3, r3, #6
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	f063 030f 	orn	r3, r3, #15
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	490e      	ldr	r1, [pc, #56]	; (8004f30 <I2C_MasterRequestWrite+0xfc>)
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 f875 	bl	8004fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e010      	b.n	8004f28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f06:	897b      	ldrh	r3, [r7, #10]
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	4907      	ldr	r1, [pc, #28]	; (8004f34 <I2C_MasterRequestWrite+0x100>)
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 f865 	bl	8004fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	00010008 	.word	0x00010008
 8004f34:	00010002 	.word	0x00010002

08004f38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	603b      	str	r3, [r7, #0]
 8004f44:	4613      	mov	r3, r2
 8004f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f48:	e025      	b.n	8004f96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f50:	d021      	beq.n	8004f96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f52:	f7fe f9df 	bl	8003314 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d302      	bcc.n	8004f68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d116      	bne.n	8004f96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2220      	movs	r2, #32
 8004f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	f043 0220 	orr.w	r2, r3, #32
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e023      	b.n	8004fde <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	0c1b      	lsrs	r3, r3, #16
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d10d      	bne.n	8004fbc <I2C_WaitOnFlagUntilTimeout+0x84>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	43da      	mvns	r2, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	4013      	ands	r3, r2
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	bf0c      	ite	eq
 8004fb2:	2301      	moveq	r3, #1
 8004fb4:	2300      	movne	r3, #0
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	461a      	mov	r2, r3
 8004fba:	e00c      	b.n	8004fd6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	43da      	mvns	r2, r3
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	bf0c      	ite	eq
 8004fce:	2301      	moveq	r3, #1
 8004fd0:	2300      	movne	r3, #0
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	79fb      	ldrb	r3, [r7, #7]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d0b6      	beq.n	8004f4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b084      	sub	sp, #16
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	60f8      	str	r0, [r7, #12]
 8004fee:	60b9      	str	r1, [r7, #8]
 8004ff0:	607a      	str	r2, [r7, #4]
 8004ff2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ff4:	e051      	b.n	800509a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005004:	d123      	bne.n	800504e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005014:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800501e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2220      	movs	r2, #32
 800502a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	f043 0204 	orr.w	r2, r3, #4
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e046      	b.n	80050dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005054:	d021      	beq.n	800509a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005056:	f7fe f95d 	bl	8003314 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	429a      	cmp	r2, r3
 8005064:	d302      	bcc.n	800506c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d116      	bne.n	800509a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2220      	movs	r2, #32
 8005076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	f043 0220 	orr.w	r2, r3, #32
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e020      	b.n	80050dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	0c1b      	lsrs	r3, r3, #16
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d10c      	bne.n	80050be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	43da      	mvns	r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4013      	ands	r3, r2
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	bf14      	ite	ne
 80050b6:	2301      	movne	r3, #1
 80050b8:	2300      	moveq	r3, #0
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	e00b      	b.n	80050d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	43da      	mvns	r2, r3
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	4013      	ands	r3, r2
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	bf14      	ite	ne
 80050d0:	2301      	movne	r3, #1
 80050d2:	2300      	moveq	r3, #0
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d18d      	bne.n	8004ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050f0:	e02d      	b.n	800514e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 f878 	bl	80051e8 <I2C_IsAcknowledgeFailed>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e02d      	b.n	800515e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005108:	d021      	beq.n	800514e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800510a:	f7fe f903 	bl	8003314 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	429a      	cmp	r2, r3
 8005118:	d302      	bcc.n	8005120 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d116      	bne.n	800514e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2220      	movs	r2, #32
 800512a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	f043 0220 	orr.w	r2, r3, #32
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e007      	b.n	800515e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005158:	2b80      	cmp	r3, #128	; 0x80
 800515a:	d1ca      	bne.n	80050f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b084      	sub	sp, #16
 800516a:	af00      	add	r7, sp, #0
 800516c:	60f8      	str	r0, [r7, #12]
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005172:	e02d      	b.n	80051d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 f837 	bl	80051e8 <I2C_IsAcknowledgeFailed>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e02d      	b.n	80051e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518a:	d021      	beq.n	80051d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518c:	f7fe f8c2 	bl	8003314 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	429a      	cmp	r2, r3
 800519a:	d302      	bcc.n	80051a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d116      	bne.n	80051d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051bc:	f043 0220 	orr.w	r2, r3, #32
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e007      	b.n	80051e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	f003 0304 	and.w	r3, r3, #4
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d1ca      	bne.n	8005174 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051fe:	d11b      	bne.n	8005238 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005208:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2220      	movs	r2, #32
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	f043 0204 	orr.w	r2, r3, #4
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e000      	b.n	800523a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
 800524e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b20      	cmp	r3, #32
 800525a:	d129      	bne.n	80052b0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2224      	movs	r2, #36	; 0x24
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0201 	bic.w	r2, r2, #1
 8005272:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0210 	bic.w	r2, r2, #16
 8005282:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0201 	orr.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	e000      	b.n	80052b2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80052b0:	2302      	movs	r3, #2
  }
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80052be:	b480      	push	{r7}
 80052c0:	b085      	sub	sp, #20
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80052c8:	2300      	movs	r3, #0
 80052ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b20      	cmp	r3, #32
 80052d6:	d12a      	bne.n	800532e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2224      	movs	r2, #36	; 0x24
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0201 	bic.w	r2, r2, #1
 80052ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80052f8:	89fb      	ldrh	r3, [r7, #14]
 80052fa:	f023 030f 	bic.w	r3, r3, #15
 80052fe:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	b29a      	uxth	r2, r3
 8005304:	89fb      	ldrh	r3, [r7, #14]
 8005306:	4313      	orrs	r3, r2
 8005308:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	89fa      	ldrh	r2, [r7, #14]
 8005310:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f042 0201 	orr.w	r2, r2, #1
 8005320:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2220      	movs	r2, #32
 8005326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800532a:	2300      	movs	r3, #0
 800532c:	e000      	b.n	8005330 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800532e:	2302      	movs	r3, #2
  }
}
 8005330:	4618      	mov	r0, r3
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800533c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800533e:	b08f      	sub	sp, #60	; 0x3c
 8005340:	af0a      	add	r7, sp, #40	; 0x28
 8005342:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e10f      	b.n	800556e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d106      	bne.n	800536e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7fd fc99 	bl	8002ca0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2203      	movs	r2, #3
 8005372:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800537a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537e:	2b00      	cmp	r3, #0
 8005380:	d102      	bne.n	8005388 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4618      	mov	r0, r3
 800538e:	f003 ff4a 	bl	8009226 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	603b      	str	r3, [r7, #0]
 8005398:	687e      	ldr	r6, [r7, #4]
 800539a:	466d      	mov	r5, sp
 800539c:	f106 0410 	add.w	r4, r6, #16
 80053a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80053b0:	1d33      	adds	r3, r6, #4
 80053b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053b4:	6838      	ldr	r0, [r7, #0]
 80053b6:	f003 fed5 	bl	8009164 <USB_CoreInit>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d005      	beq.n	80053cc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e0d0      	b.n	800556e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2100      	movs	r1, #0
 80053d2:	4618      	mov	r0, r3
 80053d4:	f003 ff38 	bl	8009248 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053d8:	2300      	movs	r3, #0
 80053da:	73fb      	strb	r3, [r7, #15]
 80053dc:	e04a      	b.n	8005474 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80053de:	7bfa      	ldrb	r2, [r7, #15]
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	4613      	mov	r3, r2
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	4413      	add	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	440b      	add	r3, r1
 80053ec:	333d      	adds	r3, #61	; 0x3d
 80053ee:	2201      	movs	r2, #1
 80053f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80053f2:	7bfa      	ldrb	r2, [r7, #15]
 80053f4:	6879      	ldr	r1, [r7, #4]
 80053f6:	4613      	mov	r3, r2
 80053f8:	00db      	lsls	r3, r3, #3
 80053fa:	4413      	add	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	440b      	add	r3, r1
 8005400:	333c      	adds	r3, #60	; 0x3c
 8005402:	7bfa      	ldrb	r2, [r7, #15]
 8005404:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005406:	7bfa      	ldrb	r2, [r7, #15]
 8005408:	7bfb      	ldrb	r3, [r7, #15]
 800540a:	b298      	uxth	r0, r3
 800540c:	6879      	ldr	r1, [r7, #4]
 800540e:	4613      	mov	r3, r2
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	4413      	add	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	440b      	add	r3, r1
 8005418:	3344      	adds	r3, #68	; 0x44
 800541a:	4602      	mov	r2, r0
 800541c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800541e:	7bfa      	ldrb	r2, [r7, #15]
 8005420:	6879      	ldr	r1, [r7, #4]
 8005422:	4613      	mov	r3, r2
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	4413      	add	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	440b      	add	r3, r1
 800542c:	3340      	adds	r3, #64	; 0x40
 800542e:	2200      	movs	r2, #0
 8005430:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005432:	7bfa      	ldrb	r2, [r7, #15]
 8005434:	6879      	ldr	r1, [r7, #4]
 8005436:	4613      	mov	r3, r2
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	4413      	add	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	440b      	add	r3, r1
 8005440:	3348      	adds	r3, #72	; 0x48
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005446:	7bfa      	ldrb	r2, [r7, #15]
 8005448:	6879      	ldr	r1, [r7, #4]
 800544a:	4613      	mov	r3, r2
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	4413      	add	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	440b      	add	r3, r1
 8005454:	334c      	adds	r3, #76	; 0x4c
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800545a:	7bfa      	ldrb	r2, [r7, #15]
 800545c:	6879      	ldr	r1, [r7, #4]
 800545e:	4613      	mov	r3, r2
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	4413      	add	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	440b      	add	r3, r1
 8005468:	3354      	adds	r3, #84	; 0x54
 800546a:	2200      	movs	r2, #0
 800546c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800546e:	7bfb      	ldrb	r3, [r7, #15]
 8005470:	3301      	adds	r3, #1
 8005472:	73fb      	strb	r3, [r7, #15]
 8005474:	7bfa      	ldrb	r2, [r7, #15]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	429a      	cmp	r2, r3
 800547c:	d3af      	bcc.n	80053de <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800547e:	2300      	movs	r3, #0
 8005480:	73fb      	strb	r3, [r7, #15]
 8005482:	e044      	b.n	800550e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005484:	7bfa      	ldrb	r2, [r7, #15]
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	4613      	mov	r3, r2
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	4413      	add	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	440b      	add	r3, r1
 8005492:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005496:	2200      	movs	r2, #0
 8005498:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800549a:	7bfa      	ldrb	r2, [r7, #15]
 800549c:	6879      	ldr	r1, [r7, #4]
 800549e:	4613      	mov	r3, r2
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	4413      	add	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	440b      	add	r3, r1
 80054a8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80054ac:	7bfa      	ldrb	r2, [r7, #15]
 80054ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80054b0:	7bfa      	ldrb	r2, [r7, #15]
 80054b2:	6879      	ldr	r1, [r7, #4]
 80054b4:	4613      	mov	r3, r2
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	4413      	add	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	440b      	add	r3, r1
 80054be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80054c2:	2200      	movs	r2, #0
 80054c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80054c6:	7bfa      	ldrb	r2, [r7, #15]
 80054c8:	6879      	ldr	r1, [r7, #4]
 80054ca:	4613      	mov	r3, r2
 80054cc:	00db      	lsls	r3, r3, #3
 80054ce:	4413      	add	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	440b      	add	r3, r1
 80054d4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80054d8:	2200      	movs	r2, #0
 80054da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80054dc:	7bfa      	ldrb	r2, [r7, #15]
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	4613      	mov	r3, r2
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	4413      	add	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	440b      	add	r3, r1
 80054ea:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80054ee:	2200      	movs	r2, #0
 80054f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80054f2:	7bfa      	ldrb	r2, [r7, #15]
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	4613      	mov	r3, r2
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	4413      	add	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	440b      	add	r3, r1
 8005500:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005508:	7bfb      	ldrb	r3, [r7, #15]
 800550a:	3301      	adds	r3, #1
 800550c:	73fb      	strb	r3, [r7, #15]
 800550e:	7bfa      	ldrb	r2, [r7, #15]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	429a      	cmp	r2, r3
 8005516:	d3b5      	bcc.n	8005484 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	603b      	str	r3, [r7, #0]
 800551e:	687e      	ldr	r6, [r7, #4]
 8005520:	466d      	mov	r5, sp
 8005522:	f106 0410 	add.w	r4, r6, #16
 8005526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800552a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800552c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800552e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005532:	e885 0003 	stmia.w	r5, {r0, r1}
 8005536:	1d33      	adds	r3, r6, #4
 8005538:	cb0e      	ldmia	r3, {r1, r2, r3}
 800553a:	6838      	ldr	r0, [r7, #0]
 800553c:	f003 fed0 	bl	80092e0 <USB_DevInit>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d005      	beq.n	8005552 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2202      	movs	r2, #2
 800554a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e00d      	b.n	800556e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f004 f89b 	bl	80096a2 <USB_DevDisconnect>

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005578 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e267      	b.n	8005a5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d075      	beq.n	8005682 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005596:	4b88      	ldr	r3, [pc, #544]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 030c 	and.w	r3, r3, #12
 800559e:	2b04      	cmp	r3, #4
 80055a0:	d00c      	beq.n	80055bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055a2:	4b85      	ldr	r3, [pc, #532]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055aa:	2b08      	cmp	r3, #8
 80055ac:	d112      	bne.n	80055d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055ae:	4b82      	ldr	r3, [pc, #520]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055ba:	d10b      	bne.n	80055d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055bc:	4b7e      	ldr	r3, [pc, #504]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d05b      	beq.n	8005680 <HAL_RCC_OscConfig+0x108>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d157      	bne.n	8005680 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e242      	b.n	8005a5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055dc:	d106      	bne.n	80055ec <HAL_RCC_OscConfig+0x74>
 80055de:	4b76      	ldr	r3, [pc, #472]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a75      	ldr	r2, [pc, #468]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 80055e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055e8:	6013      	str	r3, [r2, #0]
 80055ea:	e01d      	b.n	8005628 <HAL_RCC_OscConfig+0xb0>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055f4:	d10c      	bne.n	8005610 <HAL_RCC_OscConfig+0x98>
 80055f6:	4b70      	ldr	r3, [pc, #448]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a6f      	ldr	r2, [pc, #444]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 80055fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005600:	6013      	str	r3, [r2, #0]
 8005602:	4b6d      	ldr	r3, [pc, #436]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a6c      	ldr	r2, [pc, #432]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 8005608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800560c:	6013      	str	r3, [r2, #0]
 800560e:	e00b      	b.n	8005628 <HAL_RCC_OscConfig+0xb0>
 8005610:	4b69      	ldr	r3, [pc, #420]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a68      	ldr	r2, [pc, #416]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 8005616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800561a:	6013      	str	r3, [r2, #0]
 800561c:	4b66      	ldr	r3, [pc, #408]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a65      	ldr	r2, [pc, #404]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 8005622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d013      	beq.n	8005658 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005630:	f7fd fe70 	bl	8003314 <HAL_GetTick>
 8005634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005636:	e008      	b.n	800564a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005638:	f7fd fe6c 	bl	8003314 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b64      	cmp	r3, #100	; 0x64
 8005644:	d901      	bls.n	800564a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e207      	b.n	8005a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800564a:	4b5b      	ldr	r3, [pc, #364]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0f0      	beq.n	8005638 <HAL_RCC_OscConfig+0xc0>
 8005656:	e014      	b.n	8005682 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005658:	f7fd fe5c 	bl	8003314 <HAL_GetTick>
 800565c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800565e:	e008      	b.n	8005672 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005660:	f7fd fe58 	bl	8003314 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b64      	cmp	r3, #100	; 0x64
 800566c:	d901      	bls.n	8005672 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e1f3      	b.n	8005a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005672:	4b51      	ldr	r3, [pc, #324]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1f0      	bne.n	8005660 <HAL_RCC_OscConfig+0xe8>
 800567e:	e000      	b.n	8005682 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d063      	beq.n	8005756 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800568e:	4b4a      	ldr	r3, [pc, #296]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f003 030c 	and.w	r3, r3, #12
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00b      	beq.n	80056b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800569a:	4b47      	ldr	r3, [pc, #284]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056a2:	2b08      	cmp	r3, #8
 80056a4:	d11c      	bne.n	80056e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056a6:	4b44      	ldr	r3, [pc, #272]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d116      	bne.n	80056e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056b2:	4b41      	ldr	r3, [pc, #260]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d005      	beq.n	80056ca <HAL_RCC_OscConfig+0x152>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d001      	beq.n	80056ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e1c7      	b.n	8005a5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ca:	4b3b      	ldr	r3, [pc, #236]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	4937      	ldr	r1, [pc, #220]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056de:	e03a      	b.n	8005756 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d020      	beq.n	800572a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056e8:	4b34      	ldr	r3, [pc, #208]	; (80057bc <HAL_RCC_OscConfig+0x244>)
 80056ea:	2201      	movs	r2, #1
 80056ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ee:	f7fd fe11 	bl	8003314 <HAL_GetTick>
 80056f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056f4:	e008      	b.n	8005708 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056f6:	f7fd fe0d 	bl	8003314 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d901      	bls.n	8005708 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e1a8      	b.n	8005a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005708:	4b2b      	ldr	r3, [pc, #172]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0f0      	beq.n	80056f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005714:	4b28      	ldr	r3, [pc, #160]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	00db      	lsls	r3, r3, #3
 8005722:	4925      	ldr	r1, [pc, #148]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 8005724:	4313      	orrs	r3, r2
 8005726:	600b      	str	r3, [r1, #0]
 8005728:	e015      	b.n	8005756 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800572a:	4b24      	ldr	r3, [pc, #144]	; (80057bc <HAL_RCC_OscConfig+0x244>)
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005730:	f7fd fdf0 	bl	8003314 <HAL_GetTick>
 8005734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005736:	e008      	b.n	800574a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005738:	f7fd fdec 	bl	8003314 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e187      	b.n	8005a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800574a:	4b1b      	ldr	r3, [pc, #108]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1f0      	bne.n	8005738 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0308 	and.w	r3, r3, #8
 800575e:	2b00      	cmp	r3, #0
 8005760:	d036      	beq.n	80057d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d016      	beq.n	8005798 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800576a:	4b15      	ldr	r3, [pc, #84]	; (80057c0 <HAL_RCC_OscConfig+0x248>)
 800576c:	2201      	movs	r2, #1
 800576e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005770:	f7fd fdd0 	bl	8003314 <HAL_GetTick>
 8005774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005776:	e008      	b.n	800578a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005778:	f7fd fdcc 	bl	8003314 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e167      	b.n	8005a5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800578a:	4b0b      	ldr	r3, [pc, #44]	; (80057b8 <HAL_RCC_OscConfig+0x240>)
 800578c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d0f0      	beq.n	8005778 <HAL_RCC_OscConfig+0x200>
 8005796:	e01b      	b.n	80057d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005798:	4b09      	ldr	r3, [pc, #36]	; (80057c0 <HAL_RCC_OscConfig+0x248>)
 800579a:	2200      	movs	r2, #0
 800579c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800579e:	f7fd fdb9 	bl	8003314 <HAL_GetTick>
 80057a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057a4:	e00e      	b.n	80057c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057a6:	f7fd fdb5 	bl	8003314 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d907      	bls.n	80057c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e150      	b.n	8005a5a <HAL_RCC_OscConfig+0x4e2>
 80057b8:	40023800 	.word	0x40023800
 80057bc:	42470000 	.word	0x42470000
 80057c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057c4:	4b88      	ldr	r3, [pc, #544]	; (80059e8 <HAL_RCC_OscConfig+0x470>)
 80057c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1ea      	bne.n	80057a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 8097 	beq.w	800590c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057de:	2300      	movs	r3, #0
 80057e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057e2:	4b81      	ldr	r3, [pc, #516]	; (80059e8 <HAL_RCC_OscConfig+0x470>)
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10f      	bne.n	800580e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ee:	2300      	movs	r3, #0
 80057f0:	60bb      	str	r3, [r7, #8]
 80057f2:	4b7d      	ldr	r3, [pc, #500]	; (80059e8 <HAL_RCC_OscConfig+0x470>)
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	4a7c      	ldr	r2, [pc, #496]	; (80059e8 <HAL_RCC_OscConfig+0x470>)
 80057f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057fc:	6413      	str	r3, [r2, #64]	; 0x40
 80057fe:	4b7a      	ldr	r3, [pc, #488]	; (80059e8 <HAL_RCC_OscConfig+0x470>)
 8005800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005806:	60bb      	str	r3, [r7, #8]
 8005808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800580a:	2301      	movs	r3, #1
 800580c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800580e:	4b77      	ldr	r3, [pc, #476]	; (80059ec <HAL_RCC_OscConfig+0x474>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005816:	2b00      	cmp	r3, #0
 8005818:	d118      	bne.n	800584c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800581a:	4b74      	ldr	r3, [pc, #464]	; (80059ec <HAL_RCC_OscConfig+0x474>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a73      	ldr	r2, [pc, #460]	; (80059ec <HAL_RCC_OscConfig+0x474>)
 8005820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005826:	f7fd fd75 	bl	8003314 <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800582c:	e008      	b.n	8005840 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800582e:	f7fd fd71 	bl	8003314 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e10c      	b.n	8005a5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005840:	4b6a      	ldr	r3, [pc, #424]	; (80059ec <HAL_RCC_OscConfig+0x474>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0f0      	beq.n	800582e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d106      	bne.n	8005862 <HAL_RCC_OscConfig+0x2ea>
 8005854:	4b64      	ldr	r3, [pc, #400]	; (80059e8 <HAL_RCC_OscConfig+0x470>)
 8005856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005858:	4a63      	ldr	r2, [pc, #396]	; (80059e8 <HAL_RCC_OscConfig+0x470>)
 800585a:	f043 0301 	orr.w	r3, r3, #1
 800585e:	6713      	str	r3, [r2, #112]	; 0x70
 8005860:	e01c      	b.n	800589c <HAL_RCC_OscConfig+0x324>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	2b05      	cmp	r3, #5
 8005868:	d10c      	bne.n	8005884 <HAL_RCC_OscConfig+0x30c>
 800586a:	4b5f      	ldr	r3, [pc, #380]	; (80059e8 <HAL_RCC_OscConfig+0x470>)
 800586c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586e:	4a5e      	ldr	r2, [pc, #376]	; (80059e8 <HAL_RCC_OscConfig+0x470>)
 8005870:	f043 0304 	orr.w	r3, r3, #4
 8005874:	6713      	str	r3, [r2, #112]	; 0x70
 8005876:	4b5c      	ldr	r3, [pc, #368]	; (80059e8 <HAL_RCC_OscConfig+0x470>)
 8005878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587a:	4a5b      	ldr	r2, [pc, #364]	; (80059e8 <HAL_RCC_OscConfig+0x470>)
 800587c:	f043 0301 	orr.w	r3, r3, #1
 8005880:	6713      	str	r3, [r2, #112]	; 0x70
 8005882:	e00b      	b.n	800589c <HAL_RCC_OscConfig+0x324>
 8005884:	4b58      	ldr	r3, [pc, #352]	; (80059e8 <HAL_RCC_OscConfig+0x470>)
 8005886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005888:	4a57      	ldr	r2, [pc, #348]	; (80059e8 <HAL_RCC_OscConfig+0x470>)
 800588a:	f023 0301 	bic.w	r3, r3, #1
 800588e:	6713      	str	r3, [r2, #112]	; 0x70
 8005890:	4b55      	ldr	r3, [pc, #340]	; (80059e8 <HAL_RCC_OscConfig+0x470>)
 8005892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005894:	4a54      	ldr	r2, [pc, #336]	; (80059e8 <HAL_RCC_OscConfig+0x470>)
 8005896:	f023 0304 	bic.w	r3, r3, #4
 800589a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d015      	beq.n	80058d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a4:	f7fd fd36 	bl	8003314 <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058aa:	e00a      	b.n	80058c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058ac:	f7fd fd32 	bl	8003314 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e0cb      	b.n	8005a5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058c2:	4b49      	ldr	r3, [pc, #292]	; (80059e8 <HAL_RCC_OscConfig+0x470>)
 80058c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d0ee      	beq.n	80058ac <HAL_RCC_OscConfig+0x334>
 80058ce:	e014      	b.n	80058fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058d0:	f7fd fd20 	bl	8003314 <HAL_GetTick>
 80058d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058d6:	e00a      	b.n	80058ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058d8:	f7fd fd1c 	bl	8003314 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e0b5      	b.n	8005a5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058ee:	4b3e      	ldr	r3, [pc, #248]	; (80059e8 <HAL_RCC_OscConfig+0x470>)
 80058f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1ee      	bne.n	80058d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058fa:	7dfb      	ldrb	r3, [r7, #23]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d105      	bne.n	800590c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005900:	4b39      	ldr	r3, [pc, #228]	; (80059e8 <HAL_RCC_OscConfig+0x470>)
 8005902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005904:	4a38      	ldr	r2, [pc, #224]	; (80059e8 <HAL_RCC_OscConfig+0x470>)
 8005906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800590a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 80a1 	beq.w	8005a58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005916:	4b34      	ldr	r3, [pc, #208]	; (80059e8 <HAL_RCC_OscConfig+0x470>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f003 030c 	and.w	r3, r3, #12
 800591e:	2b08      	cmp	r3, #8
 8005920:	d05c      	beq.n	80059dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	2b02      	cmp	r3, #2
 8005928:	d141      	bne.n	80059ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800592a:	4b31      	ldr	r3, [pc, #196]	; (80059f0 <HAL_RCC_OscConfig+0x478>)
 800592c:	2200      	movs	r2, #0
 800592e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005930:	f7fd fcf0 	bl	8003314 <HAL_GetTick>
 8005934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005936:	e008      	b.n	800594a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005938:	f7fd fcec 	bl	8003314 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e087      	b.n	8005a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800594a:	4b27      	ldr	r3, [pc, #156]	; (80059e8 <HAL_RCC_OscConfig+0x470>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1f0      	bne.n	8005938 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	69da      	ldr	r2, [r3, #28]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	019b      	lsls	r3, r3, #6
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596c:	085b      	lsrs	r3, r3, #1
 800596e:	3b01      	subs	r3, #1
 8005970:	041b      	lsls	r3, r3, #16
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	061b      	lsls	r3, r3, #24
 800597a:	491b      	ldr	r1, [pc, #108]	; (80059e8 <HAL_RCC_OscConfig+0x470>)
 800597c:	4313      	orrs	r3, r2
 800597e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005980:	4b1b      	ldr	r3, [pc, #108]	; (80059f0 <HAL_RCC_OscConfig+0x478>)
 8005982:	2201      	movs	r2, #1
 8005984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005986:	f7fd fcc5 	bl	8003314 <HAL_GetTick>
 800598a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800598c:	e008      	b.n	80059a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800598e:	f7fd fcc1 	bl	8003314 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e05c      	b.n	8005a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059a0:	4b11      	ldr	r3, [pc, #68]	; (80059e8 <HAL_RCC_OscConfig+0x470>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0f0      	beq.n	800598e <HAL_RCC_OscConfig+0x416>
 80059ac:	e054      	b.n	8005a58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ae:	4b10      	ldr	r3, [pc, #64]	; (80059f0 <HAL_RCC_OscConfig+0x478>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b4:	f7fd fcae 	bl	8003314 <HAL_GetTick>
 80059b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ba:	e008      	b.n	80059ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059bc:	f7fd fcaa 	bl	8003314 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e045      	b.n	8005a5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ce:	4b06      	ldr	r3, [pc, #24]	; (80059e8 <HAL_RCC_OscConfig+0x470>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1f0      	bne.n	80059bc <HAL_RCC_OscConfig+0x444>
 80059da:	e03d      	b.n	8005a58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d107      	bne.n	80059f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e038      	b.n	8005a5a <HAL_RCC_OscConfig+0x4e2>
 80059e8:	40023800 	.word	0x40023800
 80059ec:	40007000 	.word	0x40007000
 80059f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059f4:	4b1b      	ldr	r3, [pc, #108]	; (8005a64 <HAL_RCC_OscConfig+0x4ec>)
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d028      	beq.n	8005a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d121      	bne.n	8005a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d11a      	bne.n	8005a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a24:	4013      	ands	r3, r2
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d111      	bne.n	8005a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3a:	085b      	lsrs	r3, r3, #1
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d107      	bne.n	8005a54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d001      	beq.n	8005a58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e000      	b.n	8005a5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3718      	adds	r7, #24
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	40023800 	.word	0x40023800

08005a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e0cc      	b.n	8005c16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a7c:	4b68      	ldr	r3, [pc, #416]	; (8005c20 <HAL_RCC_ClockConfig+0x1b8>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 030f 	and.w	r3, r3, #15
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d90c      	bls.n	8005aa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a8a:	4b65      	ldr	r3, [pc, #404]	; (8005c20 <HAL_RCC_ClockConfig+0x1b8>)
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a92:	4b63      	ldr	r3, [pc, #396]	; (8005c20 <HAL_RCC_ClockConfig+0x1b8>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 030f 	and.w	r3, r3, #15
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d001      	beq.n	8005aa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e0b8      	b.n	8005c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d020      	beq.n	8005af2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0304 	and.w	r3, r3, #4
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d005      	beq.n	8005ac8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005abc:	4b59      	ldr	r3, [pc, #356]	; (8005c24 <HAL_RCC_ClockConfig+0x1bc>)
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	4a58      	ldr	r2, [pc, #352]	; (8005c24 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ac6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0308 	and.w	r3, r3, #8
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d005      	beq.n	8005ae0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ad4:	4b53      	ldr	r3, [pc, #332]	; (8005c24 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	4a52      	ldr	r2, [pc, #328]	; (8005c24 <HAL_RCC_ClockConfig+0x1bc>)
 8005ada:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ade:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ae0:	4b50      	ldr	r3, [pc, #320]	; (8005c24 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	494d      	ldr	r1, [pc, #308]	; (8005c24 <HAL_RCC_ClockConfig+0x1bc>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d044      	beq.n	8005b88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d107      	bne.n	8005b16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b06:	4b47      	ldr	r3, [pc, #284]	; (8005c24 <HAL_RCC_ClockConfig+0x1bc>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d119      	bne.n	8005b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e07f      	b.n	8005c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d003      	beq.n	8005b26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b22:	2b03      	cmp	r3, #3
 8005b24:	d107      	bne.n	8005b36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b26:	4b3f      	ldr	r3, [pc, #252]	; (8005c24 <HAL_RCC_ClockConfig+0x1bc>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d109      	bne.n	8005b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e06f      	b.n	8005c16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b36:	4b3b      	ldr	r3, [pc, #236]	; (8005c24 <HAL_RCC_ClockConfig+0x1bc>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e067      	b.n	8005c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b46:	4b37      	ldr	r3, [pc, #220]	; (8005c24 <HAL_RCC_ClockConfig+0x1bc>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f023 0203 	bic.w	r2, r3, #3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	4934      	ldr	r1, [pc, #208]	; (8005c24 <HAL_RCC_ClockConfig+0x1bc>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b58:	f7fd fbdc 	bl	8003314 <HAL_GetTick>
 8005b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b5e:	e00a      	b.n	8005b76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b60:	f7fd fbd8 	bl	8003314 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e04f      	b.n	8005c16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b76:	4b2b      	ldr	r3, [pc, #172]	; (8005c24 <HAL_RCC_ClockConfig+0x1bc>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f003 020c 	and.w	r2, r3, #12
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d1eb      	bne.n	8005b60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b88:	4b25      	ldr	r3, [pc, #148]	; (8005c20 <HAL_RCC_ClockConfig+0x1b8>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 030f 	and.w	r3, r3, #15
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d20c      	bcs.n	8005bb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b96:	4b22      	ldr	r3, [pc, #136]	; (8005c20 <HAL_RCC_ClockConfig+0x1b8>)
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	b2d2      	uxtb	r2, r2
 8005b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b9e:	4b20      	ldr	r3, [pc, #128]	; (8005c20 <HAL_RCC_ClockConfig+0x1b8>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 030f 	and.w	r3, r3, #15
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d001      	beq.n	8005bb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e032      	b.n	8005c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d008      	beq.n	8005bce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bbc:	4b19      	ldr	r3, [pc, #100]	; (8005c24 <HAL_RCC_ClockConfig+0x1bc>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	4916      	ldr	r1, [pc, #88]	; (8005c24 <HAL_RCC_ClockConfig+0x1bc>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0308 	and.w	r3, r3, #8
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d009      	beq.n	8005bee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bda:	4b12      	ldr	r3, [pc, #72]	; (8005c24 <HAL_RCC_ClockConfig+0x1bc>)
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	490e      	ldr	r1, [pc, #56]	; (8005c24 <HAL_RCC_ClockConfig+0x1bc>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005bee:	f000 f821 	bl	8005c34 <HAL_RCC_GetSysClockFreq>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	4b0b      	ldr	r3, [pc, #44]	; (8005c24 <HAL_RCC_ClockConfig+0x1bc>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	091b      	lsrs	r3, r3, #4
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	490a      	ldr	r1, [pc, #40]	; (8005c28 <HAL_RCC_ClockConfig+0x1c0>)
 8005c00:	5ccb      	ldrb	r3, [r1, r3]
 8005c02:	fa22 f303 	lsr.w	r3, r2, r3
 8005c06:	4a09      	ldr	r2, [pc, #36]	; (8005c2c <HAL_RCC_ClockConfig+0x1c4>)
 8005c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c0a:	4b09      	ldr	r3, [pc, #36]	; (8005c30 <HAL_RCC_ClockConfig+0x1c8>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7fd f8a0 	bl	8002d54 <HAL_InitTick>

  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	40023c00 	.word	0x40023c00
 8005c24:	40023800 	.word	0x40023800
 8005c28:	0800d068 	.word	0x0800d068
 8005c2c:	200000ac 	.word	0x200000ac
 8005c30:	200000b0 	.word	0x200000b0

08005c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c38:	b094      	sub	sp, #80	; 0x50
 8005c3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c40:	2300      	movs	r3, #0
 8005c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c44:	2300      	movs	r3, #0
 8005c46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c4c:	4b79      	ldr	r3, [pc, #484]	; (8005e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f003 030c 	and.w	r3, r3, #12
 8005c54:	2b08      	cmp	r3, #8
 8005c56:	d00d      	beq.n	8005c74 <HAL_RCC_GetSysClockFreq+0x40>
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	f200 80e1 	bhi.w	8005e20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d002      	beq.n	8005c68 <HAL_RCC_GetSysClockFreq+0x34>
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	d003      	beq.n	8005c6e <HAL_RCC_GetSysClockFreq+0x3a>
 8005c66:	e0db      	b.n	8005e20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c68:	4b73      	ldr	r3, [pc, #460]	; (8005e38 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c6a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005c6c:	e0db      	b.n	8005e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c6e:	4b73      	ldr	r3, [pc, #460]	; (8005e3c <HAL_RCC_GetSysClockFreq+0x208>)
 8005c70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c72:	e0d8      	b.n	8005e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c74:	4b6f      	ldr	r3, [pc, #444]	; (8005e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c7c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c7e:	4b6d      	ldr	r3, [pc, #436]	; (8005e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d063      	beq.n	8005d52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c8a:	4b6a      	ldr	r3, [pc, #424]	; (8005e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	099b      	lsrs	r3, r3, #6
 8005c90:	2200      	movs	r2, #0
 8005c92:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c9c:	633b      	str	r3, [r7, #48]	; 0x30
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ca2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005ca6:	4622      	mov	r2, r4
 8005ca8:	462b      	mov	r3, r5
 8005caa:	f04f 0000 	mov.w	r0, #0
 8005cae:	f04f 0100 	mov.w	r1, #0
 8005cb2:	0159      	lsls	r1, r3, #5
 8005cb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cb8:	0150      	lsls	r0, r2, #5
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4621      	mov	r1, r4
 8005cc0:	1a51      	subs	r1, r2, r1
 8005cc2:	6139      	str	r1, [r7, #16]
 8005cc4:	4629      	mov	r1, r5
 8005cc6:	eb63 0301 	sbc.w	r3, r3, r1
 8005cca:	617b      	str	r3, [r7, #20]
 8005ccc:	f04f 0200 	mov.w	r2, #0
 8005cd0:	f04f 0300 	mov.w	r3, #0
 8005cd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005cd8:	4659      	mov	r1, fp
 8005cda:	018b      	lsls	r3, r1, #6
 8005cdc:	4651      	mov	r1, sl
 8005cde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ce2:	4651      	mov	r1, sl
 8005ce4:	018a      	lsls	r2, r1, #6
 8005ce6:	4651      	mov	r1, sl
 8005ce8:	ebb2 0801 	subs.w	r8, r2, r1
 8005cec:	4659      	mov	r1, fp
 8005cee:	eb63 0901 	sbc.w	r9, r3, r1
 8005cf2:	f04f 0200 	mov.w	r2, #0
 8005cf6:	f04f 0300 	mov.w	r3, #0
 8005cfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d06:	4690      	mov	r8, r2
 8005d08:	4699      	mov	r9, r3
 8005d0a:	4623      	mov	r3, r4
 8005d0c:	eb18 0303 	adds.w	r3, r8, r3
 8005d10:	60bb      	str	r3, [r7, #8]
 8005d12:	462b      	mov	r3, r5
 8005d14:	eb49 0303 	adc.w	r3, r9, r3
 8005d18:	60fb      	str	r3, [r7, #12]
 8005d1a:	f04f 0200 	mov.w	r2, #0
 8005d1e:	f04f 0300 	mov.w	r3, #0
 8005d22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005d26:	4629      	mov	r1, r5
 8005d28:	024b      	lsls	r3, r1, #9
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005d30:	4621      	mov	r1, r4
 8005d32:	024a      	lsls	r2, r1, #9
 8005d34:	4610      	mov	r0, r2
 8005d36:	4619      	mov	r1, r3
 8005d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d44:	f7fa fa54 	bl	80001f0 <__aeabi_uldivmod>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d50:	e058      	b.n	8005e04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d52:	4b38      	ldr	r3, [pc, #224]	; (8005e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	099b      	lsrs	r3, r3, #6
 8005d58:	2200      	movs	r2, #0
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d62:	623b      	str	r3, [r7, #32]
 8005d64:	2300      	movs	r3, #0
 8005d66:	627b      	str	r3, [r7, #36]	; 0x24
 8005d68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005d6c:	4642      	mov	r2, r8
 8005d6e:	464b      	mov	r3, r9
 8005d70:	f04f 0000 	mov.w	r0, #0
 8005d74:	f04f 0100 	mov.w	r1, #0
 8005d78:	0159      	lsls	r1, r3, #5
 8005d7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d7e:	0150      	lsls	r0, r2, #5
 8005d80:	4602      	mov	r2, r0
 8005d82:	460b      	mov	r3, r1
 8005d84:	4641      	mov	r1, r8
 8005d86:	ebb2 0a01 	subs.w	sl, r2, r1
 8005d8a:	4649      	mov	r1, r9
 8005d8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d90:	f04f 0200 	mov.w	r2, #0
 8005d94:	f04f 0300 	mov.w	r3, #0
 8005d98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005da0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005da4:	ebb2 040a 	subs.w	r4, r2, sl
 8005da8:	eb63 050b 	sbc.w	r5, r3, fp
 8005dac:	f04f 0200 	mov.w	r2, #0
 8005db0:	f04f 0300 	mov.w	r3, #0
 8005db4:	00eb      	lsls	r3, r5, #3
 8005db6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005dba:	00e2      	lsls	r2, r4, #3
 8005dbc:	4614      	mov	r4, r2
 8005dbe:	461d      	mov	r5, r3
 8005dc0:	4643      	mov	r3, r8
 8005dc2:	18e3      	adds	r3, r4, r3
 8005dc4:	603b      	str	r3, [r7, #0]
 8005dc6:	464b      	mov	r3, r9
 8005dc8:	eb45 0303 	adc.w	r3, r5, r3
 8005dcc:	607b      	str	r3, [r7, #4]
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	f04f 0300 	mov.w	r3, #0
 8005dd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005dda:	4629      	mov	r1, r5
 8005ddc:	028b      	lsls	r3, r1, #10
 8005dde:	4621      	mov	r1, r4
 8005de0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005de4:	4621      	mov	r1, r4
 8005de6:	028a      	lsls	r2, r1, #10
 8005de8:	4610      	mov	r0, r2
 8005dea:	4619      	mov	r1, r3
 8005dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dee:	2200      	movs	r2, #0
 8005df0:	61bb      	str	r3, [r7, #24]
 8005df2:	61fa      	str	r2, [r7, #28]
 8005df4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005df8:	f7fa f9fa 	bl	80001f0 <__aeabi_uldivmod>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4613      	mov	r3, r2
 8005e02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e04:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	0c1b      	lsrs	r3, r3, #16
 8005e0a:	f003 0303 	and.w	r3, r3, #3
 8005e0e:	3301      	adds	r3, #1
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005e14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e1e:	e002      	b.n	8005e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e20:	4b05      	ldr	r3, [pc, #20]	; (8005e38 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3750      	adds	r7, #80	; 0x50
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e32:	bf00      	nop
 8005e34:	40023800 	.word	0x40023800
 8005e38:	00f42400 	.word	0x00f42400
 8005e3c:	007a1200 	.word	0x007a1200

08005e40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e40:	b480      	push	{r7}
 8005e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e44:	4b03      	ldr	r3, [pc, #12]	; (8005e54 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e46:	681b      	ldr	r3, [r3, #0]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	200000ac 	.word	0x200000ac

08005e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e5c:	f7ff fff0 	bl	8005e40 <HAL_RCC_GetHCLKFreq>
 8005e60:	4602      	mov	r2, r0
 8005e62:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	0a9b      	lsrs	r3, r3, #10
 8005e68:	f003 0307 	and.w	r3, r3, #7
 8005e6c:	4903      	ldr	r1, [pc, #12]	; (8005e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e6e:	5ccb      	ldrb	r3, [r1, r3]
 8005e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	40023800 	.word	0x40023800
 8005e7c:	0800d078 	.word	0x0800d078

08005e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e84:	f7ff ffdc 	bl	8005e40 <HAL_RCC_GetHCLKFreq>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	4b05      	ldr	r3, [pc, #20]	; (8005ea0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	0b5b      	lsrs	r3, r3, #13
 8005e90:	f003 0307 	and.w	r3, r3, #7
 8005e94:	4903      	ldr	r1, [pc, #12]	; (8005ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e96:	5ccb      	ldrb	r3, [r1, r3]
 8005e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	40023800 	.word	0x40023800
 8005ea4:	0800d078 	.word	0x0800d078

08005ea8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	220f      	movs	r2, #15
 8005eb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005eb8:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <HAL_RCC_GetClockConfig+0x5c>)
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f003 0203 	and.w	r2, r3, #3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005ec4:	4b0f      	ldr	r3, [pc, #60]	; (8005f04 <HAL_RCC_GetClockConfig+0x5c>)
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ed0:	4b0c      	ldr	r3, [pc, #48]	; (8005f04 <HAL_RCC_GetClockConfig+0x5c>)
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005edc:	4b09      	ldr	r3, [pc, #36]	; (8005f04 <HAL_RCC_GetClockConfig+0x5c>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	08db      	lsrs	r3, r3, #3
 8005ee2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005eea:	4b07      	ldr	r3, [pc, #28]	; (8005f08 <HAL_RCC_GetClockConfig+0x60>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 020f 	and.w	r2, r3, #15
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	601a      	str	r2, [r3, #0]
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	40023800 	.word	0x40023800
 8005f08:	40023c00 	.word	0x40023c00

08005f0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10b      	bne.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d105      	bne.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d075      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f40:	4b91      	ldr	r3, [pc, #580]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f46:	f7fd f9e5 	bl	8003314 <HAL_GetTick>
 8005f4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f4c:	e008      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f4e:	f7fd f9e1 	bl	8003314 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d901      	bls.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e189      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f60:	4b8a      	ldr	r3, [pc, #552]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1f0      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d009      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	019a      	lsls	r2, r3, #6
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	071b      	lsls	r3, r3, #28
 8005f84:	4981      	ldr	r1, [pc, #516]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0302 	and.w	r3, r3, #2
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d01f      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f98:	4b7c      	ldr	r3, [pc, #496]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f9e:	0f1b      	lsrs	r3, r3, #28
 8005fa0:	f003 0307 	and.w	r3, r3, #7
 8005fa4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	019a      	lsls	r2, r3, #6
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	061b      	lsls	r3, r3, #24
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	071b      	lsls	r3, r3, #28
 8005fb8:	4974      	ldr	r1, [pc, #464]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005fc0:	4b72      	ldr	r3, [pc, #456]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fc6:	f023 021f 	bic.w	r2, r3, #31
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	496e      	ldr	r1, [pc, #440]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00d      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	019a      	lsls	r2, r3, #6
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	061b      	lsls	r3, r3, #24
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	071b      	lsls	r3, r3, #28
 8005ff8:	4964      	ldr	r1, [pc, #400]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006000:	4b61      	ldr	r3, [pc, #388]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006002:	2201      	movs	r2, #1
 8006004:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006006:	f7fd f985 	bl	8003314 <HAL_GetTick>
 800600a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800600c:	e008      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800600e:	f7fd f981 	bl	8003314 <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	2b02      	cmp	r3, #2
 800601a:	d901      	bls.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e129      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006020:	4b5a      	ldr	r3, [pc, #360]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d0f0      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0304 	and.w	r3, r3, #4
 8006034:	2b00      	cmp	r3, #0
 8006036:	d105      	bne.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006040:	2b00      	cmp	r3, #0
 8006042:	d079      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006044:	4b52      	ldr	r3, [pc, #328]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006046:	2200      	movs	r2, #0
 8006048:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800604a:	f7fd f963 	bl	8003314 <HAL_GetTick>
 800604e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006050:	e008      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006052:	f7fd f95f 	bl	8003314 <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	2b02      	cmp	r3, #2
 800605e:	d901      	bls.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e107      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006064:	4b49      	ldr	r3, [pc, #292]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800606c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006070:	d0ef      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0304 	and.w	r3, r3, #4
 800607a:	2b00      	cmp	r3, #0
 800607c:	d020      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800607e:	4b43      	ldr	r3, [pc, #268]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006084:	0f1b      	lsrs	r3, r3, #28
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	019a      	lsls	r2, r3, #6
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	061b      	lsls	r3, r3, #24
 8006098:	431a      	orrs	r2, r3
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	071b      	lsls	r3, r3, #28
 800609e:	493b      	ldr	r1, [pc, #236]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80060a6:	4b39      	ldr	r3, [pc, #228]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	021b      	lsls	r3, r3, #8
 80060b8:	4934      	ldr	r1, [pc, #208]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0308 	and.w	r3, r3, #8
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d01e      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80060cc:	4b2f      	ldr	r3, [pc, #188]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d2:	0e1b      	lsrs	r3, r3, #24
 80060d4:	f003 030f 	and.w	r3, r3, #15
 80060d8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	019a      	lsls	r2, r3, #6
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	061b      	lsls	r3, r3, #24
 80060e4:	431a      	orrs	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	071b      	lsls	r3, r3, #28
 80060ec:	4927      	ldr	r1, [pc, #156]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80060f4:	4b25      	ldr	r3, [pc, #148]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006102:	4922      	ldr	r1, [pc, #136]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006104:	4313      	orrs	r3, r2
 8006106:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800610a:	4b21      	ldr	r3, [pc, #132]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800610c:	2201      	movs	r2, #1
 800610e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006110:	f7fd f900 	bl	8003314 <HAL_GetTick>
 8006114:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006116:	e008      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006118:	f7fd f8fc 	bl	8003314 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	2b02      	cmp	r3, #2
 8006124:	d901      	bls.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e0a4      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800612a:	4b18      	ldr	r3, [pc, #96]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006136:	d1ef      	bne.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0320 	and.w	r3, r3, #32
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 808b 	beq.w	800625c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006146:	2300      	movs	r3, #0
 8006148:	60fb      	str	r3, [r7, #12]
 800614a:	4b10      	ldr	r3, [pc, #64]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	4a0f      	ldr	r2, [pc, #60]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006154:	6413      	str	r3, [r2, #64]	; 0x40
 8006156:	4b0d      	ldr	r3, [pc, #52]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006162:	4b0c      	ldr	r3, [pc, #48]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a0b      	ldr	r2, [pc, #44]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800616c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800616e:	f7fd f8d1 	bl	8003314 <HAL_GetTick>
 8006172:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006174:	e010      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006176:	f7fd f8cd 	bl	8003314 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d909      	bls.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e075      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006188:	42470068 	.word	0x42470068
 800618c:	40023800 	.word	0x40023800
 8006190:	42470070 	.word	0x42470070
 8006194:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006198:	4b38      	ldr	r3, [pc, #224]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d0e8      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061a4:	4b36      	ldr	r3, [pc, #216]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ac:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d02f      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d028      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061c2:	4b2f      	ldr	r3, [pc, #188]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061cc:	4b2d      	ldr	r3, [pc, #180]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80061ce:	2201      	movs	r2, #1
 80061d0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061d2:	4b2c      	ldr	r3, [pc, #176]	; (8006284 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80061d8:	4a29      	ldr	r2, [pc, #164]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80061de:	4b28      	ldr	r3, [pc, #160]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d114      	bne.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80061ea:	f7fd f893 	bl	8003314 <HAL_GetTick>
 80061ee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061f0:	e00a      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061f2:	f7fd f88f 	bl	8003314 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006200:	4293      	cmp	r3, r2
 8006202:	d901      	bls.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e035      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006208:	4b1d      	ldr	r3, [pc, #116]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800620a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620c:	f003 0302 	and.w	r3, r3, #2
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0ee      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800621c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006220:	d10d      	bne.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006222:	4b17      	ldr	r3, [pc, #92]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006236:	4912      	ldr	r1, [pc, #72]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006238:	4313      	orrs	r3, r2
 800623a:	608b      	str	r3, [r1, #8]
 800623c:	e005      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800623e:	4b10      	ldr	r3, [pc, #64]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	4a0f      	ldr	r2, [pc, #60]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006244:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006248:	6093      	str	r3, [r2, #8]
 800624a:	4b0d      	ldr	r3, [pc, #52]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800624c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006256:	490a      	ldr	r1, [pc, #40]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006258:	4313      	orrs	r3, r2
 800625a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0310 	and.w	r3, r3, #16
 8006264:	2b00      	cmp	r3, #0
 8006266:	d004      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800626e:	4b06      	ldr	r3, [pc, #24]	; (8006288 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006270:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3718      	adds	r7, #24
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	40007000 	.word	0x40007000
 8006280:	40023800 	.word	0x40023800
 8006284:	42470e40 	.word	0x42470e40
 8006288:	424711e0 	.word	0x424711e0

0800628c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e066      	b.n	8006370 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	7f5b      	ldrb	r3, [r3, #29]
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d105      	bne.n	80062b8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7fc fae6 	bl	8002884 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2202      	movs	r2, #2
 80062bc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	22ca      	movs	r2, #202	; 0xca
 80062c4:	625a      	str	r2, [r3, #36]	; 0x24
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2253      	movs	r2, #83	; 0x53
 80062cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f998 	bl	8006604 <RTC_EnterInitMode>
 80062d4:	4603      	mov	r3, r0
 80062d6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d12c      	bne.n	8006338 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	6812      	ldr	r2, [r2, #0]
 80062e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80062ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062f0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6899      	ldr	r1, [r3, #8]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	431a      	orrs	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	431a      	orrs	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	68d2      	ldr	r2, [r2, #12]
 8006318:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6919      	ldr	r1, [r3, #16]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	041a      	lsls	r2, r3, #16
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f99f 	bl	8006672 <RTC_ExitInitMode>
 8006334:	4603      	mov	r3, r0
 8006336:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006338:	7bfb      	ldrb	r3, [r7, #15]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d113      	bne.n	8006366 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800634c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	699a      	ldr	r2, [r3, #24]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	22ff      	movs	r2, #255	; 0xff
 800636c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800636e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006378:	b590      	push	{r4, r7, lr}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	7f1b      	ldrb	r3, [r3, #28]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d101      	bne.n	8006394 <HAL_RTC_SetTime+0x1c>
 8006390:	2302      	movs	r3, #2
 8006392:	e087      	b.n	80064a4 <HAL_RTC_SetTime+0x12c>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2201      	movs	r2, #1
 8006398:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2202      	movs	r2, #2
 800639e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d126      	bne.n	80063f4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d102      	bne.n	80063ba <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2200      	movs	r2, #0
 80063b8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 f97c 	bl	80066bc <RTC_ByteToBcd2>
 80063c4:	4603      	mov	r3, r0
 80063c6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	785b      	ldrb	r3, [r3, #1]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 f975 	bl	80066bc <RTC_ByteToBcd2>
 80063d2:	4603      	mov	r3, r0
 80063d4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80063d6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	789b      	ldrb	r3, [r3, #2]
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 f96d 	bl	80066bc <RTC_ByteToBcd2>
 80063e2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80063e4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	78db      	ldrb	r3, [r3, #3]
 80063ec:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80063ee:	4313      	orrs	r3, r2
 80063f0:	617b      	str	r3, [r7, #20]
 80063f2:	e018      	b.n	8006426 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d102      	bne.n	8006408 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2200      	movs	r2, #0
 8006406:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	785b      	ldrb	r3, [r3, #1]
 8006412:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006414:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800641a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	78db      	ldrb	r3, [r3, #3]
 8006420:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006422:	4313      	orrs	r3, r2
 8006424:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	22ca      	movs	r2, #202	; 0xca
 800642c:	625a      	str	r2, [r3, #36]	; 0x24
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2253      	movs	r2, #83	; 0x53
 8006434:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f000 f8e4 	bl	8006604 <RTC_EnterInitMode>
 800643c:	4603      	mov	r3, r0
 800643e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006440:	7cfb      	ldrb	r3, [r7, #19]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d120      	bne.n	8006488 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006450:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006454:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	689a      	ldr	r2, [r3, #8]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006464:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6899      	ldr	r1, [r3, #8]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	68da      	ldr	r2, [r3, #12]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	431a      	orrs	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 f8f7 	bl	8006672 <RTC_ExitInitMode>
 8006484:	4603      	mov	r3, r0
 8006486:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006488:	7cfb      	ldrb	r3, [r7, #19]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d102      	bne.n	8006494 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2201      	movs	r2, #1
 8006492:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	22ff      	movs	r2, #255	; 0xff
 800649a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	771a      	strb	r2, [r3, #28]

  return status;
 80064a2:	7cfb      	ldrb	r3, [r7, #19]
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	371c      	adds	r7, #28
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd90      	pop	{r4, r7, pc}

080064ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80064ac:	b590      	push	{r4, r7, lr}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	7f1b      	ldrb	r3, [r3, #28]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d101      	bne.n	80064c8 <HAL_RTC_SetDate+0x1c>
 80064c4:	2302      	movs	r3, #2
 80064c6:	e071      	b.n	80065ac <HAL_RTC_SetDate+0x100>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2201      	movs	r2, #1
 80064cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2202      	movs	r2, #2
 80064d2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10e      	bne.n	80064f8 <HAL_RTC_SetDate+0x4c>
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	785b      	ldrb	r3, [r3, #1]
 80064de:	f003 0310 	and.w	r3, r3, #16
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d008      	beq.n	80064f8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	785b      	ldrb	r3, [r3, #1]
 80064ea:	f023 0310 	bic.w	r3, r3, #16
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	330a      	adds	r3, #10
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d11c      	bne.n	8006538 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	78db      	ldrb	r3, [r3, #3]
 8006502:	4618      	mov	r0, r3
 8006504:	f000 f8da 	bl	80066bc <RTC_ByteToBcd2>
 8006508:	4603      	mov	r3, r0
 800650a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	785b      	ldrb	r3, [r3, #1]
 8006510:	4618      	mov	r0, r3
 8006512:	f000 f8d3 	bl	80066bc <RTC_ByteToBcd2>
 8006516:	4603      	mov	r3, r0
 8006518:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800651a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	789b      	ldrb	r3, [r3, #2]
 8006520:	4618      	mov	r0, r3
 8006522:	f000 f8cb 	bl	80066bc <RTC_ByteToBcd2>
 8006526:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006528:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006532:	4313      	orrs	r3, r2
 8006534:	617b      	str	r3, [r7, #20]
 8006536:	e00e      	b.n	8006556 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	78db      	ldrb	r3, [r3, #3]
 800653c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	785b      	ldrb	r3, [r3, #1]
 8006542:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006544:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800654a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006552:	4313      	orrs	r3, r2
 8006554:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	22ca      	movs	r2, #202	; 0xca
 800655c:	625a      	str	r2, [r3, #36]	; 0x24
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2253      	movs	r2, #83	; 0x53
 8006564:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 f84c 	bl	8006604 <RTC_EnterInitMode>
 800656c:	4603      	mov	r3, r0
 800656e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006570:	7cfb      	ldrb	r3, [r7, #19]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10c      	bne.n	8006590 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006580:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006584:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f000 f873 	bl	8006672 <RTC_ExitInitMode>
 800658c:	4603      	mov	r3, r0
 800658e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006590:	7cfb      	ldrb	r3, [r7, #19]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d102      	bne.n	800659c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2201      	movs	r2, #1
 800659a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	22ff      	movs	r2, #255	; 0xff
 80065a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	771a      	strb	r2, [r3, #28]

  return status;
 80065aa:	7cfb      	ldrb	r3, [r7, #19]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	371c      	adds	r7, #28
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd90      	pop	{r4, r7, pc}

080065b4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065ce:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065d0:	f7fc fea0 	bl	8003314 <HAL_GetTick>
 80065d4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80065d6:	e009      	b.n	80065ec <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80065d8:	f7fc fe9c 	bl	8003314 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065e6:	d901      	bls.n	80065ec <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e007      	b.n	80065fc <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	f003 0320 	and.w	r3, r3, #32
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d0ee      	beq.n	80065d8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661e:	2b00      	cmp	r3, #0
 8006620:	d122      	bne.n	8006668 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68da      	ldr	r2, [r3, #12]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006630:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006632:	f7fc fe6f 	bl	8003314 <HAL_GetTick>
 8006636:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006638:	e00c      	b.n	8006654 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800663a:	f7fc fe6b 	bl	8003314 <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006648:	d904      	bls.n	8006654 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2204      	movs	r2, #4
 800664e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665e:	2b00      	cmp	r3, #0
 8006660:	d102      	bne.n	8006668 <RTC_EnterInitMode+0x64>
 8006662:	7bfb      	ldrb	r3, [r7, #15]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d1e8      	bne.n	800663a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006668:	7bfb      	ldrb	r3, [r7, #15]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b084      	sub	sp, #16
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68da      	ldr	r2, [r3, #12]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800668c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f003 0320 	and.w	r3, r3, #32
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10a      	bne.n	80066b2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f7ff ff89 	bl	80065b4 <HAL_RTC_WaitForSynchro>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d004      	beq.n	80066b2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2204      	movs	r2, #4
 80066ac:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	4603      	mov	r3, r0
 80066c4:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80066c6:	2300      	movs	r3, #0
 80066c8:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80066ca:	e005      	b.n	80066d8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
 80066ce:	3301      	adds	r3, #1
 80066d0:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80066d2:	79fb      	ldrb	r3, [r7, #7]
 80066d4:	3b0a      	subs	r3, #10
 80066d6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80066d8:	79fb      	ldrb	r3, [r7, #7]
 80066da:	2b09      	cmp	r3, #9
 80066dc:	d8f6      	bhi.n	80066cc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80066de:	7bfb      	ldrb	r3, [r7, #15]
 80066e0:	011b      	lsls	r3, r3, #4
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	79fb      	ldrb	r3, [r7, #7]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	b2db      	uxtb	r3, r3
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b082      	sub	sp, #8
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e041      	b.n	800678c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b00      	cmp	r3, #0
 8006712:	d106      	bne.n	8006722 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7fc f951 	bl	80029c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2202      	movs	r2, #2
 8006726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	3304      	adds	r3, #4
 8006732:	4619      	mov	r1, r3
 8006734:	4610      	mov	r0, r2
 8006736:	f000 ffd3 	bl	80076e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d001      	beq.n	80067ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e04e      	b.n	800684a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2202      	movs	r2, #2
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f042 0201 	orr.w	r2, r2, #1
 80067c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a23      	ldr	r2, [pc, #140]	; (8006858 <HAL_TIM_Base_Start_IT+0xc4>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d022      	beq.n	8006814 <HAL_TIM_Base_Start_IT+0x80>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d6:	d01d      	beq.n	8006814 <HAL_TIM_Base_Start_IT+0x80>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a1f      	ldr	r2, [pc, #124]	; (800685c <HAL_TIM_Base_Start_IT+0xc8>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d018      	beq.n	8006814 <HAL_TIM_Base_Start_IT+0x80>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a1e      	ldr	r2, [pc, #120]	; (8006860 <HAL_TIM_Base_Start_IT+0xcc>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d013      	beq.n	8006814 <HAL_TIM_Base_Start_IT+0x80>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a1c      	ldr	r2, [pc, #112]	; (8006864 <HAL_TIM_Base_Start_IT+0xd0>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d00e      	beq.n	8006814 <HAL_TIM_Base_Start_IT+0x80>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a1b      	ldr	r2, [pc, #108]	; (8006868 <HAL_TIM_Base_Start_IT+0xd4>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d009      	beq.n	8006814 <HAL_TIM_Base_Start_IT+0x80>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a19      	ldr	r2, [pc, #100]	; (800686c <HAL_TIM_Base_Start_IT+0xd8>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d004      	beq.n	8006814 <HAL_TIM_Base_Start_IT+0x80>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a18      	ldr	r2, [pc, #96]	; (8006870 <HAL_TIM_Base_Start_IT+0xdc>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d111      	bne.n	8006838 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f003 0307 	and.w	r3, r3, #7
 800681e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2b06      	cmp	r3, #6
 8006824:	d010      	beq.n	8006848 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f042 0201 	orr.w	r2, r2, #1
 8006834:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006836:	e007      	b.n	8006848 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f042 0201 	orr.w	r2, r2, #1
 8006846:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	40010000 	.word	0x40010000
 800685c:	40000400 	.word	0x40000400
 8006860:	40000800 	.word	0x40000800
 8006864:	40000c00 	.word	0x40000c00
 8006868:	40010400 	.word	0x40010400
 800686c:	40014000 	.word	0x40014000
 8006870:	40001800 	.word	0x40001800

08006874 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e041      	b.n	800690a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d106      	bne.n	80068a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7fc f81c 	bl	80028d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2202      	movs	r2, #2
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	3304      	adds	r3, #4
 80068b0:	4619      	mov	r1, r3
 80068b2:	4610      	mov	r0, r2
 80068b4:	f000 ff14 	bl	80076e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
	...

08006914 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d109      	bne.n	8006938 <HAL_TIM_PWM_Start+0x24>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b01      	cmp	r3, #1
 800692e:	bf14      	ite	ne
 8006930:	2301      	movne	r3, #1
 8006932:	2300      	moveq	r3, #0
 8006934:	b2db      	uxtb	r3, r3
 8006936:	e022      	b.n	800697e <HAL_TIM_PWM_Start+0x6a>
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2b04      	cmp	r3, #4
 800693c:	d109      	bne.n	8006952 <HAL_TIM_PWM_Start+0x3e>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b01      	cmp	r3, #1
 8006948:	bf14      	ite	ne
 800694a:	2301      	movne	r3, #1
 800694c:	2300      	moveq	r3, #0
 800694e:	b2db      	uxtb	r3, r3
 8006950:	e015      	b.n	800697e <HAL_TIM_PWM_Start+0x6a>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	2b08      	cmp	r3, #8
 8006956:	d109      	bne.n	800696c <HAL_TIM_PWM_Start+0x58>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b01      	cmp	r3, #1
 8006962:	bf14      	ite	ne
 8006964:	2301      	movne	r3, #1
 8006966:	2300      	moveq	r3, #0
 8006968:	b2db      	uxtb	r3, r3
 800696a:	e008      	b.n	800697e <HAL_TIM_PWM_Start+0x6a>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b01      	cmp	r3, #1
 8006976:	bf14      	ite	ne
 8006978:	2301      	movne	r3, #1
 800697a:	2300      	moveq	r3, #0
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e07c      	b.n	8006a80 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d104      	bne.n	8006996 <HAL_TIM_PWM_Start+0x82>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2202      	movs	r2, #2
 8006990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006994:	e013      	b.n	80069be <HAL_TIM_PWM_Start+0xaa>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2b04      	cmp	r3, #4
 800699a:	d104      	bne.n	80069a6 <HAL_TIM_PWM_Start+0x92>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2202      	movs	r2, #2
 80069a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069a4:	e00b      	b.n	80069be <HAL_TIM_PWM_Start+0xaa>
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b08      	cmp	r3, #8
 80069aa:	d104      	bne.n	80069b6 <HAL_TIM_PWM_Start+0xa2>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069b4:	e003      	b.n	80069be <HAL_TIM_PWM_Start+0xaa>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2202      	movs	r2, #2
 80069ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2201      	movs	r2, #1
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	4618      	mov	r0, r3
 80069c8:	f001 fa9e 	bl	8007f08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a2d      	ldr	r2, [pc, #180]	; (8006a88 <HAL_TIM_PWM_Start+0x174>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d004      	beq.n	80069e0 <HAL_TIM_PWM_Start+0xcc>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a2c      	ldr	r2, [pc, #176]	; (8006a8c <HAL_TIM_PWM_Start+0x178>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d101      	bne.n	80069e4 <HAL_TIM_PWM_Start+0xd0>
 80069e0:	2301      	movs	r3, #1
 80069e2:	e000      	b.n	80069e6 <HAL_TIM_PWM_Start+0xd2>
 80069e4:	2300      	movs	r3, #0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d007      	beq.n	80069fa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a22      	ldr	r2, [pc, #136]	; (8006a88 <HAL_TIM_PWM_Start+0x174>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d022      	beq.n	8006a4a <HAL_TIM_PWM_Start+0x136>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a0c:	d01d      	beq.n	8006a4a <HAL_TIM_PWM_Start+0x136>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a1f      	ldr	r2, [pc, #124]	; (8006a90 <HAL_TIM_PWM_Start+0x17c>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d018      	beq.n	8006a4a <HAL_TIM_PWM_Start+0x136>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a1d      	ldr	r2, [pc, #116]	; (8006a94 <HAL_TIM_PWM_Start+0x180>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d013      	beq.n	8006a4a <HAL_TIM_PWM_Start+0x136>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a1c      	ldr	r2, [pc, #112]	; (8006a98 <HAL_TIM_PWM_Start+0x184>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d00e      	beq.n	8006a4a <HAL_TIM_PWM_Start+0x136>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a16      	ldr	r2, [pc, #88]	; (8006a8c <HAL_TIM_PWM_Start+0x178>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d009      	beq.n	8006a4a <HAL_TIM_PWM_Start+0x136>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a18      	ldr	r2, [pc, #96]	; (8006a9c <HAL_TIM_PWM_Start+0x188>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d004      	beq.n	8006a4a <HAL_TIM_PWM_Start+0x136>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a16      	ldr	r2, [pc, #88]	; (8006aa0 <HAL_TIM_PWM_Start+0x18c>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d111      	bne.n	8006a6e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f003 0307 	and.w	r3, r3, #7
 8006a54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2b06      	cmp	r3, #6
 8006a5a:	d010      	beq.n	8006a7e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f042 0201 	orr.w	r2, r2, #1
 8006a6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a6c:	e007      	b.n	8006a7e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f042 0201 	orr.w	r2, r2, #1
 8006a7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	40010000 	.word	0x40010000
 8006a8c:	40010400 	.word	0x40010400
 8006a90:	40000400 	.word	0x40000400
 8006a94:	40000800 	.word	0x40000800
 8006a98:	40000c00 	.word	0x40000c00
 8006a9c:	40014000 	.word	0x40014000
 8006aa0:	40001800 	.word	0x40001800

08006aa4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d109      	bne.n	8006acc <HAL_TIM_PWM_Start_IT+0x28>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	bf14      	ite	ne
 8006ac4:	2301      	movne	r3, #1
 8006ac6:	2300      	moveq	r3, #0
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	e022      	b.n	8006b12 <HAL_TIM_PWM_Start_IT+0x6e>
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	2b04      	cmp	r3, #4
 8006ad0:	d109      	bne.n	8006ae6 <HAL_TIM_PWM_Start_IT+0x42>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	bf14      	ite	ne
 8006ade:	2301      	movne	r3, #1
 8006ae0:	2300      	moveq	r3, #0
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	e015      	b.n	8006b12 <HAL_TIM_PWM_Start_IT+0x6e>
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	d109      	bne.n	8006b00 <HAL_TIM_PWM_Start_IT+0x5c>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	bf14      	ite	ne
 8006af8:	2301      	movne	r3, #1
 8006afa:	2300      	moveq	r3, #0
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	e008      	b.n	8006b12 <HAL_TIM_PWM_Start_IT+0x6e>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	bf14      	ite	ne
 8006b0c:	2301      	movne	r3, #1
 8006b0e:	2300      	moveq	r3, #0
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e0c7      	b.n	8006caa <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d104      	bne.n	8006b2a <HAL_TIM_PWM_Start_IT+0x86>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2202      	movs	r2, #2
 8006b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b28:	e013      	b.n	8006b52 <HAL_TIM_PWM_Start_IT+0xae>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	d104      	bne.n	8006b3a <HAL_TIM_PWM_Start_IT+0x96>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2202      	movs	r2, #2
 8006b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b38:	e00b      	b.n	8006b52 <HAL_TIM_PWM_Start_IT+0xae>
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b08      	cmp	r3, #8
 8006b3e:	d104      	bne.n	8006b4a <HAL_TIM_PWM_Start_IT+0xa6>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2202      	movs	r2, #2
 8006b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b48:	e003      	b.n	8006b52 <HAL_TIM_PWM_Start_IT+0xae>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2b0c      	cmp	r3, #12
 8006b56:	d841      	bhi.n	8006bdc <HAL_TIM_PWM_Start_IT+0x138>
 8006b58:	a201      	add	r2, pc, #4	; (adr r2, 8006b60 <HAL_TIM_PWM_Start_IT+0xbc>)
 8006b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5e:	bf00      	nop
 8006b60:	08006b95 	.word	0x08006b95
 8006b64:	08006bdd 	.word	0x08006bdd
 8006b68:	08006bdd 	.word	0x08006bdd
 8006b6c:	08006bdd 	.word	0x08006bdd
 8006b70:	08006ba7 	.word	0x08006ba7
 8006b74:	08006bdd 	.word	0x08006bdd
 8006b78:	08006bdd 	.word	0x08006bdd
 8006b7c:	08006bdd 	.word	0x08006bdd
 8006b80:	08006bb9 	.word	0x08006bb9
 8006b84:	08006bdd 	.word	0x08006bdd
 8006b88:	08006bdd 	.word	0x08006bdd
 8006b8c:	08006bdd 	.word	0x08006bdd
 8006b90:	08006bcb 	.word	0x08006bcb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68da      	ldr	r2, [r3, #12]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 0202 	orr.w	r2, r2, #2
 8006ba2:	60da      	str	r2, [r3, #12]
      break;
 8006ba4:	e01d      	b.n	8006be2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68da      	ldr	r2, [r3, #12]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f042 0204 	orr.w	r2, r2, #4
 8006bb4:	60da      	str	r2, [r3, #12]
      break;
 8006bb6:	e014      	b.n	8006be2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68da      	ldr	r2, [r3, #12]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f042 0208 	orr.w	r2, r2, #8
 8006bc6:	60da      	str	r2, [r3, #12]
      break;
 8006bc8:	e00b      	b.n	8006be2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f042 0210 	orr.w	r2, r2, #16
 8006bd8:	60da      	str	r2, [r3, #12]
      break;
 8006bda:	e002      	b.n	8006be2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	73fb      	strb	r3, [r7, #15]
      break;
 8006be0:	bf00      	nop
  }

  if (status == HAL_OK)
 8006be2:	7bfb      	ldrb	r3, [r7, #15]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d15f      	bne.n	8006ca8 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2201      	movs	r2, #1
 8006bee:	6839      	ldr	r1, [r7, #0]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f001 f989 	bl	8007f08 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a2e      	ldr	r2, [pc, #184]	; (8006cb4 <HAL_TIM_PWM_Start_IT+0x210>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d004      	beq.n	8006c0a <HAL_TIM_PWM_Start_IT+0x166>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a2c      	ldr	r2, [pc, #176]	; (8006cb8 <HAL_TIM_PWM_Start_IT+0x214>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d101      	bne.n	8006c0e <HAL_TIM_PWM_Start_IT+0x16a>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e000      	b.n	8006c10 <HAL_TIM_PWM_Start_IT+0x16c>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d007      	beq.n	8006c24 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c22:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a22      	ldr	r2, [pc, #136]	; (8006cb4 <HAL_TIM_PWM_Start_IT+0x210>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d022      	beq.n	8006c74 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c36:	d01d      	beq.n	8006c74 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a1f      	ldr	r2, [pc, #124]	; (8006cbc <HAL_TIM_PWM_Start_IT+0x218>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d018      	beq.n	8006c74 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a1e      	ldr	r2, [pc, #120]	; (8006cc0 <HAL_TIM_PWM_Start_IT+0x21c>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d013      	beq.n	8006c74 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a1c      	ldr	r2, [pc, #112]	; (8006cc4 <HAL_TIM_PWM_Start_IT+0x220>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d00e      	beq.n	8006c74 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a17      	ldr	r2, [pc, #92]	; (8006cb8 <HAL_TIM_PWM_Start_IT+0x214>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d009      	beq.n	8006c74 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a18      	ldr	r2, [pc, #96]	; (8006cc8 <HAL_TIM_PWM_Start_IT+0x224>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d004      	beq.n	8006c74 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a17      	ldr	r2, [pc, #92]	; (8006ccc <HAL_TIM_PWM_Start_IT+0x228>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d111      	bne.n	8006c98 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f003 0307 	and.w	r3, r3, #7
 8006c7e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	2b06      	cmp	r3, #6
 8006c84:	d010      	beq.n	8006ca8 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f042 0201 	orr.w	r2, r2, #1
 8006c94:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c96:	e007      	b.n	8006ca8 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f042 0201 	orr.w	r2, r2, #1
 8006ca6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	40010000 	.word	0x40010000
 8006cb8:	40010400 	.word	0x40010400
 8006cbc:	40000400 	.word	0x40000400
 8006cc0:	40000800 	.word	0x40000800
 8006cc4:	40000c00 	.word	0x40000c00
 8006cc8:	40014000 	.word	0x40014000
 8006ccc:	40001800 	.word	0x40001800

08006cd0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e041      	b.n	8006d66 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d106      	bne.n	8006cfc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7fb fe14 	bl	8002924 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2202      	movs	r2, #2
 8006d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	3304      	adds	r3, #4
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	4610      	mov	r0, r2
 8006d10:	f000 fce6 	bl	80076e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
	...

08006d70 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d104      	bne.n	8006d8e <HAL_TIM_IC_Start_IT+0x1e>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	e013      	b.n	8006db6 <HAL_TIM_IC_Start_IT+0x46>
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b04      	cmp	r3, #4
 8006d92:	d104      	bne.n	8006d9e <HAL_TIM_IC_Start_IT+0x2e>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	e00b      	b.n	8006db6 <HAL_TIM_IC_Start_IT+0x46>
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b08      	cmp	r3, #8
 8006da2:	d104      	bne.n	8006dae <HAL_TIM_IC_Start_IT+0x3e>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	e003      	b.n	8006db6 <HAL_TIM_IC_Start_IT+0x46>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d104      	bne.n	8006dc8 <HAL_TIM_IC_Start_IT+0x58>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	e013      	b.n	8006df0 <HAL_TIM_IC_Start_IT+0x80>
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	2b04      	cmp	r3, #4
 8006dcc:	d104      	bne.n	8006dd8 <HAL_TIM_IC_Start_IT+0x68>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	e00b      	b.n	8006df0 <HAL_TIM_IC_Start_IT+0x80>
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	2b08      	cmp	r3, #8
 8006ddc:	d104      	bne.n	8006de8 <HAL_TIM_IC_Start_IT+0x78>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	e003      	b.n	8006df0 <HAL_TIM_IC_Start_IT+0x80>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006df2:	7bbb      	ldrb	r3, [r7, #14]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d102      	bne.n	8006dfe <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006df8:	7b7b      	ldrb	r3, [r7, #13]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d001      	beq.n	8006e02 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e0cc      	b.n	8006f9c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d104      	bne.n	8006e12 <HAL_TIM_IC_Start_IT+0xa2>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e10:	e013      	b.n	8006e3a <HAL_TIM_IC_Start_IT+0xca>
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b04      	cmp	r3, #4
 8006e16:	d104      	bne.n	8006e22 <HAL_TIM_IC_Start_IT+0xb2>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e20:	e00b      	b.n	8006e3a <HAL_TIM_IC_Start_IT+0xca>
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b08      	cmp	r3, #8
 8006e26:	d104      	bne.n	8006e32 <HAL_TIM_IC_Start_IT+0xc2>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e30:	e003      	b.n	8006e3a <HAL_TIM_IC_Start_IT+0xca>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2202      	movs	r2, #2
 8006e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d104      	bne.n	8006e4a <HAL_TIM_IC_Start_IT+0xda>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2202      	movs	r2, #2
 8006e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e48:	e013      	b.n	8006e72 <HAL_TIM_IC_Start_IT+0x102>
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b04      	cmp	r3, #4
 8006e4e:	d104      	bne.n	8006e5a <HAL_TIM_IC_Start_IT+0xea>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2202      	movs	r2, #2
 8006e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e58:	e00b      	b.n	8006e72 <HAL_TIM_IC_Start_IT+0x102>
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b08      	cmp	r3, #8
 8006e5e:	d104      	bne.n	8006e6a <HAL_TIM_IC_Start_IT+0xfa>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2202      	movs	r2, #2
 8006e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e68:	e003      	b.n	8006e72 <HAL_TIM_IC_Start_IT+0x102>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2202      	movs	r2, #2
 8006e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	2b0c      	cmp	r3, #12
 8006e76:	d841      	bhi.n	8006efc <HAL_TIM_IC_Start_IT+0x18c>
 8006e78:	a201      	add	r2, pc, #4	; (adr r2, 8006e80 <HAL_TIM_IC_Start_IT+0x110>)
 8006e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7e:	bf00      	nop
 8006e80:	08006eb5 	.word	0x08006eb5
 8006e84:	08006efd 	.word	0x08006efd
 8006e88:	08006efd 	.word	0x08006efd
 8006e8c:	08006efd 	.word	0x08006efd
 8006e90:	08006ec7 	.word	0x08006ec7
 8006e94:	08006efd 	.word	0x08006efd
 8006e98:	08006efd 	.word	0x08006efd
 8006e9c:	08006efd 	.word	0x08006efd
 8006ea0:	08006ed9 	.word	0x08006ed9
 8006ea4:	08006efd 	.word	0x08006efd
 8006ea8:	08006efd 	.word	0x08006efd
 8006eac:	08006efd 	.word	0x08006efd
 8006eb0:	08006eeb 	.word	0x08006eeb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68da      	ldr	r2, [r3, #12]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f042 0202 	orr.w	r2, r2, #2
 8006ec2:	60da      	str	r2, [r3, #12]
      break;
 8006ec4:	e01d      	b.n	8006f02 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68da      	ldr	r2, [r3, #12]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f042 0204 	orr.w	r2, r2, #4
 8006ed4:	60da      	str	r2, [r3, #12]
      break;
 8006ed6:	e014      	b.n	8006f02 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68da      	ldr	r2, [r3, #12]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f042 0208 	orr.w	r2, r2, #8
 8006ee6:	60da      	str	r2, [r3, #12]
      break;
 8006ee8:	e00b      	b.n	8006f02 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68da      	ldr	r2, [r3, #12]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f042 0210 	orr.w	r2, r2, #16
 8006ef8:	60da      	str	r2, [r3, #12]
      break;
 8006efa:	e002      	b.n	8006f02 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	73fb      	strb	r3, [r7, #15]
      break;
 8006f00:	bf00      	nop
  }

  if (status == HAL_OK)
 8006f02:	7bfb      	ldrb	r3, [r7, #15]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d148      	bne.n	8006f9a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	6839      	ldr	r1, [r7, #0]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f000 fff9 	bl	8007f08 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a22      	ldr	r2, [pc, #136]	; (8006fa4 <HAL_TIM_IC_Start_IT+0x234>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d022      	beq.n	8006f66 <HAL_TIM_IC_Start_IT+0x1f6>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f28:	d01d      	beq.n	8006f66 <HAL_TIM_IC_Start_IT+0x1f6>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a1e      	ldr	r2, [pc, #120]	; (8006fa8 <HAL_TIM_IC_Start_IT+0x238>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d018      	beq.n	8006f66 <HAL_TIM_IC_Start_IT+0x1f6>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a1c      	ldr	r2, [pc, #112]	; (8006fac <HAL_TIM_IC_Start_IT+0x23c>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d013      	beq.n	8006f66 <HAL_TIM_IC_Start_IT+0x1f6>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a1b      	ldr	r2, [pc, #108]	; (8006fb0 <HAL_TIM_IC_Start_IT+0x240>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d00e      	beq.n	8006f66 <HAL_TIM_IC_Start_IT+0x1f6>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a19      	ldr	r2, [pc, #100]	; (8006fb4 <HAL_TIM_IC_Start_IT+0x244>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d009      	beq.n	8006f66 <HAL_TIM_IC_Start_IT+0x1f6>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a18      	ldr	r2, [pc, #96]	; (8006fb8 <HAL_TIM_IC_Start_IT+0x248>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d004      	beq.n	8006f66 <HAL_TIM_IC_Start_IT+0x1f6>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a16      	ldr	r2, [pc, #88]	; (8006fbc <HAL_TIM_IC_Start_IT+0x24c>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d111      	bne.n	8006f8a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	f003 0307 	and.w	r3, r3, #7
 8006f70:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	2b06      	cmp	r3, #6
 8006f76:	d010      	beq.n	8006f9a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f042 0201 	orr.w	r2, r2, #1
 8006f86:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f88:	e007      	b.n	8006f9a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f042 0201 	orr.w	r2, r2, #1
 8006f98:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	40010000 	.word	0x40010000
 8006fa8:	40000400 	.word	0x40000400
 8006fac:	40000800 	.word	0x40000800
 8006fb0:	40000c00 	.word	0x40000c00
 8006fb4:	40010400 	.word	0x40010400
 8006fb8:	40014000 	.word	0x40014000
 8006fbc:	40001800 	.word	0x40001800

08006fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	f003 0302 	and.w	r3, r3, #2
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d122      	bne.n	800701c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f003 0302 	and.w	r3, r3, #2
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d11b      	bne.n	800701c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f06f 0202 	mvn.w	r2, #2
 8006fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	f003 0303 	and.w	r3, r3, #3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7fc f8f0 	bl	80031e8 <HAL_TIM_IC_CaptureCallback>
 8007008:	e005      	b.n	8007016 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fb4a 	bl	80076a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fb51 	bl	80076b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	f003 0304 	and.w	r3, r3, #4
 8007026:	2b04      	cmp	r3, #4
 8007028:	d122      	bne.n	8007070 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	f003 0304 	and.w	r3, r3, #4
 8007034:	2b04      	cmp	r3, #4
 8007036:	d11b      	bne.n	8007070 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f06f 0204 	mvn.w	r2, #4
 8007040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2202      	movs	r2, #2
 8007046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007052:	2b00      	cmp	r3, #0
 8007054:	d003      	beq.n	800705e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f7fc f8c6 	bl	80031e8 <HAL_TIM_IC_CaptureCallback>
 800705c:	e005      	b.n	800706a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fb20 	bl	80076a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fb27 	bl	80076b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	f003 0308 	and.w	r3, r3, #8
 800707a:	2b08      	cmp	r3, #8
 800707c:	d122      	bne.n	80070c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f003 0308 	and.w	r3, r3, #8
 8007088:	2b08      	cmp	r3, #8
 800708a:	d11b      	bne.n	80070c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f06f 0208 	mvn.w	r2, #8
 8007094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2204      	movs	r2, #4
 800709a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	69db      	ldr	r3, [r3, #28]
 80070a2:	f003 0303 	and.w	r3, r3, #3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d003      	beq.n	80070b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7fc f89c 	bl	80031e8 <HAL_TIM_IC_CaptureCallback>
 80070b0:	e005      	b.n	80070be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 faf6 	bl	80076a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fafd 	bl	80076b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	f003 0310 	and.w	r3, r3, #16
 80070ce:	2b10      	cmp	r3, #16
 80070d0:	d122      	bne.n	8007118 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f003 0310 	and.w	r3, r3, #16
 80070dc:	2b10      	cmp	r3, #16
 80070de:	d11b      	bne.n	8007118 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f06f 0210 	mvn.w	r2, #16
 80070e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2208      	movs	r2, #8
 80070ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d003      	beq.n	8007106 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7fc f872 	bl	80031e8 <HAL_TIM_IC_CaptureCallback>
 8007104:	e005      	b.n	8007112 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 facc 	bl	80076a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fad3 	bl	80076b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b01      	cmp	r3, #1
 8007124:	d10e      	bne.n	8007144 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	2b01      	cmp	r3, #1
 8007132:	d107      	bne.n	8007144 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f06f 0201 	mvn.w	r2, #1
 800713c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7fa fb28 	bl	8001794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800714e:	2b80      	cmp	r3, #128	; 0x80
 8007150:	d10e      	bne.n	8007170 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800715c:	2b80      	cmp	r3, #128	; 0x80
 800715e:	d107      	bne.n	8007170 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 ff78 	bl	8008060 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800717a:	2b40      	cmp	r3, #64	; 0x40
 800717c:	d10e      	bne.n	800719c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007188:	2b40      	cmp	r3, #64	; 0x40
 800718a:	d107      	bne.n	800719c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fa98 	bl	80076cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	f003 0320 	and.w	r3, r3, #32
 80071a6:	2b20      	cmp	r3, #32
 80071a8:	d10e      	bne.n	80071c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	f003 0320 	and.w	r3, r3, #32
 80071b4:	2b20      	cmp	r3, #32
 80071b6:	d107      	bne.n	80071c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f06f 0220 	mvn.w	r2, #32
 80071c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 ff42 	bl	800804c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071c8:	bf00      	nop
 80071ca:	3708      	adds	r7, #8
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d101      	bne.n	80071ee <HAL_TIM_IC_ConfigChannel+0x1e>
 80071ea:	2302      	movs	r3, #2
 80071ec:	e088      	b.n	8007300 <HAL_TIM_IC_ConfigChannel+0x130>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d11b      	bne.n	8007234 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6818      	ldr	r0, [r3, #0]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	6819      	ldr	r1, [r3, #0]
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f000 fcb8 	bl	8007b80 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	699a      	ldr	r2, [r3, #24]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f022 020c 	bic.w	r2, r2, #12
 800721e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6999      	ldr	r1, [r3, #24]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	689a      	ldr	r2, [r3, #8]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	619a      	str	r2, [r3, #24]
 8007232:	e060      	b.n	80072f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b04      	cmp	r3, #4
 8007238:	d11c      	bne.n	8007274 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6818      	ldr	r0, [r3, #0]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	6819      	ldr	r1, [r3, #0]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	f000 fd3c 	bl	8007cc6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	699a      	ldr	r2, [r3, #24]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800725c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6999      	ldr	r1, [r3, #24]
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	021a      	lsls	r2, r3, #8
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	430a      	orrs	r2, r1
 8007270:	619a      	str	r2, [r3, #24]
 8007272:	e040      	b.n	80072f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b08      	cmp	r3, #8
 8007278:	d11b      	bne.n	80072b2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6818      	ldr	r0, [r3, #0]
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	6819      	ldr	r1, [r3, #0]
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f000 fd89 	bl	8007da0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	69da      	ldr	r2, [r3, #28]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f022 020c 	bic.w	r2, r2, #12
 800729c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	69d9      	ldr	r1, [r3, #28]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	430a      	orrs	r2, r1
 80072ae:	61da      	str	r2, [r3, #28]
 80072b0:	e021      	b.n	80072f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2b0c      	cmp	r3, #12
 80072b6:	d11c      	bne.n	80072f2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6818      	ldr	r0, [r3, #0]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	6819      	ldr	r1, [r3, #0]
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	685a      	ldr	r2, [r3, #4]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	f000 fda6 	bl	8007e18 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	69da      	ldr	r2, [r3, #28]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80072da:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	69d9      	ldr	r1, [r3, #28]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	021a      	lsls	r2, r3, #8
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	430a      	orrs	r2, r1
 80072ee:	61da      	str	r2, [r3, #28]
 80072f0:	e001      	b.n	80072f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3718      	adds	r7, #24
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800731e:	2b01      	cmp	r3, #1
 8007320:	d101      	bne.n	8007326 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007322:	2302      	movs	r3, #2
 8007324:	e0ae      	b.n	8007484 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2b0c      	cmp	r3, #12
 8007332:	f200 809f 	bhi.w	8007474 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007336:	a201      	add	r2, pc, #4	; (adr r2, 800733c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733c:	08007371 	.word	0x08007371
 8007340:	08007475 	.word	0x08007475
 8007344:	08007475 	.word	0x08007475
 8007348:	08007475 	.word	0x08007475
 800734c:	080073b1 	.word	0x080073b1
 8007350:	08007475 	.word	0x08007475
 8007354:	08007475 	.word	0x08007475
 8007358:	08007475 	.word	0x08007475
 800735c:	080073f3 	.word	0x080073f3
 8007360:	08007475 	.word	0x08007475
 8007364:	08007475 	.word	0x08007475
 8007368:	08007475 	.word	0x08007475
 800736c:	08007433 	.word	0x08007433
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68b9      	ldr	r1, [r7, #8]
 8007376:	4618      	mov	r0, r3
 8007378:	f000 fa52 	bl	8007820 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	699a      	ldr	r2, [r3, #24]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f042 0208 	orr.w	r2, r2, #8
 800738a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	699a      	ldr	r2, [r3, #24]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 0204 	bic.w	r2, r2, #4
 800739a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6999      	ldr	r1, [r3, #24]
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	691a      	ldr	r2, [r3, #16]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	430a      	orrs	r2, r1
 80073ac:	619a      	str	r2, [r3, #24]
      break;
 80073ae:	e064      	b.n	800747a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68b9      	ldr	r1, [r7, #8]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 faa2 	bl	8007900 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	699a      	ldr	r2, [r3, #24]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	699a      	ldr	r2, [r3, #24]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6999      	ldr	r1, [r3, #24]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	021a      	lsls	r2, r3, #8
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	430a      	orrs	r2, r1
 80073ee:	619a      	str	r2, [r3, #24]
      break;
 80073f0:	e043      	b.n	800747a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68b9      	ldr	r1, [r7, #8]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f000 faf7 	bl	80079ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	69da      	ldr	r2, [r3, #28]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f042 0208 	orr.w	r2, r2, #8
 800740c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	69da      	ldr	r2, [r3, #28]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f022 0204 	bic.w	r2, r2, #4
 800741c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	69d9      	ldr	r1, [r3, #28]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	691a      	ldr	r2, [r3, #16]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	430a      	orrs	r2, r1
 800742e:	61da      	str	r2, [r3, #28]
      break;
 8007430:	e023      	b.n	800747a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68b9      	ldr	r1, [r7, #8]
 8007438:	4618      	mov	r0, r3
 800743a:	f000 fb4b 	bl	8007ad4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	69da      	ldr	r2, [r3, #28]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800744c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	69da      	ldr	r2, [r3, #28]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800745c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	69d9      	ldr	r1, [r3, #28]
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	021a      	lsls	r2, r3, #8
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	61da      	str	r2, [r3, #28]
      break;
 8007472:	e002      	b.n	800747a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	75fb      	strb	r3, [r7, #23]
      break;
 8007478:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007482:	7dfb      	ldrb	r3, [r7, #23]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3718      	adds	r7, #24
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d101      	bne.n	80074a8 <HAL_TIM_ConfigClockSource+0x1c>
 80074a4:	2302      	movs	r3, #2
 80074a6:	e0b4      	b.n	8007612 <HAL_TIM_ConfigClockSource+0x186>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2202      	movs	r2, #2
 80074b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80074c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074e0:	d03e      	beq.n	8007560 <HAL_TIM_ConfigClockSource+0xd4>
 80074e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074e6:	f200 8087 	bhi.w	80075f8 <HAL_TIM_ConfigClockSource+0x16c>
 80074ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ee:	f000 8086 	beq.w	80075fe <HAL_TIM_ConfigClockSource+0x172>
 80074f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074f6:	d87f      	bhi.n	80075f8 <HAL_TIM_ConfigClockSource+0x16c>
 80074f8:	2b70      	cmp	r3, #112	; 0x70
 80074fa:	d01a      	beq.n	8007532 <HAL_TIM_ConfigClockSource+0xa6>
 80074fc:	2b70      	cmp	r3, #112	; 0x70
 80074fe:	d87b      	bhi.n	80075f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007500:	2b60      	cmp	r3, #96	; 0x60
 8007502:	d050      	beq.n	80075a6 <HAL_TIM_ConfigClockSource+0x11a>
 8007504:	2b60      	cmp	r3, #96	; 0x60
 8007506:	d877      	bhi.n	80075f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007508:	2b50      	cmp	r3, #80	; 0x50
 800750a:	d03c      	beq.n	8007586 <HAL_TIM_ConfigClockSource+0xfa>
 800750c:	2b50      	cmp	r3, #80	; 0x50
 800750e:	d873      	bhi.n	80075f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007510:	2b40      	cmp	r3, #64	; 0x40
 8007512:	d058      	beq.n	80075c6 <HAL_TIM_ConfigClockSource+0x13a>
 8007514:	2b40      	cmp	r3, #64	; 0x40
 8007516:	d86f      	bhi.n	80075f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007518:	2b30      	cmp	r3, #48	; 0x30
 800751a:	d064      	beq.n	80075e6 <HAL_TIM_ConfigClockSource+0x15a>
 800751c:	2b30      	cmp	r3, #48	; 0x30
 800751e:	d86b      	bhi.n	80075f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007520:	2b20      	cmp	r3, #32
 8007522:	d060      	beq.n	80075e6 <HAL_TIM_ConfigClockSource+0x15a>
 8007524:	2b20      	cmp	r3, #32
 8007526:	d867      	bhi.n	80075f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007528:	2b00      	cmp	r3, #0
 800752a:	d05c      	beq.n	80075e6 <HAL_TIM_ConfigClockSource+0x15a>
 800752c:	2b10      	cmp	r3, #16
 800752e:	d05a      	beq.n	80075e6 <HAL_TIM_ConfigClockSource+0x15a>
 8007530:	e062      	b.n	80075f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6818      	ldr	r0, [r3, #0]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	6899      	ldr	r1, [r3, #8]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	685a      	ldr	r2, [r3, #4]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	f000 fcc1 	bl	8007ec8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007554:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	609a      	str	r2, [r3, #8]
      break;
 800755e:	e04f      	b.n	8007600 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6818      	ldr	r0, [r3, #0]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	6899      	ldr	r1, [r3, #8]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	f000 fcaa 	bl	8007ec8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	689a      	ldr	r2, [r3, #8]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007582:	609a      	str	r2, [r3, #8]
      break;
 8007584:	e03c      	b.n	8007600 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6818      	ldr	r0, [r3, #0]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	6859      	ldr	r1, [r3, #4]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	461a      	mov	r2, r3
 8007594:	f000 fb68 	bl	8007c68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2150      	movs	r1, #80	; 0x50
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 fc77 	bl	8007e92 <TIM_ITRx_SetConfig>
      break;
 80075a4:	e02c      	b.n	8007600 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6818      	ldr	r0, [r3, #0]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	6859      	ldr	r1, [r3, #4]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	461a      	mov	r2, r3
 80075b4:	f000 fbc4 	bl	8007d40 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2160      	movs	r1, #96	; 0x60
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 fc67 	bl	8007e92 <TIM_ITRx_SetConfig>
      break;
 80075c4:	e01c      	b.n	8007600 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6818      	ldr	r0, [r3, #0]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	6859      	ldr	r1, [r3, #4]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	461a      	mov	r2, r3
 80075d4:	f000 fb48 	bl	8007c68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2140      	movs	r1, #64	; 0x40
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 fc57 	bl	8007e92 <TIM_ITRx_SetConfig>
      break;
 80075e4:	e00c      	b.n	8007600 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4619      	mov	r1, r3
 80075f0:	4610      	mov	r0, r2
 80075f2:	f000 fc4e 	bl	8007e92 <TIM_ITRx_SetConfig>
      break;
 80075f6:	e003      	b.n	8007600 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	73fb      	strb	r3, [r7, #15]
      break;
 80075fc:	e000      	b.n	8007600 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80075fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007610:	7bfb      	ldrb	r3, [r7, #15]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
	...

0800761c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007626:	2300      	movs	r3, #0
 8007628:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	2b0c      	cmp	r3, #12
 800762e:	d831      	bhi.n	8007694 <HAL_TIM_ReadCapturedValue+0x78>
 8007630:	a201      	add	r2, pc, #4	; (adr r2, 8007638 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007636:	bf00      	nop
 8007638:	0800766d 	.word	0x0800766d
 800763c:	08007695 	.word	0x08007695
 8007640:	08007695 	.word	0x08007695
 8007644:	08007695 	.word	0x08007695
 8007648:	08007677 	.word	0x08007677
 800764c:	08007695 	.word	0x08007695
 8007650:	08007695 	.word	0x08007695
 8007654:	08007695 	.word	0x08007695
 8007658:	08007681 	.word	0x08007681
 800765c:	08007695 	.word	0x08007695
 8007660:	08007695 	.word	0x08007695
 8007664:	08007695 	.word	0x08007695
 8007668:	0800768b 	.word	0x0800768b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007672:	60fb      	str	r3, [r7, #12]

      break;
 8007674:	e00f      	b.n	8007696 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767c:	60fb      	str	r3, [r7, #12]

      break;
 800767e:	e00a      	b.n	8007696 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007686:	60fb      	str	r3, [r7, #12]

      break;
 8007688:	e005      	b.n	8007696 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007690:	60fb      	str	r3, [r7, #12]

      break;
 8007692:	e000      	b.n	8007696 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007694:	bf00      	nop
  }

  return tmpreg;
 8007696:	68fb      	ldr	r3, [r7, #12]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a40      	ldr	r2, [pc, #256]	; (80077f4 <TIM_Base_SetConfig+0x114>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d013      	beq.n	8007720 <TIM_Base_SetConfig+0x40>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076fe:	d00f      	beq.n	8007720 <TIM_Base_SetConfig+0x40>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a3d      	ldr	r2, [pc, #244]	; (80077f8 <TIM_Base_SetConfig+0x118>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d00b      	beq.n	8007720 <TIM_Base_SetConfig+0x40>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a3c      	ldr	r2, [pc, #240]	; (80077fc <TIM_Base_SetConfig+0x11c>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d007      	beq.n	8007720 <TIM_Base_SetConfig+0x40>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a3b      	ldr	r2, [pc, #236]	; (8007800 <TIM_Base_SetConfig+0x120>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d003      	beq.n	8007720 <TIM_Base_SetConfig+0x40>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a3a      	ldr	r2, [pc, #232]	; (8007804 <TIM_Base_SetConfig+0x124>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d108      	bne.n	8007732 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	4313      	orrs	r3, r2
 8007730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a2f      	ldr	r2, [pc, #188]	; (80077f4 <TIM_Base_SetConfig+0x114>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d02b      	beq.n	8007792 <TIM_Base_SetConfig+0xb2>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007740:	d027      	beq.n	8007792 <TIM_Base_SetConfig+0xb2>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a2c      	ldr	r2, [pc, #176]	; (80077f8 <TIM_Base_SetConfig+0x118>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d023      	beq.n	8007792 <TIM_Base_SetConfig+0xb2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a2b      	ldr	r2, [pc, #172]	; (80077fc <TIM_Base_SetConfig+0x11c>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d01f      	beq.n	8007792 <TIM_Base_SetConfig+0xb2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a2a      	ldr	r2, [pc, #168]	; (8007800 <TIM_Base_SetConfig+0x120>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d01b      	beq.n	8007792 <TIM_Base_SetConfig+0xb2>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a29      	ldr	r2, [pc, #164]	; (8007804 <TIM_Base_SetConfig+0x124>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d017      	beq.n	8007792 <TIM_Base_SetConfig+0xb2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a28      	ldr	r2, [pc, #160]	; (8007808 <TIM_Base_SetConfig+0x128>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d013      	beq.n	8007792 <TIM_Base_SetConfig+0xb2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a27      	ldr	r2, [pc, #156]	; (800780c <TIM_Base_SetConfig+0x12c>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d00f      	beq.n	8007792 <TIM_Base_SetConfig+0xb2>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a26      	ldr	r2, [pc, #152]	; (8007810 <TIM_Base_SetConfig+0x130>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d00b      	beq.n	8007792 <TIM_Base_SetConfig+0xb2>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a25      	ldr	r2, [pc, #148]	; (8007814 <TIM_Base_SetConfig+0x134>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d007      	beq.n	8007792 <TIM_Base_SetConfig+0xb2>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a24      	ldr	r2, [pc, #144]	; (8007818 <TIM_Base_SetConfig+0x138>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d003      	beq.n	8007792 <TIM_Base_SetConfig+0xb2>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a23      	ldr	r2, [pc, #140]	; (800781c <TIM_Base_SetConfig+0x13c>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d108      	bne.n	80077a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	689a      	ldr	r2, [r3, #8]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a0a      	ldr	r2, [pc, #40]	; (80077f4 <TIM_Base_SetConfig+0x114>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d003      	beq.n	80077d8 <TIM_Base_SetConfig+0xf8>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a0c      	ldr	r2, [pc, #48]	; (8007804 <TIM_Base_SetConfig+0x124>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d103      	bne.n	80077e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	691a      	ldr	r2, [r3, #16]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	615a      	str	r2, [r3, #20]
}
 80077e6:	bf00      	nop
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	40010000 	.word	0x40010000
 80077f8:	40000400 	.word	0x40000400
 80077fc:	40000800 	.word	0x40000800
 8007800:	40000c00 	.word	0x40000c00
 8007804:	40010400 	.word	0x40010400
 8007808:	40014000 	.word	0x40014000
 800780c:	40014400 	.word	0x40014400
 8007810:	40014800 	.word	0x40014800
 8007814:	40001800 	.word	0x40001800
 8007818:	40001c00 	.word	0x40001c00
 800781c:	40002000 	.word	0x40002000

08007820 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007820:	b480      	push	{r7}
 8007822:	b087      	sub	sp, #28
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	f023 0201 	bic.w	r2, r3, #1
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800784e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f023 0303 	bic.w	r3, r3, #3
 8007856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	4313      	orrs	r3, r2
 8007860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	f023 0302 	bic.w	r3, r3, #2
 8007868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	4313      	orrs	r3, r2
 8007872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a20      	ldr	r2, [pc, #128]	; (80078f8 <TIM_OC1_SetConfig+0xd8>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d003      	beq.n	8007884 <TIM_OC1_SetConfig+0x64>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a1f      	ldr	r2, [pc, #124]	; (80078fc <TIM_OC1_SetConfig+0xdc>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d10c      	bne.n	800789e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	f023 0308 	bic.w	r3, r3, #8
 800788a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	697a      	ldr	r2, [r7, #20]
 8007892:	4313      	orrs	r3, r2
 8007894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f023 0304 	bic.w	r3, r3, #4
 800789c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a15      	ldr	r2, [pc, #84]	; (80078f8 <TIM_OC1_SetConfig+0xd8>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d003      	beq.n	80078ae <TIM_OC1_SetConfig+0x8e>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a14      	ldr	r2, [pc, #80]	; (80078fc <TIM_OC1_SetConfig+0xdc>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d111      	bne.n	80078d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	685a      	ldr	r2, [r3, #4]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	621a      	str	r2, [r3, #32]
}
 80078ec:	bf00      	nop
 80078ee:	371c      	adds	r7, #28
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr
 80078f8:	40010000 	.word	0x40010000
 80078fc:	40010400 	.word	0x40010400

08007900 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007900:	b480      	push	{r7}
 8007902:	b087      	sub	sp, #28
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a1b      	ldr	r3, [r3, #32]
 800790e:	f023 0210 	bic.w	r2, r3, #16
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800792e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	021b      	lsls	r3, r3, #8
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	4313      	orrs	r3, r2
 8007942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	f023 0320 	bic.w	r3, r3, #32
 800794a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	011b      	lsls	r3, r3, #4
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	4313      	orrs	r3, r2
 8007956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a22      	ldr	r2, [pc, #136]	; (80079e4 <TIM_OC2_SetConfig+0xe4>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d003      	beq.n	8007968 <TIM_OC2_SetConfig+0x68>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a21      	ldr	r2, [pc, #132]	; (80079e8 <TIM_OC2_SetConfig+0xe8>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d10d      	bne.n	8007984 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800796e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	011b      	lsls	r3, r3, #4
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	4313      	orrs	r3, r2
 800797a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007982:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a17      	ldr	r2, [pc, #92]	; (80079e4 <TIM_OC2_SetConfig+0xe4>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d003      	beq.n	8007994 <TIM_OC2_SetConfig+0x94>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a16      	ldr	r2, [pc, #88]	; (80079e8 <TIM_OC2_SetConfig+0xe8>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d113      	bne.n	80079bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800799a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	693a      	ldr	r2, [r7, #16]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	685a      	ldr	r2, [r3, #4]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	621a      	str	r2, [r3, #32]
}
 80079d6:	bf00      	nop
 80079d8:	371c      	adds	r7, #28
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	40010000 	.word	0x40010000
 80079e8:	40010400 	.word	0x40010400

080079ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b087      	sub	sp, #28
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a1b      	ldr	r3, [r3, #32]
 8007a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	69db      	ldr	r3, [r3, #28]
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f023 0303 	bic.w	r3, r3, #3
 8007a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	021b      	lsls	r3, r3, #8
 8007a3c:	697a      	ldr	r2, [r7, #20]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a21      	ldr	r2, [pc, #132]	; (8007acc <TIM_OC3_SetConfig+0xe0>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d003      	beq.n	8007a52 <TIM_OC3_SetConfig+0x66>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a20      	ldr	r2, [pc, #128]	; (8007ad0 <TIM_OC3_SetConfig+0xe4>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d10d      	bne.n	8007a6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	021b      	lsls	r3, r3, #8
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a16      	ldr	r2, [pc, #88]	; (8007acc <TIM_OC3_SetConfig+0xe0>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d003      	beq.n	8007a7e <TIM_OC3_SetConfig+0x92>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a15      	ldr	r2, [pc, #84]	; (8007ad0 <TIM_OC3_SetConfig+0xe4>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d113      	bne.n	8007aa6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	695b      	ldr	r3, [r3, #20]
 8007a92:	011b      	lsls	r3, r3, #4
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	011b      	lsls	r3, r3, #4
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	685a      	ldr	r2, [r3, #4]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	621a      	str	r2, [r3, #32]
}
 8007ac0:	bf00      	nop
 8007ac2:	371c      	adds	r7, #28
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	40010000 	.word	0x40010000
 8007ad0:	40010400 	.word	0x40010400

08007ad4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b087      	sub	sp, #28
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	69db      	ldr	r3, [r3, #28]
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	021b      	lsls	r3, r3, #8
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	031b      	lsls	r3, r3, #12
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a12      	ldr	r2, [pc, #72]	; (8007b78 <TIM_OC4_SetConfig+0xa4>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d003      	beq.n	8007b3c <TIM_OC4_SetConfig+0x68>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a11      	ldr	r2, [pc, #68]	; (8007b7c <TIM_OC4_SetConfig+0xa8>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d109      	bne.n	8007b50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	695b      	ldr	r3, [r3, #20]
 8007b48:	019b      	lsls	r3, r3, #6
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	697a      	ldr	r2, [r7, #20]
 8007b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	621a      	str	r2, [r3, #32]
}
 8007b6a:	bf00      	nop
 8007b6c:	371c      	adds	r7, #28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	40010000 	.word	0x40010000
 8007b7c:	40010400 	.word	0x40010400

08007b80 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b087      	sub	sp, #28
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
 8007b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	f023 0201 	bic.w	r2, r3, #1
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6a1b      	ldr	r3, [r3, #32]
 8007ba4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	4a28      	ldr	r2, [pc, #160]	; (8007c4c <TIM_TI1_SetConfig+0xcc>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d01b      	beq.n	8007be6 <TIM_TI1_SetConfig+0x66>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bb4:	d017      	beq.n	8007be6 <TIM_TI1_SetConfig+0x66>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	4a25      	ldr	r2, [pc, #148]	; (8007c50 <TIM_TI1_SetConfig+0xd0>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d013      	beq.n	8007be6 <TIM_TI1_SetConfig+0x66>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	4a24      	ldr	r2, [pc, #144]	; (8007c54 <TIM_TI1_SetConfig+0xd4>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d00f      	beq.n	8007be6 <TIM_TI1_SetConfig+0x66>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	4a23      	ldr	r2, [pc, #140]	; (8007c58 <TIM_TI1_SetConfig+0xd8>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d00b      	beq.n	8007be6 <TIM_TI1_SetConfig+0x66>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	4a22      	ldr	r2, [pc, #136]	; (8007c5c <TIM_TI1_SetConfig+0xdc>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d007      	beq.n	8007be6 <TIM_TI1_SetConfig+0x66>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	4a21      	ldr	r2, [pc, #132]	; (8007c60 <TIM_TI1_SetConfig+0xe0>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d003      	beq.n	8007be6 <TIM_TI1_SetConfig+0x66>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	4a20      	ldr	r2, [pc, #128]	; (8007c64 <TIM_TI1_SetConfig+0xe4>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d101      	bne.n	8007bea <TIM_TI1_SetConfig+0x6a>
 8007be6:	2301      	movs	r3, #1
 8007be8:	e000      	b.n	8007bec <TIM_TI1_SetConfig+0x6c>
 8007bea:	2300      	movs	r3, #0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d008      	beq.n	8007c02 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	f023 0303 	bic.w	r3, r3, #3
 8007bf6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	617b      	str	r3, [r7, #20]
 8007c00:	e003      	b.n	8007c0a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	f043 0301 	orr.w	r3, r3, #1
 8007c08:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	011b      	lsls	r3, r3, #4
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	f023 030a 	bic.w	r3, r3, #10
 8007c24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	f003 030a 	and.w	r3, r3, #10
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	621a      	str	r2, [r3, #32]
}
 8007c3e:	bf00      	nop
 8007c40:	371c      	adds	r7, #28
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	40010000 	.word	0x40010000
 8007c50:	40000400 	.word	0x40000400
 8007c54:	40000800 	.word	0x40000800
 8007c58:	40000c00 	.word	0x40000c00
 8007c5c:	40010400 	.word	0x40010400
 8007c60:	40014000 	.word	0x40014000
 8007c64:	40001800 	.word	0x40001800

08007c68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b087      	sub	sp, #28
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6a1b      	ldr	r3, [r3, #32]
 8007c78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	f023 0201 	bic.w	r2, r3, #1
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	011b      	lsls	r3, r3, #4
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	f023 030a 	bic.w	r3, r3, #10
 8007ca4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	621a      	str	r2, [r3, #32]
}
 8007cba:	bf00      	nop
 8007cbc:	371c      	adds	r7, #28
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b087      	sub	sp, #28
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	60f8      	str	r0, [r7, #12]
 8007cce:	60b9      	str	r1, [r7, #8]
 8007cd0:	607a      	str	r2, [r7, #4]
 8007cd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6a1b      	ldr	r3, [r3, #32]
 8007cd8:	f023 0210 	bic.w	r2, r3, #16
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6a1b      	ldr	r3, [r3, #32]
 8007cea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cf2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	021b      	lsls	r3, r3, #8
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	031b      	lsls	r3, r3, #12
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d18:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	011b      	lsls	r3, r3, #4
 8007d1e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	621a      	str	r2, [r3, #32]
}
 8007d34:	bf00      	nop
 8007d36:	371c      	adds	r7, #28
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b087      	sub	sp, #28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6a1b      	ldr	r3, [r3, #32]
 8007d50:	f023 0210 	bic.w	r2, r3, #16
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6a1b      	ldr	r3, [r3, #32]
 8007d62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	031b      	lsls	r3, r3, #12
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	011b      	lsls	r3, r3, #4
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	621a      	str	r2, [r3, #32]
}
 8007d94:	bf00      	nop
 8007d96:	371c      	adds	r7, #28
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b087      	sub	sp, #28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	607a      	str	r2, [r7, #4]
 8007dac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	f023 0303 	bic.w	r3, r3, #3
 8007dcc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ddc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	011b      	lsls	r3, r3, #4
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007df0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	021b      	lsls	r3, r3, #8
 8007df6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	693a      	ldr	r2, [r7, #16]
 8007e0a:	621a      	str	r2, [r3, #32]
}
 8007e0c:	bf00      	nop
 8007e0e:	371c      	adds	r7, #28
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b087      	sub	sp, #28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
 8007e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6a1b      	ldr	r3, [r3, #32]
 8007e2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	69db      	ldr	r3, [r3, #28]
 8007e36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6a1b      	ldr	r3, [r3, #32]
 8007e3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	021b      	lsls	r3, r3, #8
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e56:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	031b      	lsls	r3, r3, #12
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007e6a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	031b      	lsls	r3, r3, #12
 8007e70:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007e74:	693a      	ldr	r2, [r7, #16]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	621a      	str	r2, [r3, #32]
}
 8007e86:	bf00      	nop
 8007e88:	371c      	adds	r7, #28
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b085      	sub	sp, #20
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
 8007e9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ea8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	f043 0307 	orr.w	r3, r3, #7
 8007eb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	609a      	str	r2, [r3, #8]
}
 8007ebc:	bf00      	nop
 8007ebe:	3714      	adds	r7, #20
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
 8007ed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ee2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	021a      	lsls	r2, r3, #8
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	431a      	orrs	r2, r3
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	697a      	ldr	r2, [r7, #20]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	609a      	str	r2, [r3, #8]
}
 8007efc:	bf00      	nop
 8007efe:	371c      	adds	r7, #28
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b087      	sub	sp, #28
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	f003 031f 	and.w	r3, r3, #31
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6a1a      	ldr	r2, [r3, #32]
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	43db      	mvns	r3, r3
 8007f2a:	401a      	ands	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6a1a      	ldr	r2, [r3, #32]
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	f003 031f 	and.w	r3, r3, #31
 8007f3a:	6879      	ldr	r1, [r7, #4]
 8007f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007f40:	431a      	orrs	r2, r3
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	621a      	str	r2, [r3, #32]
}
 8007f46:	bf00      	nop
 8007f48:	371c      	adds	r7, #28
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
	...

08007f54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b085      	sub	sp, #20
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d101      	bne.n	8007f6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f68:	2302      	movs	r3, #2
 8007f6a:	e05a      	b.n	8008022 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2202      	movs	r2, #2
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a21      	ldr	r2, [pc, #132]	; (8008030 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d022      	beq.n	8007ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb8:	d01d      	beq.n	8007ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a1d      	ldr	r2, [pc, #116]	; (8008034 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d018      	beq.n	8007ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a1b      	ldr	r2, [pc, #108]	; (8008038 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d013      	beq.n	8007ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a1a      	ldr	r2, [pc, #104]	; (800803c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d00e      	beq.n	8007ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a18      	ldr	r2, [pc, #96]	; (8008040 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d009      	beq.n	8007ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a17      	ldr	r2, [pc, #92]	; (8008044 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d004      	beq.n	8007ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a15      	ldr	r2, [pc, #84]	; (8008048 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d10c      	bne.n	8008010 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ffc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	4313      	orrs	r3, r2
 8008006:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	40010000 	.word	0x40010000
 8008034:	40000400 	.word	0x40000400
 8008038:	40000800 	.word	0x40000800
 800803c:	40000c00 	.word	0x40000c00
 8008040:	40010400 	.word	0x40010400
 8008044:	40014000 	.word	0x40014000
 8008048:	40001800 	.word	0x40001800

0800804c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008054:	bf00      	nop
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d101      	bne.n	8008086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e03f      	b.n	8008106 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b00      	cmp	r3, #0
 8008090:	d106      	bne.n	80080a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7fa fd72 	bl	8002b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2224      	movs	r2, #36	; 0x24
 80080a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68da      	ldr	r2, [r3, #12]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 fddf 	bl	8008c7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	691a      	ldr	r2, [r3, #16]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	695a      	ldr	r2, [r3, #20]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68da      	ldr	r2, [r3, #12]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2220      	movs	r2, #32
 8008100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b08a      	sub	sp, #40	; 0x28
 8008112:	af02      	add	r7, sp, #8
 8008114:	60f8      	str	r0, [r7, #12]
 8008116:	60b9      	str	r1, [r7, #8]
 8008118:	603b      	str	r3, [r7, #0]
 800811a:	4613      	mov	r3, r2
 800811c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800811e:	2300      	movs	r3, #0
 8008120:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008128:	b2db      	uxtb	r3, r3
 800812a:	2b20      	cmp	r3, #32
 800812c:	d17c      	bne.n	8008228 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d002      	beq.n	800813a <HAL_UART_Transmit+0x2c>
 8008134:	88fb      	ldrh	r3, [r7, #6]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d101      	bne.n	800813e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e075      	b.n	800822a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008144:	2b01      	cmp	r3, #1
 8008146:	d101      	bne.n	800814c <HAL_UART_Transmit+0x3e>
 8008148:	2302      	movs	r3, #2
 800814a:	e06e      	b.n	800822a <HAL_UART_Transmit+0x11c>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2221      	movs	r2, #33	; 0x21
 800815e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008162:	f7fb f8d7 	bl	8003314 <HAL_GetTick>
 8008166:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	88fa      	ldrh	r2, [r7, #6]
 800816c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	88fa      	ldrh	r2, [r7, #6]
 8008172:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800817c:	d108      	bne.n	8008190 <HAL_UART_Transmit+0x82>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d104      	bne.n	8008190 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008186:	2300      	movs	r3, #0
 8008188:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	61bb      	str	r3, [r7, #24]
 800818e:	e003      	b.n	8008198 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008194:	2300      	movs	r3, #0
 8008196:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80081a0:	e02a      	b.n	80081f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	9300      	str	r3, [sp, #0]
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2200      	movs	r2, #0
 80081aa:	2180      	movs	r1, #128	; 0x80
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f000 fb1f 	bl	80087f0 <UART_WaitOnFlagUntilTimeout>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e036      	b.n	800822a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10b      	bne.n	80081da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	461a      	mov	r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	3302      	adds	r3, #2
 80081d6:	61bb      	str	r3, [r7, #24]
 80081d8:	e007      	b.n	80081ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	781a      	ldrb	r2, [r3, #0]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	3301      	adds	r3, #1
 80081e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	3b01      	subs	r3, #1
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1cf      	bne.n	80081a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	2200      	movs	r2, #0
 800820a:	2140      	movs	r1, #64	; 0x40
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f000 faef 	bl	80087f0 <UART_WaitOnFlagUntilTimeout>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d001      	beq.n	800821c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	e006      	b.n	800822a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2220      	movs	r2, #32
 8008220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008224:	2300      	movs	r3, #0
 8008226:	e000      	b.n	800822a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008228:	2302      	movs	r3, #2
  }
}
 800822a:	4618      	mov	r0, r3
 800822c:	3720      	adds	r7, #32
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b084      	sub	sp, #16
 8008236:	af00      	add	r7, sp, #0
 8008238:	60f8      	str	r0, [r7, #12]
 800823a:	60b9      	str	r1, [r7, #8]
 800823c:	4613      	mov	r3, r2
 800823e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008246:	b2db      	uxtb	r3, r3
 8008248:	2b20      	cmp	r3, #32
 800824a:	d11d      	bne.n	8008288 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d002      	beq.n	8008258 <HAL_UART_Receive_IT+0x26>
 8008252:	88fb      	ldrh	r3, [r7, #6]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d101      	bne.n	800825c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	e016      	b.n	800828a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008262:	2b01      	cmp	r3, #1
 8008264:	d101      	bne.n	800826a <HAL_UART_Receive_IT+0x38>
 8008266:	2302      	movs	r3, #2
 8008268:	e00f      	b.n	800828a <HAL_UART_Receive_IT+0x58>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2201      	movs	r2, #1
 800826e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008278:	88fb      	ldrh	r3, [r7, #6]
 800827a:	461a      	mov	r2, r3
 800827c:	68b9      	ldr	r1, [r7, #8]
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f000 fb24 	bl	80088cc <UART_Start_Receive_IT>
 8008284:	4603      	mov	r3, r0
 8008286:	e000      	b.n	800828a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008288:	2302      	movs	r3, #2
  }
}
 800828a:	4618      	mov	r0, r3
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
	...

08008294 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b0ba      	sub	sp, #232	; 0xe8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80082c0:	2300      	movs	r3, #0
 80082c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80082c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ca:	f003 030f 	and.w	r3, r3, #15
 80082ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80082d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10f      	bne.n	80082fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082de:	f003 0320 	and.w	r3, r3, #32
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d009      	beq.n	80082fa <HAL_UART_IRQHandler+0x66>
 80082e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082ea:	f003 0320 	and.w	r3, r3, #32
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d003      	beq.n	80082fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fc07 	bl	8008b06 <UART_Receive_IT>
      return;
 80082f8:	e256      	b.n	80087a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80082fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f000 80de 	beq.w	80084c0 <HAL_UART_IRQHandler+0x22c>
 8008304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008308:	f003 0301 	and.w	r3, r3, #1
 800830c:	2b00      	cmp	r3, #0
 800830e:	d106      	bne.n	800831e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008314:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 80d1 	beq.w	80084c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800831e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00b      	beq.n	8008342 <HAL_UART_IRQHandler+0xae>
 800832a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800832e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008332:	2b00      	cmp	r3, #0
 8008334:	d005      	beq.n	8008342 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833a:	f043 0201 	orr.w	r2, r3, #1
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008346:	f003 0304 	and.w	r3, r3, #4
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00b      	beq.n	8008366 <HAL_UART_IRQHandler+0xd2>
 800834e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	2b00      	cmp	r3, #0
 8008358:	d005      	beq.n	8008366 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835e:	f043 0202 	orr.w	r2, r3, #2
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800836a:	f003 0302 	and.w	r3, r3, #2
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00b      	beq.n	800838a <HAL_UART_IRQHandler+0xf6>
 8008372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008376:	f003 0301 	and.w	r3, r3, #1
 800837a:	2b00      	cmp	r3, #0
 800837c:	d005      	beq.n	800838a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008382:	f043 0204 	orr.w	r2, r3, #4
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800838a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800838e:	f003 0308 	and.w	r3, r3, #8
 8008392:	2b00      	cmp	r3, #0
 8008394:	d011      	beq.n	80083ba <HAL_UART_IRQHandler+0x126>
 8008396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800839a:	f003 0320 	and.w	r3, r3, #32
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d105      	bne.n	80083ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80083a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d005      	beq.n	80083ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b2:	f043 0208 	orr.w	r2, r3, #8
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f000 81ed 	beq.w	800879e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083c8:	f003 0320 	and.w	r3, r3, #32
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d008      	beq.n	80083e2 <HAL_UART_IRQHandler+0x14e>
 80083d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083d4:	f003 0320 	and.w	r3, r3, #32
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d002      	beq.n	80083e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 fb92 	bl	8008b06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	695b      	ldr	r3, [r3, #20]
 80083e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ec:	2b40      	cmp	r3, #64	; 0x40
 80083ee:	bf0c      	ite	eq
 80083f0:	2301      	moveq	r3, #1
 80083f2:	2300      	movne	r3, #0
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fe:	f003 0308 	and.w	r3, r3, #8
 8008402:	2b00      	cmp	r3, #0
 8008404:	d103      	bne.n	800840e <HAL_UART_IRQHandler+0x17a>
 8008406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800840a:	2b00      	cmp	r3, #0
 800840c:	d04f      	beq.n	80084ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fa9a 	bl	8008948 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	695b      	ldr	r3, [r3, #20]
 800841a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800841e:	2b40      	cmp	r3, #64	; 0x40
 8008420:	d141      	bne.n	80084a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3314      	adds	r3, #20
 8008428:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008430:	e853 3f00 	ldrex	r3, [r3]
 8008434:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008438:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800843c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	3314      	adds	r3, #20
 800844a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800844e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008452:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008456:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800845a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800845e:	e841 2300 	strex	r3, r2, [r1]
 8008462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1d9      	bne.n	8008422 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008472:	2b00      	cmp	r3, #0
 8008474:	d013      	beq.n	800849e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847a:	4a7d      	ldr	r2, [pc, #500]	; (8008670 <HAL_UART_IRQHandler+0x3dc>)
 800847c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008482:	4618      	mov	r0, r3
 8008484:	f7fb fd54 	bl	8003f30 <HAL_DMA_Abort_IT>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d016      	beq.n	80084bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008498:	4610      	mov	r0, r2
 800849a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800849c:	e00e      	b.n	80084bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f990 	bl	80087c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084a4:	e00a      	b.n	80084bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f98c 	bl	80087c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084ac:	e006      	b.n	80084bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f988 	bl	80087c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80084ba:	e170      	b.n	800879e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084bc:	bf00      	nop
    return;
 80084be:	e16e      	b.n	800879e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	f040 814a 	bne.w	800875e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80084ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ce:	f003 0310 	and.w	r3, r3, #16
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f000 8143 	beq.w	800875e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80084d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084dc:	f003 0310 	and.w	r3, r3, #16
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f000 813c 	beq.w	800875e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084e6:	2300      	movs	r3, #0
 80084e8:	60bb      	str	r3, [r7, #8]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	60bb      	str	r3, [r7, #8]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	60bb      	str	r3, [r7, #8]
 80084fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008506:	2b40      	cmp	r3, #64	; 0x40
 8008508:	f040 80b4 	bne.w	8008674 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008518:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800851c:	2b00      	cmp	r3, #0
 800851e:	f000 8140 	beq.w	80087a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008526:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800852a:	429a      	cmp	r2, r3
 800852c:	f080 8139 	bcs.w	80087a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008536:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853c:	69db      	ldr	r3, [r3, #28]
 800853e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008542:	f000 8088 	beq.w	8008656 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	330c      	adds	r3, #12
 800854c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008550:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008554:	e853 3f00 	ldrex	r3, [r3]
 8008558:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800855c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008564:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	330c      	adds	r3, #12
 800856e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008572:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008576:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800857e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008582:	e841 2300 	strex	r3, r2, [r1]
 8008586:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800858a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1d9      	bne.n	8008546 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	3314      	adds	r3, #20
 8008598:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800859c:	e853 3f00 	ldrex	r3, [r3]
 80085a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80085a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085a4:	f023 0301 	bic.w	r3, r3, #1
 80085a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3314      	adds	r3, #20
 80085b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80085b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80085ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80085be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80085c2:	e841 2300 	strex	r3, r2, [r1]
 80085c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80085c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1e1      	bne.n	8008592 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	3314      	adds	r3, #20
 80085d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085d8:	e853 3f00 	ldrex	r3, [r3]
 80085dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80085de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3314      	adds	r3, #20
 80085ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80085f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80085f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80085f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80085fa:	e841 2300 	strex	r3, r2, [r1]
 80085fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1e3      	bne.n	80085ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2220      	movs	r2, #32
 800860a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	330c      	adds	r3, #12
 800861a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800861e:	e853 3f00 	ldrex	r3, [r3]
 8008622:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008626:	f023 0310 	bic.w	r3, r3, #16
 800862a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	330c      	adds	r3, #12
 8008634:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008638:	65ba      	str	r2, [r7, #88]	; 0x58
 800863a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800863e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008640:	e841 2300 	strex	r3, r2, [r1]
 8008644:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1e3      	bne.n	8008614 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008650:	4618      	mov	r0, r3
 8008652:	f7fb fbfd 	bl	8003e50 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800865e:	b29b      	uxth	r3, r3
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	b29b      	uxth	r3, r3
 8008664:	4619      	mov	r1, r3
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f8b6 	bl	80087d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800866c:	e099      	b.n	80087a2 <HAL_UART_IRQHandler+0x50e>
 800866e:	bf00      	nop
 8008670:	08008a0f 	.word	0x08008a0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800867c:	b29b      	uxth	r3, r3
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008688:	b29b      	uxth	r3, r3
 800868a:	2b00      	cmp	r3, #0
 800868c:	f000 808b 	beq.w	80087a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008690:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008694:	2b00      	cmp	r3, #0
 8008696:	f000 8086 	beq.w	80087a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	330c      	adds	r3, #12
 80086a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a4:	e853 3f00 	ldrex	r3, [r3]
 80086a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	330c      	adds	r3, #12
 80086ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80086be:	647a      	str	r2, [r7, #68]	; 0x44
 80086c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086c6:	e841 2300 	strex	r3, r2, [r1]
 80086ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1e3      	bne.n	800869a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3314      	adds	r3, #20
 80086d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086dc:	e853 3f00 	ldrex	r3, [r3]
 80086e0:	623b      	str	r3, [r7, #32]
   return(result);
 80086e2:	6a3b      	ldr	r3, [r7, #32]
 80086e4:	f023 0301 	bic.w	r3, r3, #1
 80086e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	3314      	adds	r3, #20
 80086f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80086f6:	633a      	str	r2, [r7, #48]	; 0x30
 80086f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086fe:	e841 2300 	strex	r3, r2, [r1]
 8008702:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1e3      	bne.n	80086d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2220      	movs	r2, #32
 800870e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	330c      	adds	r3, #12
 800871e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	e853 3f00 	ldrex	r3, [r3]
 8008726:	60fb      	str	r3, [r7, #12]
   return(result);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f023 0310 	bic.w	r3, r3, #16
 800872e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	330c      	adds	r3, #12
 8008738:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800873c:	61fa      	str	r2, [r7, #28]
 800873e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008740:	69b9      	ldr	r1, [r7, #24]
 8008742:	69fa      	ldr	r2, [r7, #28]
 8008744:	e841 2300 	strex	r3, r2, [r1]
 8008748:	617b      	str	r3, [r7, #20]
   return(result);
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1e3      	bne.n	8008718 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008750:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008754:	4619      	mov	r1, r3
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f83e 	bl	80087d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800875c:	e023      	b.n	80087a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800875e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008766:	2b00      	cmp	r3, #0
 8008768:	d009      	beq.n	800877e <HAL_UART_IRQHandler+0x4ea>
 800876a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800876e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008772:	2b00      	cmp	r3, #0
 8008774:	d003      	beq.n	800877e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f95d 	bl	8008a36 <UART_Transmit_IT>
    return;
 800877c:	e014      	b.n	80087a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800877e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00e      	beq.n	80087a8 <HAL_UART_IRQHandler+0x514>
 800878a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800878e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008792:	2b00      	cmp	r3, #0
 8008794:	d008      	beq.n	80087a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f99d 	bl	8008ad6 <UART_EndTransmit_IT>
    return;
 800879c:	e004      	b.n	80087a8 <HAL_UART_IRQHandler+0x514>
    return;
 800879e:	bf00      	nop
 80087a0:	e002      	b.n	80087a8 <HAL_UART_IRQHandler+0x514>
      return;
 80087a2:	bf00      	nop
 80087a4:	e000      	b.n	80087a8 <HAL_UART_IRQHandler+0x514>
      return;
 80087a6:	bf00      	nop
  }
}
 80087a8:	37e8      	adds	r7, #232	; 0xe8
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop

080087b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	460b      	mov	r3, r1
 80087e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80087e4:	bf00      	nop
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b090      	sub	sp, #64	; 0x40
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	603b      	str	r3, [r7, #0]
 80087fc:	4613      	mov	r3, r2
 80087fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008800:	e050      	b.n	80088a4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008808:	d04c      	beq.n	80088a4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800880a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800880c:	2b00      	cmp	r3, #0
 800880e:	d007      	beq.n	8008820 <UART_WaitOnFlagUntilTimeout+0x30>
 8008810:	f7fa fd80 	bl	8003314 <HAL_GetTick>
 8008814:	4602      	mov	r2, r0
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800881c:	429a      	cmp	r2, r3
 800881e:	d241      	bcs.n	80088a4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	330c      	adds	r3, #12
 8008826:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882a:	e853 3f00 	ldrex	r3, [r3]
 800882e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008836:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	330c      	adds	r3, #12
 800883e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008840:	637a      	str	r2, [r7, #52]	; 0x34
 8008842:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008844:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008846:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008848:	e841 2300 	strex	r3, r2, [r1]
 800884c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800884e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1e5      	bne.n	8008820 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	3314      	adds	r3, #20
 800885a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	e853 3f00 	ldrex	r3, [r3]
 8008862:	613b      	str	r3, [r7, #16]
   return(result);
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	f023 0301 	bic.w	r3, r3, #1
 800886a:	63bb      	str	r3, [r7, #56]	; 0x38
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	3314      	adds	r3, #20
 8008872:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008874:	623a      	str	r2, [r7, #32]
 8008876:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008878:	69f9      	ldr	r1, [r7, #28]
 800887a:	6a3a      	ldr	r2, [r7, #32]
 800887c:	e841 2300 	strex	r3, r2, [r1]
 8008880:	61bb      	str	r3, [r7, #24]
   return(result);
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1e5      	bne.n	8008854 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2220      	movs	r2, #32
 800888c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2220      	movs	r2, #32
 8008894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e00f      	b.n	80088c4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	4013      	ands	r3, r2
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	bf0c      	ite	eq
 80088b4:	2301      	moveq	r3, #1
 80088b6:	2300      	movne	r3, #0
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	461a      	mov	r2, r3
 80088bc:	79fb      	ldrb	r3, [r7, #7]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d09f      	beq.n	8008802 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3740      	adds	r7, #64	; 0x40
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	4613      	mov	r3, r2
 80088d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	88fa      	ldrh	r2, [r7, #6]
 80088e4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	88fa      	ldrh	r2, [r7, #6]
 80088ea:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2200      	movs	r2, #0
 80088f0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2222      	movs	r2, #34	; 0x22
 80088f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d007      	beq.n	800891a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68da      	ldr	r2, [r3, #12]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008918:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	695a      	ldr	r2, [r3, #20]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f042 0201 	orr.w	r2, r2, #1
 8008928:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	68da      	ldr	r2, [r3, #12]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f042 0220 	orr.w	r2, r2, #32
 8008938:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3714      	adds	r7, #20
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008948:	b480      	push	{r7}
 800894a:	b095      	sub	sp, #84	; 0x54
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	330c      	adds	r3, #12
 8008956:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800895a:	e853 3f00 	ldrex	r3, [r3]
 800895e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008962:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	330c      	adds	r3, #12
 800896e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008970:	643a      	str	r2, [r7, #64]	; 0x40
 8008972:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008974:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008976:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008978:	e841 2300 	strex	r3, r2, [r1]
 800897c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800897e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1e5      	bne.n	8008950 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	3314      	adds	r3, #20
 800898a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898c:	6a3b      	ldr	r3, [r7, #32]
 800898e:	e853 3f00 	ldrex	r3, [r3]
 8008992:	61fb      	str	r3, [r7, #28]
   return(result);
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	f023 0301 	bic.w	r3, r3, #1
 800899a:	64bb      	str	r3, [r7, #72]	; 0x48
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	3314      	adds	r3, #20
 80089a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089ac:	e841 2300 	strex	r3, r2, [r1]
 80089b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1e5      	bne.n	8008984 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d119      	bne.n	80089f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	330c      	adds	r3, #12
 80089c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	e853 3f00 	ldrex	r3, [r3]
 80089ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	f023 0310 	bic.w	r3, r3, #16
 80089d6:	647b      	str	r3, [r7, #68]	; 0x44
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	330c      	adds	r3, #12
 80089de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089e0:	61ba      	str	r2, [r7, #24]
 80089e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e4:	6979      	ldr	r1, [r7, #20]
 80089e6:	69ba      	ldr	r2, [r7, #24]
 80089e8:	e841 2300 	strex	r3, r2, [r1]
 80089ec:	613b      	str	r3, [r7, #16]
   return(result);
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1e5      	bne.n	80089c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2220      	movs	r2, #32
 80089f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008a02:	bf00      	nop
 8008a04:	3754      	adds	r7, #84	; 0x54
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b084      	sub	sp, #16
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f7ff fecb 	bl	80087c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a2e:	bf00      	nop
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008a36:	b480      	push	{r7}
 8008a38:	b085      	sub	sp, #20
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b21      	cmp	r3, #33	; 0x21
 8008a48:	d13e      	bne.n	8008ac8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a52:	d114      	bne.n	8008a7e <UART_Transmit_IT+0x48>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d110      	bne.n	8008a7e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6a1b      	ldr	r3, [r3, #32]
 8008a60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	881b      	ldrh	r3, [r3, #0]
 8008a66:	461a      	mov	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a1b      	ldr	r3, [r3, #32]
 8008a76:	1c9a      	adds	r2, r3, #2
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	621a      	str	r2, [r3, #32]
 8008a7c:	e008      	b.n	8008a90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6a1b      	ldr	r3, [r3, #32]
 8008a82:	1c59      	adds	r1, r3, #1
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	6211      	str	r1, [r2, #32]
 8008a88:	781a      	ldrb	r2, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	3b01      	subs	r3, #1
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d10f      	bne.n	8008ac4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68da      	ldr	r2, [r3, #12]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ab2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68da      	ldr	r2, [r3, #12]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ac2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	e000      	b.n	8008aca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008ac8:	2302      	movs	r3, #2
  }
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3714      	adds	r7, #20
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr

08008ad6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b082      	sub	sp, #8
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68da      	ldr	r2, [r3, #12]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008aec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2220      	movs	r2, #32
 8008af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7ff fe5a 	bl	80087b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3708      	adds	r7, #8
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b08c      	sub	sp, #48	; 0x30
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b22      	cmp	r3, #34	; 0x22
 8008b18:	f040 80ab 	bne.w	8008c72 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b24:	d117      	bne.n	8008b56 <UART_Receive_IT+0x50>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d113      	bne.n	8008b56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b36:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b44:	b29a      	uxth	r2, r3
 8008b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4e:	1c9a      	adds	r2, r3, #2
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	629a      	str	r2, [r3, #40]	; 0x28
 8008b54:	e026      	b.n	8008ba4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b68:	d007      	beq.n	8008b7a <UART_Receive_IT+0x74>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d10a      	bne.n	8008b88 <UART_Receive_IT+0x82>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d106      	bne.n	8008b88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	b2da      	uxtb	r2, r3
 8008b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b84:	701a      	strb	r2, [r3, #0]
 8008b86:	e008      	b.n	8008b9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b94:	b2da      	uxtb	r2, r3
 8008b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b9e:	1c5a      	adds	r2, r3, #1
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	3b01      	subs	r3, #1
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d15a      	bne.n	8008c6e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68da      	ldr	r2, [r3, #12]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f022 0220 	bic.w	r2, r2, #32
 8008bc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68da      	ldr	r2, [r3, #12]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008bd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	695a      	ldr	r2, [r3, #20]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f022 0201 	bic.w	r2, r2, #1
 8008be6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2220      	movs	r2, #32
 8008bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d135      	bne.n	8008c64 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	330c      	adds	r3, #12
 8008c04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	e853 3f00 	ldrex	r3, [r3]
 8008c0c:	613b      	str	r3, [r7, #16]
   return(result);
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	f023 0310 	bic.w	r3, r3, #16
 8008c14:	627b      	str	r3, [r7, #36]	; 0x24
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	330c      	adds	r3, #12
 8008c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c1e:	623a      	str	r2, [r7, #32]
 8008c20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c22:	69f9      	ldr	r1, [r7, #28]
 8008c24:	6a3a      	ldr	r2, [r7, #32]
 8008c26:	e841 2300 	strex	r3, r2, [r1]
 8008c2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d1e5      	bne.n	8008bfe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 0310 	and.w	r3, r3, #16
 8008c3c:	2b10      	cmp	r3, #16
 8008c3e:	d10a      	bne.n	8008c56 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c40:	2300      	movs	r3, #0
 8008c42:	60fb      	str	r3, [r7, #12]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	60fb      	str	r3, [r7, #12]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	60fb      	str	r3, [r7, #12]
 8008c54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f7ff fdbb 	bl	80087d8 <HAL_UARTEx_RxEventCallback>
 8008c62:	e002      	b.n	8008c6a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f7fa fa3d 	bl	80030e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	e002      	b.n	8008c74 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	e000      	b.n	8008c74 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008c72:	2302      	movs	r3, #2
  }
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3730      	adds	r7, #48	; 0x30
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c80:	b0c0      	sub	sp, #256	; 0x100
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c98:	68d9      	ldr	r1, [r3, #12]
 8008c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	ea40 0301 	orr.w	r3, r0, r1
 8008ca4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008caa:	689a      	ldr	r2, [r3, #8]
 8008cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	431a      	orrs	r2, r3
 8008cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cb8:	695b      	ldr	r3, [r3, #20]
 8008cba:	431a      	orrs	r2, r3
 8008cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008cd4:	f021 010c 	bic.w	r1, r1, #12
 8008cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ce2:	430b      	orrs	r3, r1
 8008ce4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	695b      	ldr	r3, [r3, #20]
 8008cee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cf6:	6999      	ldr	r1, [r3, #24]
 8008cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	ea40 0301 	orr.w	r3, r0, r1
 8008d02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	4b8f      	ldr	r3, [pc, #572]	; (8008f48 <UART_SetConfig+0x2cc>)
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d005      	beq.n	8008d1c <UART_SetConfig+0xa0>
 8008d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	4b8d      	ldr	r3, [pc, #564]	; (8008f4c <UART_SetConfig+0x2d0>)
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d104      	bne.n	8008d26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d1c:	f7fd f8b0 	bl	8005e80 <HAL_RCC_GetPCLK2Freq>
 8008d20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008d24:	e003      	b.n	8008d2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d26:	f7fd f897 	bl	8005e58 <HAL_RCC_GetPCLK1Freq>
 8008d2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d32:	69db      	ldr	r3, [r3, #28]
 8008d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d38:	f040 810c 	bne.w	8008f54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d40:	2200      	movs	r2, #0
 8008d42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008d4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008d4e:	4622      	mov	r2, r4
 8008d50:	462b      	mov	r3, r5
 8008d52:	1891      	adds	r1, r2, r2
 8008d54:	65b9      	str	r1, [r7, #88]	; 0x58
 8008d56:	415b      	adcs	r3, r3
 8008d58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008d5e:	4621      	mov	r1, r4
 8008d60:	eb12 0801 	adds.w	r8, r2, r1
 8008d64:	4629      	mov	r1, r5
 8008d66:	eb43 0901 	adc.w	r9, r3, r1
 8008d6a:	f04f 0200 	mov.w	r2, #0
 8008d6e:	f04f 0300 	mov.w	r3, #0
 8008d72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d7e:	4690      	mov	r8, r2
 8008d80:	4699      	mov	r9, r3
 8008d82:	4623      	mov	r3, r4
 8008d84:	eb18 0303 	adds.w	r3, r8, r3
 8008d88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d8c:	462b      	mov	r3, r5
 8008d8e:	eb49 0303 	adc.w	r3, r9, r3
 8008d92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008da2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008da6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008daa:	460b      	mov	r3, r1
 8008dac:	18db      	adds	r3, r3, r3
 8008dae:	653b      	str	r3, [r7, #80]	; 0x50
 8008db0:	4613      	mov	r3, r2
 8008db2:	eb42 0303 	adc.w	r3, r2, r3
 8008db6:	657b      	str	r3, [r7, #84]	; 0x54
 8008db8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008dbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008dc0:	f7f7 fa16 	bl	80001f0 <__aeabi_uldivmod>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	4b61      	ldr	r3, [pc, #388]	; (8008f50 <UART_SetConfig+0x2d4>)
 8008dca:	fba3 2302 	umull	r2, r3, r3, r2
 8008dce:	095b      	lsrs	r3, r3, #5
 8008dd0:	011c      	lsls	r4, r3, #4
 8008dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ddc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008de0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008de4:	4642      	mov	r2, r8
 8008de6:	464b      	mov	r3, r9
 8008de8:	1891      	adds	r1, r2, r2
 8008dea:	64b9      	str	r1, [r7, #72]	; 0x48
 8008dec:	415b      	adcs	r3, r3
 8008dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008df0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008df4:	4641      	mov	r1, r8
 8008df6:	eb12 0a01 	adds.w	sl, r2, r1
 8008dfa:	4649      	mov	r1, r9
 8008dfc:	eb43 0b01 	adc.w	fp, r3, r1
 8008e00:	f04f 0200 	mov.w	r2, #0
 8008e04:	f04f 0300 	mov.w	r3, #0
 8008e08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008e0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008e10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e14:	4692      	mov	sl, r2
 8008e16:	469b      	mov	fp, r3
 8008e18:	4643      	mov	r3, r8
 8008e1a:	eb1a 0303 	adds.w	r3, sl, r3
 8008e1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e22:	464b      	mov	r3, r9
 8008e24:	eb4b 0303 	adc.w	r3, fp, r3
 8008e28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008e3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008e40:	460b      	mov	r3, r1
 8008e42:	18db      	adds	r3, r3, r3
 8008e44:	643b      	str	r3, [r7, #64]	; 0x40
 8008e46:	4613      	mov	r3, r2
 8008e48:	eb42 0303 	adc.w	r3, r2, r3
 8008e4c:	647b      	str	r3, [r7, #68]	; 0x44
 8008e4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008e52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008e56:	f7f7 f9cb 	bl	80001f0 <__aeabi_uldivmod>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	4611      	mov	r1, r2
 8008e60:	4b3b      	ldr	r3, [pc, #236]	; (8008f50 <UART_SetConfig+0x2d4>)
 8008e62:	fba3 2301 	umull	r2, r3, r3, r1
 8008e66:	095b      	lsrs	r3, r3, #5
 8008e68:	2264      	movs	r2, #100	; 0x64
 8008e6a:	fb02 f303 	mul.w	r3, r2, r3
 8008e6e:	1acb      	subs	r3, r1, r3
 8008e70:	00db      	lsls	r3, r3, #3
 8008e72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008e76:	4b36      	ldr	r3, [pc, #216]	; (8008f50 <UART_SetConfig+0x2d4>)
 8008e78:	fba3 2302 	umull	r2, r3, r3, r2
 8008e7c:	095b      	lsrs	r3, r3, #5
 8008e7e:	005b      	lsls	r3, r3, #1
 8008e80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008e84:	441c      	add	r4, r3
 8008e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008e94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008e98:	4642      	mov	r2, r8
 8008e9a:	464b      	mov	r3, r9
 8008e9c:	1891      	adds	r1, r2, r2
 8008e9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008ea0:	415b      	adcs	r3, r3
 8008ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ea4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008ea8:	4641      	mov	r1, r8
 8008eaa:	1851      	adds	r1, r2, r1
 8008eac:	6339      	str	r1, [r7, #48]	; 0x30
 8008eae:	4649      	mov	r1, r9
 8008eb0:	414b      	adcs	r3, r1
 8008eb2:	637b      	str	r3, [r7, #52]	; 0x34
 8008eb4:	f04f 0200 	mov.w	r2, #0
 8008eb8:	f04f 0300 	mov.w	r3, #0
 8008ebc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008ec0:	4659      	mov	r1, fp
 8008ec2:	00cb      	lsls	r3, r1, #3
 8008ec4:	4651      	mov	r1, sl
 8008ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008eca:	4651      	mov	r1, sl
 8008ecc:	00ca      	lsls	r2, r1, #3
 8008ece:	4610      	mov	r0, r2
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	4642      	mov	r2, r8
 8008ed6:	189b      	adds	r3, r3, r2
 8008ed8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008edc:	464b      	mov	r3, r9
 8008ede:	460a      	mov	r2, r1
 8008ee0:	eb42 0303 	adc.w	r3, r2, r3
 8008ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008ef4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008ef8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008efc:	460b      	mov	r3, r1
 8008efe:	18db      	adds	r3, r3, r3
 8008f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f02:	4613      	mov	r3, r2
 8008f04:	eb42 0303 	adc.w	r3, r2, r3
 8008f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008f12:	f7f7 f96d 	bl	80001f0 <__aeabi_uldivmod>
 8008f16:	4602      	mov	r2, r0
 8008f18:	460b      	mov	r3, r1
 8008f1a:	4b0d      	ldr	r3, [pc, #52]	; (8008f50 <UART_SetConfig+0x2d4>)
 8008f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8008f20:	095b      	lsrs	r3, r3, #5
 8008f22:	2164      	movs	r1, #100	; 0x64
 8008f24:	fb01 f303 	mul.w	r3, r1, r3
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	00db      	lsls	r3, r3, #3
 8008f2c:	3332      	adds	r3, #50	; 0x32
 8008f2e:	4a08      	ldr	r2, [pc, #32]	; (8008f50 <UART_SetConfig+0x2d4>)
 8008f30:	fba2 2303 	umull	r2, r3, r2, r3
 8008f34:	095b      	lsrs	r3, r3, #5
 8008f36:	f003 0207 	and.w	r2, r3, #7
 8008f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4422      	add	r2, r4
 8008f42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008f44:	e105      	b.n	8009152 <UART_SetConfig+0x4d6>
 8008f46:	bf00      	nop
 8008f48:	40011000 	.word	0x40011000
 8008f4c:	40011400 	.word	0x40011400
 8008f50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008f5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008f62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008f66:	4642      	mov	r2, r8
 8008f68:	464b      	mov	r3, r9
 8008f6a:	1891      	adds	r1, r2, r2
 8008f6c:	6239      	str	r1, [r7, #32]
 8008f6e:	415b      	adcs	r3, r3
 8008f70:	627b      	str	r3, [r7, #36]	; 0x24
 8008f72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f76:	4641      	mov	r1, r8
 8008f78:	1854      	adds	r4, r2, r1
 8008f7a:	4649      	mov	r1, r9
 8008f7c:	eb43 0501 	adc.w	r5, r3, r1
 8008f80:	f04f 0200 	mov.w	r2, #0
 8008f84:	f04f 0300 	mov.w	r3, #0
 8008f88:	00eb      	lsls	r3, r5, #3
 8008f8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f8e:	00e2      	lsls	r2, r4, #3
 8008f90:	4614      	mov	r4, r2
 8008f92:	461d      	mov	r5, r3
 8008f94:	4643      	mov	r3, r8
 8008f96:	18e3      	adds	r3, r4, r3
 8008f98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f9c:	464b      	mov	r3, r9
 8008f9e:	eb45 0303 	adc.w	r3, r5, r3
 8008fa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008fb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008fb6:	f04f 0200 	mov.w	r2, #0
 8008fba:	f04f 0300 	mov.w	r3, #0
 8008fbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008fc2:	4629      	mov	r1, r5
 8008fc4:	008b      	lsls	r3, r1, #2
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fcc:	4621      	mov	r1, r4
 8008fce:	008a      	lsls	r2, r1, #2
 8008fd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008fd4:	f7f7 f90c 	bl	80001f0 <__aeabi_uldivmod>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	460b      	mov	r3, r1
 8008fdc:	4b60      	ldr	r3, [pc, #384]	; (8009160 <UART_SetConfig+0x4e4>)
 8008fde:	fba3 2302 	umull	r2, r3, r3, r2
 8008fe2:	095b      	lsrs	r3, r3, #5
 8008fe4:	011c      	lsls	r4, r3, #4
 8008fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fea:	2200      	movs	r2, #0
 8008fec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008ff0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008ff4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008ff8:	4642      	mov	r2, r8
 8008ffa:	464b      	mov	r3, r9
 8008ffc:	1891      	adds	r1, r2, r2
 8008ffe:	61b9      	str	r1, [r7, #24]
 8009000:	415b      	adcs	r3, r3
 8009002:	61fb      	str	r3, [r7, #28]
 8009004:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009008:	4641      	mov	r1, r8
 800900a:	1851      	adds	r1, r2, r1
 800900c:	6139      	str	r1, [r7, #16]
 800900e:	4649      	mov	r1, r9
 8009010:	414b      	adcs	r3, r1
 8009012:	617b      	str	r3, [r7, #20]
 8009014:	f04f 0200 	mov.w	r2, #0
 8009018:	f04f 0300 	mov.w	r3, #0
 800901c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009020:	4659      	mov	r1, fp
 8009022:	00cb      	lsls	r3, r1, #3
 8009024:	4651      	mov	r1, sl
 8009026:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800902a:	4651      	mov	r1, sl
 800902c:	00ca      	lsls	r2, r1, #3
 800902e:	4610      	mov	r0, r2
 8009030:	4619      	mov	r1, r3
 8009032:	4603      	mov	r3, r0
 8009034:	4642      	mov	r2, r8
 8009036:	189b      	adds	r3, r3, r2
 8009038:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800903c:	464b      	mov	r3, r9
 800903e:	460a      	mov	r2, r1
 8009040:	eb42 0303 	adc.w	r3, r2, r3
 8009044:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	67bb      	str	r3, [r7, #120]	; 0x78
 8009052:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009054:	f04f 0200 	mov.w	r2, #0
 8009058:	f04f 0300 	mov.w	r3, #0
 800905c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009060:	4649      	mov	r1, r9
 8009062:	008b      	lsls	r3, r1, #2
 8009064:	4641      	mov	r1, r8
 8009066:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800906a:	4641      	mov	r1, r8
 800906c:	008a      	lsls	r2, r1, #2
 800906e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009072:	f7f7 f8bd 	bl	80001f0 <__aeabi_uldivmod>
 8009076:	4602      	mov	r2, r0
 8009078:	460b      	mov	r3, r1
 800907a:	4b39      	ldr	r3, [pc, #228]	; (8009160 <UART_SetConfig+0x4e4>)
 800907c:	fba3 1302 	umull	r1, r3, r3, r2
 8009080:	095b      	lsrs	r3, r3, #5
 8009082:	2164      	movs	r1, #100	; 0x64
 8009084:	fb01 f303 	mul.w	r3, r1, r3
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	011b      	lsls	r3, r3, #4
 800908c:	3332      	adds	r3, #50	; 0x32
 800908e:	4a34      	ldr	r2, [pc, #208]	; (8009160 <UART_SetConfig+0x4e4>)
 8009090:	fba2 2303 	umull	r2, r3, r2, r3
 8009094:	095b      	lsrs	r3, r3, #5
 8009096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800909a:	441c      	add	r4, r3
 800909c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090a0:	2200      	movs	r2, #0
 80090a2:	673b      	str	r3, [r7, #112]	; 0x70
 80090a4:	677a      	str	r2, [r7, #116]	; 0x74
 80090a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80090aa:	4642      	mov	r2, r8
 80090ac:	464b      	mov	r3, r9
 80090ae:	1891      	adds	r1, r2, r2
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	415b      	adcs	r3, r3
 80090b4:	60fb      	str	r3, [r7, #12]
 80090b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80090ba:	4641      	mov	r1, r8
 80090bc:	1851      	adds	r1, r2, r1
 80090be:	6039      	str	r1, [r7, #0]
 80090c0:	4649      	mov	r1, r9
 80090c2:	414b      	adcs	r3, r1
 80090c4:	607b      	str	r3, [r7, #4]
 80090c6:	f04f 0200 	mov.w	r2, #0
 80090ca:	f04f 0300 	mov.w	r3, #0
 80090ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80090d2:	4659      	mov	r1, fp
 80090d4:	00cb      	lsls	r3, r1, #3
 80090d6:	4651      	mov	r1, sl
 80090d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090dc:	4651      	mov	r1, sl
 80090de:	00ca      	lsls	r2, r1, #3
 80090e0:	4610      	mov	r0, r2
 80090e2:	4619      	mov	r1, r3
 80090e4:	4603      	mov	r3, r0
 80090e6:	4642      	mov	r2, r8
 80090e8:	189b      	adds	r3, r3, r2
 80090ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80090ec:	464b      	mov	r3, r9
 80090ee:	460a      	mov	r2, r1
 80090f0:	eb42 0303 	adc.w	r3, r2, r3
 80090f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80090f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	663b      	str	r3, [r7, #96]	; 0x60
 8009100:	667a      	str	r2, [r7, #100]	; 0x64
 8009102:	f04f 0200 	mov.w	r2, #0
 8009106:	f04f 0300 	mov.w	r3, #0
 800910a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800910e:	4649      	mov	r1, r9
 8009110:	008b      	lsls	r3, r1, #2
 8009112:	4641      	mov	r1, r8
 8009114:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009118:	4641      	mov	r1, r8
 800911a:	008a      	lsls	r2, r1, #2
 800911c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009120:	f7f7 f866 	bl	80001f0 <__aeabi_uldivmod>
 8009124:	4602      	mov	r2, r0
 8009126:	460b      	mov	r3, r1
 8009128:	4b0d      	ldr	r3, [pc, #52]	; (8009160 <UART_SetConfig+0x4e4>)
 800912a:	fba3 1302 	umull	r1, r3, r3, r2
 800912e:	095b      	lsrs	r3, r3, #5
 8009130:	2164      	movs	r1, #100	; 0x64
 8009132:	fb01 f303 	mul.w	r3, r1, r3
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	011b      	lsls	r3, r3, #4
 800913a:	3332      	adds	r3, #50	; 0x32
 800913c:	4a08      	ldr	r2, [pc, #32]	; (8009160 <UART_SetConfig+0x4e4>)
 800913e:	fba2 2303 	umull	r2, r3, r2, r3
 8009142:	095b      	lsrs	r3, r3, #5
 8009144:	f003 020f 	and.w	r2, r3, #15
 8009148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4422      	add	r2, r4
 8009150:	609a      	str	r2, [r3, #8]
}
 8009152:	bf00      	nop
 8009154:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009158:	46bd      	mov	sp, r7
 800915a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800915e:	bf00      	nop
 8009160:	51eb851f 	.word	0x51eb851f

08009164 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009164:	b084      	sub	sp, #16
 8009166:	b580      	push	{r7, lr}
 8009168:	b084      	sub	sp, #16
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
 800916e:	f107 001c 	add.w	r0, r7, #28
 8009172:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009178:	2b01      	cmp	r3, #1
 800917a:	d122      	bne.n	80091c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009180:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80091a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d105      	bne.n	80091b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 faa2 	bl	8009700 <USB_CoreReset>
 80091bc:	4603      	mov	r3, r0
 80091be:	73fb      	strb	r3, [r7, #15]
 80091c0:	e01a      	b.n	80091f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 fa96 	bl	8009700 <USB_CoreReset>
 80091d4:	4603      	mov	r3, r0
 80091d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80091d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d106      	bne.n	80091ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	639a      	str	r2, [r3, #56]	; 0x38
 80091ea:	e005      	b.n	80091f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80091f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d10b      	bne.n	8009216 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	f043 0206 	orr.w	r2, r3, #6
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	f043 0220 	orr.w	r2, r3, #32
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009216:	7bfb      	ldrb	r3, [r7, #15]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009222:	b004      	add	sp, #16
 8009224:	4770      	bx	lr

08009226 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009226:	b480      	push	{r7}
 8009228:	b083      	sub	sp, #12
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	f023 0201 	bic.w	r2, r3, #1
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	460b      	mov	r3, r1
 8009252:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009254:	2300      	movs	r3, #0
 8009256:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009264:	78fb      	ldrb	r3, [r7, #3]
 8009266:	2b01      	cmp	r3, #1
 8009268:	d115      	bne.n	8009296 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009276:	2001      	movs	r0, #1
 8009278:	f7fa f858 	bl	800332c <HAL_Delay>
      ms++;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	3301      	adds	r3, #1
 8009280:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 fa2e 	bl	80096e4 <USB_GetMode>
 8009288:	4603      	mov	r3, r0
 800928a:	2b01      	cmp	r3, #1
 800928c:	d01e      	beq.n	80092cc <USB_SetCurrentMode+0x84>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2b31      	cmp	r3, #49	; 0x31
 8009292:	d9f0      	bls.n	8009276 <USB_SetCurrentMode+0x2e>
 8009294:	e01a      	b.n	80092cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009296:	78fb      	ldrb	r3, [r7, #3]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d115      	bne.n	80092c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80092a8:	2001      	movs	r0, #1
 80092aa:	f7fa f83f 	bl	800332c <HAL_Delay>
      ms++;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	3301      	adds	r3, #1
 80092b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 fa15 	bl	80096e4 <USB_GetMode>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d005      	beq.n	80092cc <USB_SetCurrentMode+0x84>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2b31      	cmp	r3, #49	; 0x31
 80092c4:	d9f0      	bls.n	80092a8 <USB_SetCurrentMode+0x60>
 80092c6:	e001      	b.n	80092cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	e005      	b.n	80092d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2b32      	cmp	r3, #50	; 0x32
 80092d0:	d101      	bne.n	80092d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	e000      	b.n	80092d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80092d6:	2300      	movs	r3, #0
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092e0:	b084      	sub	sp, #16
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b086      	sub	sp, #24
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80092ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80092fa:	2300      	movs	r3, #0
 80092fc:	613b      	str	r3, [r7, #16]
 80092fe:	e009      	b.n	8009314 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	3340      	adds	r3, #64	; 0x40
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4413      	add	r3, r2
 800930a:	2200      	movs	r2, #0
 800930c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	3301      	adds	r3, #1
 8009312:	613b      	str	r3, [r7, #16]
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	2b0e      	cmp	r3, #14
 8009318:	d9f2      	bls.n	8009300 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800931a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800931c:	2b00      	cmp	r3, #0
 800931e:	d11c      	bne.n	800935a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800932e:	f043 0302 	orr.w	r3, r3, #2
 8009332:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009338:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009344:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009350:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	639a      	str	r2, [r3, #56]	; 0x38
 8009358:	e00b      	b.n	8009372 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800936a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009378:	461a      	mov	r2, r3
 800937a:	2300      	movs	r3, #0
 800937c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009384:	4619      	mov	r1, r3
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800938c:	461a      	mov	r2, r3
 800938e:	680b      	ldr	r3, [r1, #0]
 8009390:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009394:	2b01      	cmp	r3, #1
 8009396:	d10c      	bne.n	80093b2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939a:	2b00      	cmp	r3, #0
 800939c:	d104      	bne.n	80093a8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800939e:	2100      	movs	r1, #0
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 f965 	bl	8009670 <USB_SetDevSpeed>
 80093a6:	e008      	b.n	80093ba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80093a8:	2101      	movs	r1, #1
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f960 	bl	8009670 <USB_SetDevSpeed>
 80093b0:	e003      	b.n	80093ba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80093b2:	2103      	movs	r1, #3
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 f95b 	bl	8009670 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80093ba:	2110      	movs	r1, #16
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 f8f3 	bl	80095a8 <USB_FlushTxFifo>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 f91f 	bl	8009610 <USB_FlushRxFifo>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d001      	beq.n	80093dc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80093d8:	2301      	movs	r3, #1
 80093da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093e2:	461a      	mov	r2, r3
 80093e4:	2300      	movs	r3, #0
 80093e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ee:	461a      	mov	r2, r3
 80093f0:	2300      	movs	r3, #0
 80093f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093fa:	461a      	mov	r2, r3
 80093fc:	2300      	movs	r3, #0
 80093fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009400:	2300      	movs	r3, #0
 8009402:	613b      	str	r3, [r7, #16]
 8009404:	e043      	b.n	800948e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	015a      	lsls	r2, r3, #5
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	4413      	add	r3, r2
 800940e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009418:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800941c:	d118      	bne.n	8009450 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10a      	bne.n	800943a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	015a      	lsls	r2, r3, #5
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	4413      	add	r3, r2
 800942c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009430:	461a      	mov	r2, r3
 8009432:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009436:	6013      	str	r3, [r2, #0]
 8009438:	e013      	b.n	8009462 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	015a      	lsls	r2, r3, #5
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	4413      	add	r3, r2
 8009442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009446:	461a      	mov	r2, r3
 8009448:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800944c:	6013      	str	r3, [r2, #0]
 800944e:	e008      	b.n	8009462 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	015a      	lsls	r2, r3, #5
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	4413      	add	r3, r2
 8009458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800945c:	461a      	mov	r2, r3
 800945e:	2300      	movs	r3, #0
 8009460:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	015a      	lsls	r2, r3, #5
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	4413      	add	r3, r2
 800946a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800946e:	461a      	mov	r2, r3
 8009470:	2300      	movs	r3, #0
 8009472:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	015a      	lsls	r2, r3, #5
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	4413      	add	r3, r2
 800947c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009480:	461a      	mov	r2, r3
 8009482:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009486:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	3301      	adds	r3, #1
 800948c:	613b      	str	r3, [r7, #16]
 800948e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009490:	693a      	ldr	r2, [r7, #16]
 8009492:	429a      	cmp	r2, r3
 8009494:	d3b7      	bcc.n	8009406 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009496:	2300      	movs	r3, #0
 8009498:	613b      	str	r3, [r7, #16]
 800949a:	e043      	b.n	8009524 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	015a      	lsls	r2, r3, #5
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	4413      	add	r3, r2
 80094a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094b2:	d118      	bne.n	80094e6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10a      	bne.n	80094d0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	015a      	lsls	r2, r3, #5
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	4413      	add	r3, r2
 80094c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c6:	461a      	mov	r2, r3
 80094c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80094cc:	6013      	str	r3, [r2, #0]
 80094ce:	e013      	b.n	80094f8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	015a      	lsls	r2, r3, #5
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	4413      	add	r3, r2
 80094d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094dc:	461a      	mov	r2, r3
 80094de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80094e2:	6013      	str	r3, [r2, #0]
 80094e4:	e008      	b.n	80094f8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	015a      	lsls	r2, r3, #5
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	4413      	add	r3, r2
 80094ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094f2:	461a      	mov	r2, r3
 80094f4:	2300      	movs	r3, #0
 80094f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	015a      	lsls	r2, r3, #5
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	4413      	add	r3, r2
 8009500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009504:	461a      	mov	r2, r3
 8009506:	2300      	movs	r3, #0
 8009508:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	015a      	lsls	r2, r3, #5
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	4413      	add	r3, r2
 8009512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009516:	461a      	mov	r2, r3
 8009518:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800951c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	3301      	adds	r3, #1
 8009522:	613b      	str	r3, [r7, #16]
 8009524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009526:	693a      	ldr	r2, [r7, #16]
 8009528:	429a      	cmp	r2, r3
 800952a:	d3b7      	bcc.n	800949c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800953a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800953e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800954c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800954e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009550:	2b00      	cmp	r3, #0
 8009552:	d105      	bne.n	8009560 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	699b      	ldr	r3, [r3, #24]
 8009558:	f043 0210 	orr.w	r2, r3, #16
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	699a      	ldr	r2, [r3, #24]
 8009564:	4b0f      	ldr	r3, [pc, #60]	; (80095a4 <USB_DevInit+0x2c4>)
 8009566:	4313      	orrs	r3, r2
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800956c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800956e:	2b00      	cmp	r3, #0
 8009570:	d005      	beq.n	800957e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	699b      	ldr	r3, [r3, #24]
 8009576:	f043 0208 	orr.w	r2, r3, #8
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800957e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009580:	2b01      	cmp	r3, #1
 8009582:	d107      	bne.n	8009594 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800958c:	f043 0304 	orr.w	r3, r3, #4
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009594:	7dfb      	ldrb	r3, [r7, #23]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3718      	adds	r7, #24
 800959a:	46bd      	mov	sp, r7
 800959c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80095a0:	b004      	add	sp, #16
 80095a2:	4770      	bx	lr
 80095a4:	803c3800 	.word	0x803c3800

080095a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80095b2:	2300      	movs	r3, #0
 80095b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	3301      	adds	r3, #1
 80095ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	4a13      	ldr	r2, [pc, #76]	; (800960c <USB_FlushTxFifo+0x64>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d901      	bls.n	80095c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80095c4:	2303      	movs	r3, #3
 80095c6:	e01b      	b.n	8009600 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	691b      	ldr	r3, [r3, #16]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	daf2      	bge.n	80095b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80095d0:	2300      	movs	r3, #0
 80095d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	019b      	lsls	r3, r3, #6
 80095d8:	f043 0220 	orr.w	r2, r3, #32
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	3301      	adds	r3, #1
 80095e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	4a08      	ldr	r2, [pc, #32]	; (800960c <USB_FlushTxFifo+0x64>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d901      	bls.n	80095f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80095ee:	2303      	movs	r3, #3
 80095f0:	e006      	b.n	8009600 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	f003 0320 	and.w	r3, r3, #32
 80095fa:	2b20      	cmp	r3, #32
 80095fc:	d0f0      	beq.n	80095e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	3714      	adds	r7, #20
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr
 800960c:	00030d40 	.word	0x00030d40

08009610 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009610:	b480      	push	{r7}
 8009612:	b085      	sub	sp, #20
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009618:	2300      	movs	r3, #0
 800961a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	3301      	adds	r3, #1
 8009620:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	4a11      	ldr	r2, [pc, #68]	; (800966c <USB_FlushRxFifo+0x5c>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d901      	bls.n	800962e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800962a:	2303      	movs	r3, #3
 800962c:	e018      	b.n	8009660 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	2b00      	cmp	r3, #0
 8009634:	daf2      	bge.n	800961c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009636:	2300      	movs	r3, #0
 8009638:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2210      	movs	r2, #16
 800963e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	3301      	adds	r3, #1
 8009644:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	4a08      	ldr	r2, [pc, #32]	; (800966c <USB_FlushRxFifo+0x5c>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d901      	bls.n	8009652 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800964e:	2303      	movs	r3, #3
 8009650:	e006      	b.n	8009660 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	f003 0310 	and.w	r3, r3, #16
 800965a:	2b10      	cmp	r3, #16
 800965c:	d0f0      	beq.n	8009640 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3714      	adds	r7, #20
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr
 800966c:	00030d40 	.word	0x00030d40

08009670 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009670:	b480      	push	{r7}
 8009672:	b085      	sub	sp, #20
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	460b      	mov	r3, r1
 800967a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	78fb      	ldrb	r3, [r7, #3]
 800968a:	68f9      	ldr	r1, [r7, #12]
 800968c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009690:	4313      	orrs	r3, r2
 8009692:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr

080096a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80096a2:	b480      	push	{r7}
 80096a4:	b085      	sub	sp, #20
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80096bc:	f023 0303 	bic.w	r3, r3, #3
 80096c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096d0:	f043 0302 	orr.w	r3, r3, #2
 80096d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3714      	adds	r7, #20
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	695b      	ldr	r3, [r3, #20]
 80096f0:	f003 0301 	and.w	r3, r3, #1
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009700:	b480      	push	{r7}
 8009702:	b085      	sub	sp, #20
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009708:	2300      	movs	r3, #0
 800970a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	3301      	adds	r3, #1
 8009710:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	4a13      	ldr	r2, [pc, #76]	; (8009764 <USB_CoreReset+0x64>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d901      	bls.n	800971e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800971a:	2303      	movs	r3, #3
 800971c:	e01b      	b.n	8009756 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	2b00      	cmp	r3, #0
 8009724:	daf2      	bge.n	800970c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009726:	2300      	movs	r3, #0
 8009728:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	691b      	ldr	r3, [r3, #16]
 800972e:	f043 0201 	orr.w	r2, r3, #1
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	3301      	adds	r3, #1
 800973a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	4a09      	ldr	r2, [pc, #36]	; (8009764 <USB_CoreReset+0x64>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d901      	bls.n	8009748 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009744:	2303      	movs	r3, #3
 8009746:	e006      	b.n	8009756 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	691b      	ldr	r3, [r3, #16]
 800974c:	f003 0301 	and.w	r3, r3, #1
 8009750:	2b01      	cmp	r3, #1
 8009752:	d0f0      	beq.n	8009736 <USB_CoreReset+0x36>

  return HAL_OK;
 8009754:	2300      	movs	r3, #0
}
 8009756:	4618      	mov	r0, r3
 8009758:	3714      	adds	r7, #20
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	00030d40 	.word	0x00030d40

08009768 <__NVIC_SetPriority>:
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	4603      	mov	r3, r0
 8009770:	6039      	str	r1, [r7, #0]
 8009772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009778:	2b00      	cmp	r3, #0
 800977a:	db0a      	blt.n	8009792 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	b2da      	uxtb	r2, r3
 8009780:	490c      	ldr	r1, [pc, #48]	; (80097b4 <__NVIC_SetPriority+0x4c>)
 8009782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009786:	0112      	lsls	r2, r2, #4
 8009788:	b2d2      	uxtb	r2, r2
 800978a:	440b      	add	r3, r1
 800978c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009790:	e00a      	b.n	80097a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	b2da      	uxtb	r2, r3
 8009796:	4908      	ldr	r1, [pc, #32]	; (80097b8 <__NVIC_SetPriority+0x50>)
 8009798:	79fb      	ldrb	r3, [r7, #7]
 800979a:	f003 030f 	and.w	r3, r3, #15
 800979e:	3b04      	subs	r3, #4
 80097a0:	0112      	lsls	r2, r2, #4
 80097a2:	b2d2      	uxtb	r2, r2
 80097a4:	440b      	add	r3, r1
 80097a6:	761a      	strb	r2, [r3, #24]
}
 80097a8:	bf00      	nop
 80097aa:	370c      	adds	r7, #12
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr
 80097b4:	e000e100 	.word	0xe000e100
 80097b8:	e000ed00 	.word	0xe000ed00

080097bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80097bc:	b580      	push	{r7, lr}
 80097be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80097c0:	4b05      	ldr	r3, [pc, #20]	; (80097d8 <SysTick_Handler+0x1c>)
 80097c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80097c4:	f001 fd28 	bl	800b218 <xTaskGetSchedulerState>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d001      	beq.n	80097d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80097ce:	f002 fb13 	bl	800bdf8 <xPortSysTickHandler>
  }
}
 80097d2:	bf00      	nop
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	e000e010 	.word	0xe000e010

080097dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80097dc:	b580      	push	{r7, lr}
 80097de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80097e0:	2100      	movs	r1, #0
 80097e2:	f06f 0004 	mvn.w	r0, #4
 80097e6:	f7ff ffbf 	bl	8009768 <__NVIC_SetPriority>
#endif
}
 80097ea:	bf00      	nop
 80097ec:	bd80      	pop	{r7, pc}
	...

080097f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097f6:	f3ef 8305 	mrs	r3, IPSR
 80097fa:	603b      	str	r3, [r7, #0]
  return(result);
 80097fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d003      	beq.n	800980a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009802:	f06f 0305 	mvn.w	r3, #5
 8009806:	607b      	str	r3, [r7, #4]
 8009808:	e00c      	b.n	8009824 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800980a:	4b0a      	ldr	r3, [pc, #40]	; (8009834 <osKernelInitialize+0x44>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d105      	bne.n	800981e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009812:	4b08      	ldr	r3, [pc, #32]	; (8009834 <osKernelInitialize+0x44>)
 8009814:	2201      	movs	r2, #1
 8009816:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009818:	2300      	movs	r3, #0
 800981a:	607b      	str	r3, [r7, #4]
 800981c:	e002      	b.n	8009824 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800981e:	f04f 33ff 	mov.w	r3, #4294967295
 8009822:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009824:	687b      	ldr	r3, [r7, #4]
}
 8009826:	4618      	mov	r0, r3
 8009828:	370c      	adds	r7, #12
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	20000c9c 	.word	0x20000c9c

08009838 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800983e:	f3ef 8305 	mrs	r3, IPSR
 8009842:	603b      	str	r3, [r7, #0]
  return(result);
 8009844:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009846:	2b00      	cmp	r3, #0
 8009848:	d003      	beq.n	8009852 <osKernelStart+0x1a>
    stat = osErrorISR;
 800984a:	f06f 0305 	mvn.w	r3, #5
 800984e:	607b      	str	r3, [r7, #4]
 8009850:	e010      	b.n	8009874 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009852:	4b0b      	ldr	r3, [pc, #44]	; (8009880 <osKernelStart+0x48>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2b01      	cmp	r3, #1
 8009858:	d109      	bne.n	800986e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800985a:	f7ff ffbf 	bl	80097dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800985e:	4b08      	ldr	r3, [pc, #32]	; (8009880 <osKernelStart+0x48>)
 8009860:	2202      	movs	r2, #2
 8009862:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009864:	f001 f87c 	bl	800a960 <vTaskStartScheduler>
      stat = osOK;
 8009868:	2300      	movs	r3, #0
 800986a:	607b      	str	r3, [r7, #4]
 800986c:	e002      	b.n	8009874 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800986e:	f04f 33ff 	mov.w	r3, #4294967295
 8009872:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009874:	687b      	ldr	r3, [r7, #4]
}
 8009876:	4618      	mov	r0, r3
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	20000c9c 	.word	0x20000c9c

08009884 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009884:	b580      	push	{r7, lr}
 8009886:	b08e      	sub	sp, #56	; 0x38
 8009888:	af04      	add	r7, sp, #16
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009890:	2300      	movs	r3, #0
 8009892:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009894:	f3ef 8305 	mrs	r3, IPSR
 8009898:	617b      	str	r3, [r7, #20]
  return(result);
 800989a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800989c:	2b00      	cmp	r3, #0
 800989e:	d17e      	bne.n	800999e <osThreadNew+0x11a>
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d07b      	beq.n	800999e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80098a6:	2380      	movs	r3, #128	; 0x80
 80098a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80098aa:	2318      	movs	r3, #24
 80098ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80098ae:	2300      	movs	r3, #0
 80098b0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80098b2:	f04f 33ff 	mov.w	r3, #4294967295
 80098b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d045      	beq.n	800994a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d002      	beq.n	80098cc <osThreadNew+0x48>
        name = attr->name;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d002      	beq.n	80098da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	699b      	ldr	r3, [r3, #24]
 80098d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d008      	beq.n	80098f2 <osThreadNew+0x6e>
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	2b38      	cmp	r3, #56	; 0x38
 80098e4:	d805      	bhi.n	80098f2 <osThreadNew+0x6e>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	f003 0301 	and.w	r3, r3, #1
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d001      	beq.n	80098f6 <osThreadNew+0x72>
        return (NULL);
 80098f2:	2300      	movs	r3, #0
 80098f4:	e054      	b.n	80099a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	695b      	ldr	r3, [r3, #20]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d003      	beq.n	8009906 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	695b      	ldr	r3, [r3, #20]
 8009902:	089b      	lsrs	r3, r3, #2
 8009904:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00e      	beq.n	800992c <osThreadNew+0xa8>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	2bbb      	cmp	r3, #187	; 0xbb
 8009914:	d90a      	bls.n	800992c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800991a:	2b00      	cmp	r3, #0
 800991c:	d006      	beq.n	800992c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	695b      	ldr	r3, [r3, #20]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d002      	beq.n	800992c <osThreadNew+0xa8>
        mem = 1;
 8009926:	2301      	movs	r3, #1
 8009928:	61bb      	str	r3, [r7, #24]
 800992a:	e010      	b.n	800994e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d10c      	bne.n	800994e <osThreadNew+0xca>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d108      	bne.n	800994e <osThreadNew+0xca>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	691b      	ldr	r3, [r3, #16]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d104      	bne.n	800994e <osThreadNew+0xca>
          mem = 0;
 8009944:	2300      	movs	r3, #0
 8009946:	61bb      	str	r3, [r7, #24]
 8009948:	e001      	b.n	800994e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800994a:	2300      	movs	r3, #0
 800994c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	2b01      	cmp	r3, #1
 8009952:	d110      	bne.n	8009976 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800995c:	9202      	str	r2, [sp, #8]
 800995e:	9301      	str	r3, [sp, #4]
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	6a3a      	ldr	r2, [r7, #32]
 8009968:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 fe0c 	bl	800a588 <xTaskCreateStatic>
 8009970:	4603      	mov	r3, r0
 8009972:	613b      	str	r3, [r7, #16]
 8009974:	e013      	b.n	800999e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d110      	bne.n	800999e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800997c:	6a3b      	ldr	r3, [r7, #32]
 800997e:	b29a      	uxth	r2, r3
 8009980:	f107 0310 	add.w	r3, r7, #16
 8009984:	9301      	str	r3, [sp, #4]
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	9300      	str	r3, [sp, #0]
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f000 fe57 	bl	800a642 <xTaskCreate>
 8009994:	4603      	mov	r3, r0
 8009996:	2b01      	cmp	r3, #1
 8009998:	d001      	beq.n	800999e <osThreadNew+0x11a>
            hTask = NULL;
 800999a:	2300      	movs	r3, #0
 800999c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800999e:	693b      	ldr	r3, [r7, #16]
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3728      	adds	r7, #40	; 0x28
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099b0:	f3ef 8305 	mrs	r3, IPSR
 80099b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80099b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d003      	beq.n	80099c4 <osDelay+0x1c>
    stat = osErrorISR;
 80099bc:	f06f 0305 	mvn.w	r3, #5
 80099c0:	60fb      	str	r3, [r7, #12]
 80099c2:	e007      	b.n	80099d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d002      	beq.n	80099d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 ff92 	bl	800a8f8 <vTaskDelay>
    }
  }

  return (stat);
 80099d4:	68fb      	ldr	r3, [r7, #12]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
	...

080099e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	4a07      	ldr	r2, [pc, #28]	; (8009a0c <vApplicationGetIdleTaskMemory+0x2c>)
 80099f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	4a06      	ldr	r2, [pc, #24]	; (8009a10 <vApplicationGetIdleTaskMemory+0x30>)
 80099f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2280      	movs	r2, #128	; 0x80
 80099fc:	601a      	str	r2, [r3, #0]
}
 80099fe:	bf00      	nop
 8009a00:	3714      	adds	r7, #20
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop
 8009a0c:	20000ca0 	.word	0x20000ca0
 8009a10:	20000d5c 	.word	0x20000d5c

08009a14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	4a07      	ldr	r2, [pc, #28]	; (8009a40 <vApplicationGetTimerTaskMemory+0x2c>)
 8009a24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	4a06      	ldr	r2, [pc, #24]	; (8009a44 <vApplicationGetTimerTaskMemory+0x30>)
 8009a2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a32:	601a      	str	r2, [r3, #0]
}
 8009a34:	bf00      	nop
 8009a36:	3714      	adds	r7, #20
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr
 8009a40:	20000f5c 	.word	0x20000f5c
 8009a44:	20001018 	.word	0x20001018

08009a48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f103 0208 	add.w	r2, r3, #8
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f103 0208 	add.w	r2, r3, #8
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f103 0208 	add.w	r2, r3, #8
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009a7c:	bf00      	nop
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009a96:	bf00      	nop
 8009a98:	370c      	adds	r7, #12
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr

08009aa2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009aa2:	b480      	push	{r7}
 8009aa4:	b085      	sub	sp, #20
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	689a      	ldr	r2, [r3, #8]
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	683a      	ldr	r2, [r7, #0]
 8009ac6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	683a      	ldr	r2, [r7, #0]
 8009acc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	1c5a      	adds	r2, r3, #1
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	601a      	str	r2, [r3, #0]
}
 8009ade:	bf00      	nop
 8009ae0:	3714      	adds	r7, #20
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr

08009aea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009aea:	b480      	push	{r7}
 8009aec:	b085      	sub	sp, #20
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
 8009af2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b00:	d103      	bne.n	8009b0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	691b      	ldr	r3, [r3, #16]
 8009b06:	60fb      	str	r3, [r7, #12]
 8009b08:	e00c      	b.n	8009b24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	3308      	adds	r3, #8
 8009b0e:	60fb      	str	r3, [r7, #12]
 8009b10:	e002      	b.n	8009b18 <vListInsert+0x2e>
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	60fb      	str	r3, [r7, #12]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d2f6      	bcs.n	8009b12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	685a      	ldr	r2, [r3, #4]
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	683a      	ldr	r2, [r7, #0]
 8009b32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	683a      	ldr	r2, [r7, #0]
 8009b3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	1c5a      	adds	r2, r3, #1
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	601a      	str	r2, [r3, #0]
}
 8009b50:	bf00      	nop
 8009b52:	3714      	adds	r7, #20
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	6892      	ldr	r2, [r2, #8]
 8009b72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	6852      	ldr	r2, [r2, #4]
 8009b7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d103      	bne.n	8009b90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	689a      	ldr	r2, [r3, #8]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	1e5a      	subs	r2, r3, #1
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3714      	adds	r7, #20
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d10a      	bne.n	8009bda <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009bd6:	bf00      	nop
 8009bd8:	e7fe      	b.n	8009bd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009bda:	f002 f87b 	bl	800bcd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009be6:	68f9      	ldr	r1, [r7, #12]
 8009be8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009bea:	fb01 f303 	mul.w	r3, r1, r3
 8009bee:	441a      	add	r2, r3
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	68f9      	ldr	r1, [r7, #12]
 8009c0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c10:	fb01 f303 	mul.w	r3, r1, r3
 8009c14:	441a      	add	r2, r3
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	22ff      	movs	r2, #255	; 0xff
 8009c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	22ff      	movs	r2, #255	; 0xff
 8009c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d114      	bne.n	8009c5a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	691b      	ldr	r3, [r3, #16]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d01a      	beq.n	8009c6e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	3310      	adds	r3, #16
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f001 f929 	bl	800ae94 <xTaskRemoveFromEventList>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d012      	beq.n	8009c6e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009c48:	4b0c      	ldr	r3, [pc, #48]	; (8009c7c <xQueueGenericReset+0xcc>)
 8009c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c4e:	601a      	str	r2, [r3, #0]
 8009c50:	f3bf 8f4f 	dsb	sy
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	e009      	b.n	8009c6e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	3310      	adds	r3, #16
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7ff fef2 	bl	8009a48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	3324      	adds	r3, #36	; 0x24
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7ff feed 	bl	8009a48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009c6e:	f002 f861 	bl	800bd34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009c72:	2301      	movs	r3, #1
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	e000ed04 	.word	0xe000ed04

08009c80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b08e      	sub	sp, #56	; 0x38
 8009c84:	af02      	add	r7, sp, #8
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]
 8009c8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d10a      	bne.n	8009caa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009ca6:	bf00      	nop
 8009ca8:	e7fe      	b.n	8009ca8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d10a      	bne.n	8009cc6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb4:	f383 8811 	msr	BASEPRI, r3
 8009cb8:	f3bf 8f6f 	isb	sy
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009cc2:	bf00      	nop
 8009cc4:	e7fe      	b.n	8009cc4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d002      	beq.n	8009cd2 <xQueueGenericCreateStatic+0x52>
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d001      	beq.n	8009cd6 <xQueueGenericCreateStatic+0x56>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e000      	b.n	8009cd8 <xQueueGenericCreateStatic+0x58>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d10a      	bne.n	8009cf2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce0:	f383 8811 	msr	BASEPRI, r3
 8009ce4:	f3bf 8f6f 	isb	sy
 8009ce8:	f3bf 8f4f 	dsb	sy
 8009cec:	623b      	str	r3, [r7, #32]
}
 8009cee:	bf00      	nop
 8009cf0:	e7fe      	b.n	8009cf0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d102      	bne.n	8009cfe <xQueueGenericCreateStatic+0x7e>
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d101      	bne.n	8009d02 <xQueueGenericCreateStatic+0x82>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e000      	b.n	8009d04 <xQueueGenericCreateStatic+0x84>
 8009d02:	2300      	movs	r3, #0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d10a      	bne.n	8009d1e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0c:	f383 8811 	msr	BASEPRI, r3
 8009d10:	f3bf 8f6f 	isb	sy
 8009d14:	f3bf 8f4f 	dsb	sy
 8009d18:	61fb      	str	r3, [r7, #28]
}
 8009d1a:	bf00      	nop
 8009d1c:	e7fe      	b.n	8009d1c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009d1e:	2350      	movs	r3, #80	; 0x50
 8009d20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	2b50      	cmp	r3, #80	; 0x50
 8009d26:	d00a      	beq.n	8009d3e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2c:	f383 8811 	msr	BASEPRI, r3
 8009d30:	f3bf 8f6f 	isb	sy
 8009d34:	f3bf 8f4f 	dsb	sy
 8009d38:	61bb      	str	r3, [r7, #24]
}
 8009d3a:	bf00      	nop
 8009d3c:	e7fe      	b.n	8009d3c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009d3e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00d      	beq.n	8009d66 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d52:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d58:	9300      	str	r3, [sp, #0]
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	68b9      	ldr	r1, [r7, #8]
 8009d60:	68f8      	ldr	r0, [r7, #12]
 8009d62:	f000 f805 	bl	8009d70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3730      	adds	r7, #48	; 0x30
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
 8009d7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d103      	bne.n	8009d8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	69ba      	ldr	r2, [r7, #24]
 8009d88:	601a      	str	r2, [r3, #0]
 8009d8a:	e002      	b.n	8009d92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	68fa      	ldr	r2, [r7, #12]
 8009d96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	68ba      	ldr	r2, [r7, #8]
 8009d9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009d9e:	2101      	movs	r1, #1
 8009da0:	69b8      	ldr	r0, [r7, #24]
 8009da2:	f7ff ff05 	bl	8009bb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	78fa      	ldrb	r2, [r7, #3]
 8009daa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009dae:	bf00      	nop
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
	...

08009db8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b08e      	sub	sp, #56	; 0x38
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
 8009dc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d10a      	bne.n	8009dea <xQueueGenericSend+0x32>
	__asm volatile
 8009dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd8:	f383 8811 	msr	BASEPRI, r3
 8009ddc:	f3bf 8f6f 	isb	sy
 8009de0:	f3bf 8f4f 	dsb	sy
 8009de4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009de6:	bf00      	nop
 8009de8:	e7fe      	b.n	8009de8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d103      	bne.n	8009df8 <xQueueGenericSend+0x40>
 8009df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d101      	bne.n	8009dfc <xQueueGenericSend+0x44>
 8009df8:	2301      	movs	r3, #1
 8009dfa:	e000      	b.n	8009dfe <xQueueGenericSend+0x46>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d10a      	bne.n	8009e18 <xQueueGenericSend+0x60>
	__asm volatile
 8009e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e06:	f383 8811 	msr	BASEPRI, r3
 8009e0a:	f3bf 8f6f 	isb	sy
 8009e0e:	f3bf 8f4f 	dsb	sy
 8009e12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e14:	bf00      	nop
 8009e16:	e7fe      	b.n	8009e16 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	d103      	bne.n	8009e26 <xQueueGenericSend+0x6e>
 8009e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d101      	bne.n	8009e2a <xQueueGenericSend+0x72>
 8009e26:	2301      	movs	r3, #1
 8009e28:	e000      	b.n	8009e2c <xQueueGenericSend+0x74>
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d10a      	bne.n	8009e46 <xQueueGenericSend+0x8e>
	__asm volatile
 8009e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e34:	f383 8811 	msr	BASEPRI, r3
 8009e38:	f3bf 8f6f 	isb	sy
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	623b      	str	r3, [r7, #32]
}
 8009e42:	bf00      	nop
 8009e44:	e7fe      	b.n	8009e44 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e46:	f001 f9e7 	bl	800b218 <xTaskGetSchedulerState>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d102      	bne.n	8009e56 <xQueueGenericSend+0x9e>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d101      	bne.n	8009e5a <xQueueGenericSend+0xa2>
 8009e56:	2301      	movs	r3, #1
 8009e58:	e000      	b.n	8009e5c <xQueueGenericSend+0xa4>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d10a      	bne.n	8009e76 <xQueueGenericSend+0xbe>
	__asm volatile
 8009e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	61fb      	str	r3, [r7, #28]
}
 8009e72:	bf00      	nop
 8009e74:	e7fe      	b.n	8009e74 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e76:	f001 ff2d 	bl	800bcd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d302      	bcc.n	8009e8c <xQueueGenericSend+0xd4>
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	d129      	bne.n	8009ee0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e8c:	683a      	ldr	r2, [r7, #0]
 8009e8e:	68b9      	ldr	r1, [r7, #8]
 8009e90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e92:	f000 fa0b 	bl	800a2ac <prvCopyDataToQueue>
 8009e96:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d010      	beq.n	8009ec2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea2:	3324      	adds	r3, #36	; 0x24
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f000 fff5 	bl	800ae94 <xTaskRemoveFromEventList>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d013      	beq.n	8009ed8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009eb0:	4b3f      	ldr	r3, [pc, #252]	; (8009fb0 <xQueueGenericSend+0x1f8>)
 8009eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eb6:	601a      	str	r2, [r3, #0]
 8009eb8:	f3bf 8f4f 	dsb	sy
 8009ebc:	f3bf 8f6f 	isb	sy
 8009ec0:	e00a      	b.n	8009ed8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d007      	beq.n	8009ed8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ec8:	4b39      	ldr	r3, [pc, #228]	; (8009fb0 <xQueueGenericSend+0x1f8>)
 8009eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ece:	601a      	str	r2, [r3, #0]
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009ed8:	f001 ff2c 	bl	800bd34 <vPortExitCritical>
				return pdPASS;
 8009edc:	2301      	movs	r3, #1
 8009ede:	e063      	b.n	8009fa8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d103      	bne.n	8009eee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ee6:	f001 ff25 	bl	800bd34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009eea:	2300      	movs	r3, #0
 8009eec:	e05c      	b.n	8009fa8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d106      	bne.n	8009f02 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ef4:	f107 0314 	add.w	r3, r7, #20
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f001 f82f 	bl	800af5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009efe:	2301      	movs	r3, #1
 8009f00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f02:	f001 ff17 	bl	800bd34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f06:	f000 fd9b 	bl	800aa40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f0a:	f001 fee3 	bl	800bcd4 <vPortEnterCritical>
 8009f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f14:	b25b      	sxtb	r3, r3
 8009f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f1a:	d103      	bne.n	8009f24 <xQueueGenericSend+0x16c>
 8009f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f2a:	b25b      	sxtb	r3, r3
 8009f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f30:	d103      	bne.n	8009f3a <xQueueGenericSend+0x182>
 8009f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f34:	2200      	movs	r2, #0
 8009f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f3a:	f001 fefb 	bl	800bd34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f3e:	1d3a      	adds	r2, r7, #4
 8009f40:	f107 0314 	add.w	r3, r7, #20
 8009f44:	4611      	mov	r1, r2
 8009f46:	4618      	mov	r0, r3
 8009f48:	f001 f81e 	bl	800af88 <xTaskCheckForTimeOut>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d124      	bne.n	8009f9c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009f52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f54:	f000 faa2 	bl	800a49c <prvIsQueueFull>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d018      	beq.n	8009f90 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f60:	3310      	adds	r3, #16
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	4611      	mov	r1, r2
 8009f66:	4618      	mov	r0, r3
 8009f68:	f000 ff44 	bl	800adf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f6e:	f000 fa2d 	bl	800a3cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009f72:	f000 fd73 	bl	800aa5c <xTaskResumeAll>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f47f af7c 	bne.w	8009e76 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009f7e:	4b0c      	ldr	r3, [pc, #48]	; (8009fb0 <xQueueGenericSend+0x1f8>)
 8009f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f84:	601a      	str	r2, [r3, #0]
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	f3bf 8f6f 	isb	sy
 8009f8e:	e772      	b.n	8009e76 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009f90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f92:	f000 fa1b 	bl	800a3cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f96:	f000 fd61 	bl	800aa5c <xTaskResumeAll>
 8009f9a:	e76c      	b.n	8009e76 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009f9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f9e:	f000 fa15 	bl	800a3cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fa2:	f000 fd5b 	bl	800aa5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009fa6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3738      	adds	r7, #56	; 0x38
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	e000ed04 	.word	0xe000ed04

08009fb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b090      	sub	sp, #64	; 0x40
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
 8009fc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d10a      	bne.n	8009fe2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd0:	f383 8811 	msr	BASEPRI, r3
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009fde:	bf00      	nop
 8009fe0:	e7fe      	b.n	8009fe0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d103      	bne.n	8009ff0 <xQueueGenericSendFromISR+0x3c>
 8009fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d101      	bne.n	8009ff4 <xQueueGenericSendFromISR+0x40>
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e000      	b.n	8009ff6 <xQueueGenericSendFromISR+0x42>
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d10a      	bne.n	800a010 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffe:	f383 8811 	msr	BASEPRI, r3
 800a002:	f3bf 8f6f 	isb	sy
 800a006:	f3bf 8f4f 	dsb	sy
 800a00a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a00c:	bf00      	nop
 800a00e:	e7fe      	b.n	800a00e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	2b02      	cmp	r3, #2
 800a014:	d103      	bne.n	800a01e <xQueueGenericSendFromISR+0x6a>
 800a016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d101      	bne.n	800a022 <xQueueGenericSendFromISR+0x6e>
 800a01e:	2301      	movs	r3, #1
 800a020:	e000      	b.n	800a024 <xQueueGenericSendFromISR+0x70>
 800a022:	2300      	movs	r3, #0
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10a      	bne.n	800a03e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02c:	f383 8811 	msr	BASEPRI, r3
 800a030:	f3bf 8f6f 	isb	sy
 800a034:	f3bf 8f4f 	dsb	sy
 800a038:	623b      	str	r3, [r7, #32]
}
 800a03a:	bf00      	nop
 800a03c:	e7fe      	b.n	800a03c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a03e:	f001 ff2b 	bl	800be98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a042:	f3ef 8211 	mrs	r2, BASEPRI
 800a046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04a:	f383 8811 	msr	BASEPRI, r3
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	f3bf 8f4f 	dsb	sy
 800a056:	61fa      	str	r2, [r7, #28]
 800a058:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a05a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a05c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a066:	429a      	cmp	r2, r3
 800a068:	d302      	bcc.n	800a070 <xQueueGenericSendFromISR+0xbc>
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	d12f      	bne.n	800a0d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a072:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a080:	683a      	ldr	r2, [r7, #0]
 800a082:	68b9      	ldr	r1, [r7, #8]
 800a084:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a086:	f000 f911 	bl	800a2ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a08a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a08e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a092:	d112      	bne.n	800a0ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d016      	beq.n	800a0ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09e:	3324      	adds	r3, #36	; 0x24
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f000 fef7 	bl	800ae94 <xTaskRemoveFromEventList>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d00e      	beq.n	800a0ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00b      	beq.n	800a0ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	601a      	str	r2, [r3, #0]
 800a0b8:	e007      	b.n	800a0ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a0ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a0be:	3301      	adds	r3, #1
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	b25a      	sxtb	r2, r3
 800a0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a0ce:	e001      	b.n	800a0d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0d6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a0de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a0e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3740      	adds	r7, #64	; 0x40
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
	...

0800a0ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b08c      	sub	sp, #48	; 0x30
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a102:	2b00      	cmp	r3, #0
 800a104:	d10a      	bne.n	800a11c <xQueueReceive+0x30>
	__asm volatile
 800a106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10a:	f383 8811 	msr	BASEPRI, r3
 800a10e:	f3bf 8f6f 	isb	sy
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	623b      	str	r3, [r7, #32]
}
 800a118:	bf00      	nop
 800a11a:	e7fe      	b.n	800a11a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d103      	bne.n	800a12a <xQueueReceive+0x3e>
 800a122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a126:	2b00      	cmp	r3, #0
 800a128:	d101      	bne.n	800a12e <xQueueReceive+0x42>
 800a12a:	2301      	movs	r3, #1
 800a12c:	e000      	b.n	800a130 <xQueueReceive+0x44>
 800a12e:	2300      	movs	r3, #0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10a      	bne.n	800a14a <xQueueReceive+0x5e>
	__asm volatile
 800a134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a138:	f383 8811 	msr	BASEPRI, r3
 800a13c:	f3bf 8f6f 	isb	sy
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	61fb      	str	r3, [r7, #28]
}
 800a146:	bf00      	nop
 800a148:	e7fe      	b.n	800a148 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a14a:	f001 f865 	bl	800b218 <xTaskGetSchedulerState>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d102      	bne.n	800a15a <xQueueReceive+0x6e>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d101      	bne.n	800a15e <xQueueReceive+0x72>
 800a15a:	2301      	movs	r3, #1
 800a15c:	e000      	b.n	800a160 <xQueueReceive+0x74>
 800a15e:	2300      	movs	r3, #0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d10a      	bne.n	800a17a <xQueueReceive+0x8e>
	__asm volatile
 800a164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a168:	f383 8811 	msr	BASEPRI, r3
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	61bb      	str	r3, [r7, #24]
}
 800a176:	bf00      	nop
 800a178:	e7fe      	b.n	800a178 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a17a:	f001 fdab 	bl	800bcd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a182:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a186:	2b00      	cmp	r3, #0
 800a188:	d01f      	beq.n	800a1ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a18a:	68b9      	ldr	r1, [r7, #8]
 800a18c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a18e:	f000 f8f7 	bl	800a380 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a194:	1e5a      	subs	r2, r3, #1
 800a196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a198:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00f      	beq.n	800a1c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a4:	3310      	adds	r3, #16
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f000 fe74 	bl	800ae94 <xTaskRemoveFromEventList>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d007      	beq.n	800a1c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a1b2:	4b3d      	ldr	r3, [pc, #244]	; (800a2a8 <xQueueReceive+0x1bc>)
 800a1b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1b8:	601a      	str	r2, [r3, #0]
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a1c2:	f001 fdb7 	bl	800bd34 <vPortExitCritical>
				return pdPASS;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e069      	b.n	800a29e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d103      	bne.n	800a1d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1d0:	f001 fdb0 	bl	800bd34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	e062      	b.n	800a29e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d106      	bne.n	800a1ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a1de:	f107 0310 	add.w	r3, r7, #16
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f000 feba 	bl	800af5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a1ec:	f001 fda2 	bl	800bd34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a1f0:	f000 fc26 	bl	800aa40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1f4:	f001 fd6e 	bl	800bcd4 <vPortEnterCritical>
 800a1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1fe:	b25b      	sxtb	r3, r3
 800a200:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a204:	d103      	bne.n	800a20e <xQueueReceive+0x122>
 800a206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a214:	b25b      	sxtb	r3, r3
 800a216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a21a:	d103      	bne.n	800a224 <xQueueReceive+0x138>
 800a21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21e:	2200      	movs	r2, #0
 800a220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a224:	f001 fd86 	bl	800bd34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a228:	1d3a      	adds	r2, r7, #4
 800a22a:	f107 0310 	add.w	r3, r7, #16
 800a22e:	4611      	mov	r1, r2
 800a230:	4618      	mov	r0, r3
 800a232:	f000 fea9 	bl	800af88 <xTaskCheckForTimeOut>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d123      	bne.n	800a284 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a23c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a23e:	f000 f917 	bl	800a470 <prvIsQueueEmpty>
 800a242:	4603      	mov	r3, r0
 800a244:	2b00      	cmp	r3, #0
 800a246:	d017      	beq.n	800a278 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24a:	3324      	adds	r3, #36	; 0x24
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	4611      	mov	r1, r2
 800a250:	4618      	mov	r0, r3
 800a252:	f000 fdcf 	bl	800adf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a258:	f000 f8b8 	bl	800a3cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a25c:	f000 fbfe 	bl	800aa5c <xTaskResumeAll>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d189      	bne.n	800a17a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a266:	4b10      	ldr	r3, [pc, #64]	; (800a2a8 <xQueueReceive+0x1bc>)
 800a268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a26c:	601a      	str	r2, [r3, #0]
 800a26e:	f3bf 8f4f 	dsb	sy
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	e780      	b.n	800a17a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a27a:	f000 f8a7 	bl	800a3cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a27e:	f000 fbed 	bl	800aa5c <xTaskResumeAll>
 800a282:	e77a      	b.n	800a17a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a286:	f000 f8a1 	bl	800a3cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a28a:	f000 fbe7 	bl	800aa5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a28e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a290:	f000 f8ee 	bl	800a470 <prvIsQueueEmpty>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	f43f af6f 	beq.w	800a17a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a29c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3730      	adds	r7, #48	; 0x30
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	e000ed04 	.word	0xe000ed04

0800a2ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b086      	sub	sp, #24
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d10d      	bne.n	800a2e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d14d      	bne.n	800a36e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f000 ffbc 	bl	800b254 <xTaskPriorityDisinherit>
 800a2dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	609a      	str	r2, [r3, #8]
 800a2e4:	e043      	b.n	800a36e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d119      	bne.n	800a320 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	6858      	ldr	r0, [r3, #4]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	68b9      	ldr	r1, [r7, #8]
 800a2f8:	f002 f91b 	bl	800c532 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	685a      	ldr	r2, [r3, #4]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a304:	441a      	add	r2, r3
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	685a      	ldr	r2, [r3, #4]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	429a      	cmp	r2, r3
 800a314:	d32b      	bcc.n	800a36e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	605a      	str	r2, [r3, #4]
 800a31e:	e026      	b.n	800a36e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	68d8      	ldr	r0, [r3, #12]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a328:	461a      	mov	r2, r3
 800a32a:	68b9      	ldr	r1, [r7, #8]
 800a32c:	f002 f901 	bl	800c532 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	68da      	ldr	r2, [r3, #12]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a338:	425b      	negs	r3, r3
 800a33a:	441a      	add	r2, r3
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	68da      	ldr	r2, [r3, #12]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d207      	bcs.n	800a35c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	689a      	ldr	r2, [r3, #8]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a354:	425b      	negs	r3, r3
 800a356:	441a      	add	r2, r3
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2b02      	cmp	r3, #2
 800a360:	d105      	bne.n	800a36e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d002      	beq.n	800a36e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	3b01      	subs	r3, #1
 800a36c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	1c5a      	adds	r2, r3, #1
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a376:	697b      	ldr	r3, [r7, #20]
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3718      	adds	r7, #24
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d018      	beq.n	800a3c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	68da      	ldr	r2, [r3, #12]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39a:	441a      	add	r2, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	68da      	ldr	r2, [r3, #12]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d303      	bcc.n	800a3b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	68d9      	ldr	r1, [r3, #12]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3bc:	461a      	mov	r2, r3
 800a3be:	6838      	ldr	r0, [r7, #0]
 800a3c0:	f002 f8b7 	bl	800c532 <memcpy>
	}
}
 800a3c4:	bf00      	nop
 800a3c6:	3708      	adds	r7, #8
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a3d4:	f001 fc7e 	bl	800bcd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3e0:	e011      	b.n	800a406 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d012      	beq.n	800a410 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	3324      	adds	r3, #36	; 0x24
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f000 fd50 	bl	800ae94 <xTaskRemoveFromEventList>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d001      	beq.n	800a3fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a3fa:	f000 fe27 	bl	800b04c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a3fe:	7bfb      	ldrb	r3, [r7, #15]
 800a400:	3b01      	subs	r3, #1
 800a402:	b2db      	uxtb	r3, r3
 800a404:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	dce9      	bgt.n	800a3e2 <prvUnlockQueue+0x16>
 800a40e:	e000      	b.n	800a412 <prvUnlockQueue+0x46>
					break;
 800a410:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	22ff      	movs	r2, #255	; 0xff
 800a416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a41a:	f001 fc8b 	bl	800bd34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a41e:	f001 fc59 	bl	800bcd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a428:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a42a:	e011      	b.n	800a450 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	691b      	ldr	r3, [r3, #16]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d012      	beq.n	800a45a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	3310      	adds	r3, #16
 800a438:	4618      	mov	r0, r3
 800a43a:	f000 fd2b 	bl	800ae94 <xTaskRemoveFromEventList>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d001      	beq.n	800a448 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a444:	f000 fe02 	bl	800b04c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a448:	7bbb      	ldrb	r3, [r7, #14]
 800a44a:	3b01      	subs	r3, #1
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a450:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a454:	2b00      	cmp	r3, #0
 800a456:	dce9      	bgt.n	800a42c <prvUnlockQueue+0x60>
 800a458:	e000      	b.n	800a45c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a45a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	22ff      	movs	r2, #255	; 0xff
 800a460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a464:	f001 fc66 	bl	800bd34 <vPortExitCritical>
}
 800a468:	bf00      	nop
 800a46a:	3710      	adds	r7, #16
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a478:	f001 fc2c 	bl	800bcd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a480:	2b00      	cmp	r3, #0
 800a482:	d102      	bne.n	800a48a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a484:	2301      	movs	r3, #1
 800a486:	60fb      	str	r3, [r7, #12]
 800a488:	e001      	b.n	800a48e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a48a:	2300      	movs	r3, #0
 800a48c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a48e:	f001 fc51 	bl	800bd34 <vPortExitCritical>

	return xReturn;
 800a492:	68fb      	ldr	r3, [r7, #12]
}
 800a494:	4618      	mov	r0, r3
 800a496:	3710      	adds	r7, #16
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a4a4:	f001 fc16 	bl	800bcd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d102      	bne.n	800a4ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	60fb      	str	r3, [r7, #12]
 800a4b8:	e001      	b.n	800a4be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a4be:	f001 fc39 	bl	800bd34 <vPortExitCritical>

	return xReturn;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3710      	adds	r7, #16
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	60fb      	str	r3, [r7, #12]
 800a4da:	e014      	b.n	800a506 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a4dc:	4a0f      	ldr	r2, [pc, #60]	; (800a51c <vQueueAddToRegistry+0x50>)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d10b      	bne.n	800a500 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a4e8:	490c      	ldr	r1, [pc, #48]	; (800a51c <vQueueAddToRegistry+0x50>)
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	683a      	ldr	r2, [r7, #0]
 800a4ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a4f2:	4a0a      	ldr	r2, [pc, #40]	; (800a51c <vQueueAddToRegistry+0x50>)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	00db      	lsls	r3, r3, #3
 800a4f8:	4413      	add	r3, r2
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a4fe:	e006      	b.n	800a50e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	3301      	adds	r3, #1
 800a504:	60fb      	str	r3, [r7, #12]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2b07      	cmp	r3, #7
 800a50a:	d9e7      	bls.n	800a4dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a50c:	bf00      	nop
 800a50e:	bf00      	nop
 800a510:	3714      	adds	r7, #20
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	20001418 	.word	0x20001418

0800a520 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a520:	b580      	push	{r7, lr}
 800a522:	b086      	sub	sp, #24
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a530:	f001 fbd0 	bl	800bcd4 <vPortEnterCritical>
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a53a:	b25b      	sxtb	r3, r3
 800a53c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a540:	d103      	bne.n	800a54a <vQueueWaitForMessageRestricted+0x2a>
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	2200      	movs	r2, #0
 800a546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a550:	b25b      	sxtb	r3, r3
 800a552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a556:	d103      	bne.n	800a560 <vQueueWaitForMessageRestricted+0x40>
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a560:	f001 fbe8 	bl	800bd34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d106      	bne.n	800a57a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	3324      	adds	r3, #36	; 0x24
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	68b9      	ldr	r1, [r7, #8]
 800a574:	4618      	mov	r0, r3
 800a576:	f000 fc61 	bl	800ae3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a57a:	6978      	ldr	r0, [r7, #20]
 800a57c:	f7ff ff26 	bl	800a3cc <prvUnlockQueue>
	}
 800a580:	bf00      	nop
 800a582:	3718      	adds	r7, #24
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b08e      	sub	sp, #56	; 0x38
 800a58c:	af04      	add	r7, sp, #16
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	607a      	str	r2, [r7, #4]
 800a594:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d10a      	bne.n	800a5b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a0:	f383 8811 	msr	BASEPRI, r3
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	623b      	str	r3, [r7, #32]
}
 800a5ae:	bf00      	nop
 800a5b0:	e7fe      	b.n	800a5b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d10a      	bne.n	800a5ce <xTaskCreateStatic+0x46>
	__asm volatile
 800a5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5bc:	f383 8811 	msr	BASEPRI, r3
 800a5c0:	f3bf 8f6f 	isb	sy
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	61fb      	str	r3, [r7, #28]
}
 800a5ca:	bf00      	nop
 800a5cc:	e7fe      	b.n	800a5cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a5ce:	23bc      	movs	r3, #188	; 0xbc
 800a5d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	2bbc      	cmp	r3, #188	; 0xbc
 800a5d6:	d00a      	beq.n	800a5ee <xTaskCreateStatic+0x66>
	__asm volatile
 800a5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5dc:	f383 8811 	msr	BASEPRI, r3
 800a5e0:	f3bf 8f6f 	isb	sy
 800a5e4:	f3bf 8f4f 	dsb	sy
 800a5e8:	61bb      	str	r3, [r7, #24]
}
 800a5ea:	bf00      	nop
 800a5ec:	e7fe      	b.n	800a5ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a5ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d01e      	beq.n	800a634 <xTaskCreateStatic+0xac>
 800a5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d01b      	beq.n	800a634 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a604:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a608:	2202      	movs	r2, #2
 800a60a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a60e:	2300      	movs	r3, #0
 800a610:	9303      	str	r3, [sp, #12]
 800a612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a614:	9302      	str	r3, [sp, #8]
 800a616:	f107 0314 	add.w	r3, r7, #20
 800a61a:	9301      	str	r3, [sp, #4]
 800a61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	68b9      	ldr	r1, [r7, #8]
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f000 f850 	bl	800a6cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a62c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a62e:	f000 f8f3 	bl	800a818 <prvAddNewTaskToReadyList>
 800a632:	e001      	b.n	800a638 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a634:	2300      	movs	r3, #0
 800a636:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a638:	697b      	ldr	r3, [r7, #20]
	}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3728      	adds	r7, #40	; 0x28
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a642:	b580      	push	{r7, lr}
 800a644:	b08c      	sub	sp, #48	; 0x30
 800a646:	af04      	add	r7, sp, #16
 800a648:	60f8      	str	r0, [r7, #12]
 800a64a:	60b9      	str	r1, [r7, #8]
 800a64c:	603b      	str	r3, [r7, #0]
 800a64e:	4613      	mov	r3, r2
 800a650:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a652:	88fb      	ldrh	r3, [r7, #6]
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	4618      	mov	r0, r3
 800a658:	f001 fc5e 	bl	800bf18 <pvPortMalloc>
 800a65c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00e      	beq.n	800a682 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a664:	20bc      	movs	r0, #188	; 0xbc
 800a666:	f001 fc57 	bl	800bf18 <pvPortMalloc>
 800a66a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d003      	beq.n	800a67a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	697a      	ldr	r2, [r7, #20]
 800a676:	631a      	str	r2, [r3, #48]	; 0x30
 800a678:	e005      	b.n	800a686 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a67a:	6978      	ldr	r0, [r7, #20]
 800a67c:	f001 fd18 	bl	800c0b0 <vPortFree>
 800a680:	e001      	b.n	800a686 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a682:	2300      	movs	r3, #0
 800a684:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d017      	beq.n	800a6bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	2200      	movs	r2, #0
 800a690:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a694:	88fa      	ldrh	r2, [r7, #6]
 800a696:	2300      	movs	r3, #0
 800a698:	9303      	str	r3, [sp, #12]
 800a69a:	69fb      	ldr	r3, [r7, #28]
 800a69c:	9302      	str	r3, [sp, #8]
 800a69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a0:	9301      	str	r3, [sp, #4]
 800a6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a4:	9300      	str	r3, [sp, #0]
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	68b9      	ldr	r1, [r7, #8]
 800a6aa:	68f8      	ldr	r0, [r7, #12]
 800a6ac:	f000 f80e 	bl	800a6cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6b0:	69f8      	ldr	r0, [r7, #28]
 800a6b2:	f000 f8b1 	bl	800a818 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	61bb      	str	r3, [r7, #24]
 800a6ba:	e002      	b.n	800a6c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a6bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a6c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a6c2:	69bb      	ldr	r3, [r7, #24]
	}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3720      	adds	r7, #32
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b088      	sub	sp, #32
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
 800a6d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	009b      	lsls	r3, r3, #2
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	21a5      	movs	r1, #165	; 0xa5
 800a6e6:	f001 ff32 	bl	800c54e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a6f4:	3b01      	subs	r3, #1
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	4413      	add	r3, r2
 800a6fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	f023 0307 	bic.w	r3, r3, #7
 800a702:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a704:	69bb      	ldr	r3, [r7, #24]
 800a706:	f003 0307 	and.w	r3, r3, #7
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d00a      	beq.n	800a724 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a712:	f383 8811 	msr	BASEPRI, r3
 800a716:	f3bf 8f6f 	isb	sy
 800a71a:	f3bf 8f4f 	dsb	sy
 800a71e:	617b      	str	r3, [r7, #20]
}
 800a720:	bf00      	nop
 800a722:	e7fe      	b.n	800a722 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d01f      	beq.n	800a76a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a72a:	2300      	movs	r3, #0
 800a72c:	61fb      	str	r3, [r7, #28]
 800a72e:	e012      	b.n	800a756 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a730:	68ba      	ldr	r2, [r7, #8]
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	4413      	add	r3, r2
 800a736:	7819      	ldrb	r1, [r3, #0]
 800a738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a73a:	69fb      	ldr	r3, [r7, #28]
 800a73c:	4413      	add	r3, r2
 800a73e:	3334      	adds	r3, #52	; 0x34
 800a740:	460a      	mov	r2, r1
 800a742:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a744:	68ba      	ldr	r2, [r7, #8]
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	4413      	add	r3, r2
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d006      	beq.n	800a75e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	3301      	adds	r3, #1
 800a754:	61fb      	str	r3, [r7, #28]
 800a756:	69fb      	ldr	r3, [r7, #28]
 800a758:	2b0f      	cmp	r3, #15
 800a75a:	d9e9      	bls.n	800a730 <prvInitialiseNewTask+0x64>
 800a75c:	e000      	b.n	800a760 <prvInitialiseNewTask+0x94>
			{
				break;
 800a75e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a762:	2200      	movs	r2, #0
 800a764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a768:	e003      	b.n	800a772 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76c:	2200      	movs	r2, #0
 800a76e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a774:	2b37      	cmp	r3, #55	; 0x37
 800a776:	d901      	bls.n	800a77c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a778:	2337      	movs	r3, #55	; 0x37
 800a77a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a780:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a786:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78a:	2200      	movs	r2, #0
 800a78c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a790:	3304      	adds	r3, #4
 800a792:	4618      	mov	r0, r3
 800a794:	f7ff f978 	bl	8009a88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79a:	3318      	adds	r3, #24
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7ff f973 	bl	8009a88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ca:	3354      	adds	r3, #84	; 0x54
 800a7cc:	2260      	movs	r2, #96	; 0x60
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f001 febc 	bl	800c54e <memset>
 800a7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d8:	4a0c      	ldr	r2, [pc, #48]	; (800a80c <prvInitialiseNewTask+0x140>)
 800a7da:	659a      	str	r2, [r3, #88]	; 0x58
 800a7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7de:	4a0c      	ldr	r2, [pc, #48]	; (800a810 <prvInitialiseNewTask+0x144>)
 800a7e0:	65da      	str	r2, [r3, #92]	; 0x5c
 800a7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e4:	4a0b      	ldr	r2, [pc, #44]	; (800a814 <prvInitialiseNewTask+0x148>)
 800a7e6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a7e8:	683a      	ldr	r2, [r7, #0]
 800a7ea:	68f9      	ldr	r1, [r7, #12]
 800a7ec:	69b8      	ldr	r0, [r7, #24]
 800a7ee:	f001 f941 	bl	800ba74 <pxPortInitialiseStack>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d002      	beq.n	800a804 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a802:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a804:	bf00      	nop
 800a806:	3720      	adds	r7, #32
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	0800d0a0 	.word	0x0800d0a0
 800a810:	0800d0c0 	.word	0x0800d0c0
 800a814:	0800d080 	.word	0x0800d080

0800a818 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a820:	f001 fa58 	bl	800bcd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a824:	4b2d      	ldr	r3, [pc, #180]	; (800a8dc <prvAddNewTaskToReadyList+0xc4>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	3301      	adds	r3, #1
 800a82a:	4a2c      	ldr	r2, [pc, #176]	; (800a8dc <prvAddNewTaskToReadyList+0xc4>)
 800a82c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a82e:	4b2c      	ldr	r3, [pc, #176]	; (800a8e0 <prvAddNewTaskToReadyList+0xc8>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d109      	bne.n	800a84a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a836:	4a2a      	ldr	r2, [pc, #168]	; (800a8e0 <prvAddNewTaskToReadyList+0xc8>)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a83c:	4b27      	ldr	r3, [pc, #156]	; (800a8dc <prvAddNewTaskToReadyList+0xc4>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2b01      	cmp	r3, #1
 800a842:	d110      	bne.n	800a866 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a844:	f000 fc26 	bl	800b094 <prvInitialiseTaskLists>
 800a848:	e00d      	b.n	800a866 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a84a:	4b26      	ldr	r3, [pc, #152]	; (800a8e4 <prvAddNewTaskToReadyList+0xcc>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d109      	bne.n	800a866 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a852:	4b23      	ldr	r3, [pc, #140]	; (800a8e0 <prvAddNewTaskToReadyList+0xc8>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d802      	bhi.n	800a866 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a860:	4a1f      	ldr	r2, [pc, #124]	; (800a8e0 <prvAddNewTaskToReadyList+0xc8>)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a866:	4b20      	ldr	r3, [pc, #128]	; (800a8e8 <prvAddNewTaskToReadyList+0xd0>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	3301      	adds	r3, #1
 800a86c:	4a1e      	ldr	r2, [pc, #120]	; (800a8e8 <prvAddNewTaskToReadyList+0xd0>)
 800a86e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a870:	4b1d      	ldr	r3, [pc, #116]	; (800a8e8 <prvAddNewTaskToReadyList+0xd0>)
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a87c:	4b1b      	ldr	r3, [pc, #108]	; (800a8ec <prvAddNewTaskToReadyList+0xd4>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	429a      	cmp	r2, r3
 800a882:	d903      	bls.n	800a88c <prvAddNewTaskToReadyList+0x74>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a888:	4a18      	ldr	r2, [pc, #96]	; (800a8ec <prvAddNewTaskToReadyList+0xd4>)
 800a88a:	6013      	str	r3, [r2, #0]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a890:	4613      	mov	r3, r2
 800a892:	009b      	lsls	r3, r3, #2
 800a894:	4413      	add	r3, r2
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	4a15      	ldr	r2, [pc, #84]	; (800a8f0 <prvAddNewTaskToReadyList+0xd8>)
 800a89a:	441a      	add	r2, r3
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	3304      	adds	r3, #4
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	4610      	mov	r0, r2
 800a8a4:	f7ff f8fd 	bl	8009aa2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a8a8:	f001 fa44 	bl	800bd34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a8ac:	4b0d      	ldr	r3, [pc, #52]	; (800a8e4 <prvAddNewTaskToReadyList+0xcc>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d00e      	beq.n	800a8d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a8b4:	4b0a      	ldr	r3, [pc, #40]	; (800a8e0 <prvAddNewTaskToReadyList+0xc8>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d207      	bcs.n	800a8d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a8c2:	4b0c      	ldr	r3, [pc, #48]	; (800a8f4 <prvAddNewTaskToReadyList+0xdc>)
 800a8c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8c8:	601a      	str	r2, [r3, #0]
 800a8ca:	f3bf 8f4f 	dsb	sy
 800a8ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8d2:	bf00      	nop
 800a8d4:	3708      	adds	r7, #8
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	2000192c 	.word	0x2000192c
 800a8e0:	20001458 	.word	0x20001458
 800a8e4:	20001938 	.word	0x20001938
 800a8e8:	20001948 	.word	0x20001948
 800a8ec:	20001934 	.word	0x20001934
 800a8f0:	2000145c 	.word	0x2000145c
 800a8f4:	e000ed04 	.word	0xe000ed04

0800a8f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a900:	2300      	movs	r3, #0
 800a902:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d017      	beq.n	800a93a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a90a:	4b13      	ldr	r3, [pc, #76]	; (800a958 <vTaskDelay+0x60>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d00a      	beq.n	800a928 <vTaskDelay+0x30>
	__asm volatile
 800a912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a916:	f383 8811 	msr	BASEPRI, r3
 800a91a:	f3bf 8f6f 	isb	sy
 800a91e:	f3bf 8f4f 	dsb	sy
 800a922:	60bb      	str	r3, [r7, #8]
}
 800a924:	bf00      	nop
 800a926:	e7fe      	b.n	800a926 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a928:	f000 f88a 	bl	800aa40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a92c:	2100      	movs	r1, #0
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 fcfe 	bl	800b330 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a934:	f000 f892 	bl	800aa5c <xTaskResumeAll>
 800a938:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d107      	bne.n	800a950 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a940:	4b06      	ldr	r3, [pc, #24]	; (800a95c <vTaskDelay+0x64>)
 800a942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a946:	601a      	str	r2, [r3, #0]
 800a948:	f3bf 8f4f 	dsb	sy
 800a94c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a950:	bf00      	nop
 800a952:	3710      	adds	r7, #16
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	20001954 	.word	0x20001954
 800a95c:	e000ed04 	.word	0xe000ed04

0800a960 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b08a      	sub	sp, #40	; 0x28
 800a964:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a966:	2300      	movs	r3, #0
 800a968:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a96a:	2300      	movs	r3, #0
 800a96c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a96e:	463a      	mov	r2, r7
 800a970:	1d39      	adds	r1, r7, #4
 800a972:	f107 0308 	add.w	r3, r7, #8
 800a976:	4618      	mov	r0, r3
 800a978:	f7ff f832 	bl	80099e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a97c:	6839      	ldr	r1, [r7, #0]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	68ba      	ldr	r2, [r7, #8]
 800a982:	9202      	str	r2, [sp, #8]
 800a984:	9301      	str	r3, [sp, #4]
 800a986:	2300      	movs	r3, #0
 800a988:	9300      	str	r3, [sp, #0]
 800a98a:	2300      	movs	r3, #0
 800a98c:	460a      	mov	r2, r1
 800a98e:	4924      	ldr	r1, [pc, #144]	; (800aa20 <vTaskStartScheduler+0xc0>)
 800a990:	4824      	ldr	r0, [pc, #144]	; (800aa24 <vTaskStartScheduler+0xc4>)
 800a992:	f7ff fdf9 	bl	800a588 <xTaskCreateStatic>
 800a996:	4603      	mov	r3, r0
 800a998:	4a23      	ldr	r2, [pc, #140]	; (800aa28 <vTaskStartScheduler+0xc8>)
 800a99a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a99c:	4b22      	ldr	r3, [pc, #136]	; (800aa28 <vTaskStartScheduler+0xc8>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d002      	beq.n	800a9aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	617b      	str	r3, [r7, #20]
 800a9a8:	e001      	b.n	800a9ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d102      	bne.n	800a9ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a9b4:	f000 fd10 	bl	800b3d8 <xTimerCreateTimerTask>
 800a9b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d11b      	bne.n	800a9f8 <vTaskStartScheduler+0x98>
	__asm volatile
 800a9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c4:	f383 8811 	msr	BASEPRI, r3
 800a9c8:	f3bf 8f6f 	isb	sy
 800a9cc:	f3bf 8f4f 	dsb	sy
 800a9d0:	613b      	str	r3, [r7, #16]
}
 800a9d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a9d4:	4b15      	ldr	r3, [pc, #84]	; (800aa2c <vTaskStartScheduler+0xcc>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	3354      	adds	r3, #84	; 0x54
 800a9da:	4a15      	ldr	r2, [pc, #84]	; (800aa30 <vTaskStartScheduler+0xd0>)
 800a9dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a9de:	4b15      	ldr	r3, [pc, #84]	; (800aa34 <vTaskStartScheduler+0xd4>)
 800a9e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a9e6:	4b14      	ldr	r3, [pc, #80]	; (800aa38 <vTaskStartScheduler+0xd8>)
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a9ec:	4b13      	ldr	r3, [pc, #76]	; (800aa3c <vTaskStartScheduler+0xdc>)
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a9f2:	f001 f8cd 	bl	800bb90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a9f6:	e00e      	b.n	800aa16 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9fe:	d10a      	bne.n	800aa16 <vTaskStartScheduler+0xb6>
	__asm volatile
 800aa00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa04:	f383 8811 	msr	BASEPRI, r3
 800aa08:	f3bf 8f6f 	isb	sy
 800aa0c:	f3bf 8f4f 	dsb	sy
 800aa10:	60fb      	str	r3, [r7, #12]
}
 800aa12:	bf00      	nop
 800aa14:	e7fe      	b.n	800aa14 <vTaskStartScheduler+0xb4>
}
 800aa16:	bf00      	nop
 800aa18:	3718      	adds	r7, #24
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	0800cf9c 	.word	0x0800cf9c
 800aa24:	0800b065 	.word	0x0800b065
 800aa28:	20001950 	.word	0x20001950
 800aa2c:	20001458 	.word	0x20001458
 800aa30:	200000bc 	.word	0x200000bc
 800aa34:	2000194c 	.word	0x2000194c
 800aa38:	20001938 	.word	0x20001938
 800aa3c:	20001930 	.word	0x20001930

0800aa40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aa40:	b480      	push	{r7}
 800aa42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aa44:	4b04      	ldr	r3, [pc, #16]	; (800aa58 <vTaskSuspendAll+0x18>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	4a03      	ldr	r2, [pc, #12]	; (800aa58 <vTaskSuspendAll+0x18>)
 800aa4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aa4e:	bf00      	nop
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr
 800aa58:	20001954 	.word	0x20001954

0800aa5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b084      	sub	sp, #16
 800aa60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aa62:	2300      	movs	r3, #0
 800aa64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aa66:	2300      	movs	r3, #0
 800aa68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aa6a:	4b42      	ldr	r3, [pc, #264]	; (800ab74 <xTaskResumeAll+0x118>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d10a      	bne.n	800aa88 <xTaskResumeAll+0x2c>
	__asm volatile
 800aa72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa76:	f383 8811 	msr	BASEPRI, r3
 800aa7a:	f3bf 8f6f 	isb	sy
 800aa7e:	f3bf 8f4f 	dsb	sy
 800aa82:	603b      	str	r3, [r7, #0]
}
 800aa84:	bf00      	nop
 800aa86:	e7fe      	b.n	800aa86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aa88:	f001 f924 	bl	800bcd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aa8c:	4b39      	ldr	r3, [pc, #228]	; (800ab74 <xTaskResumeAll+0x118>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	3b01      	subs	r3, #1
 800aa92:	4a38      	ldr	r2, [pc, #224]	; (800ab74 <xTaskResumeAll+0x118>)
 800aa94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa96:	4b37      	ldr	r3, [pc, #220]	; (800ab74 <xTaskResumeAll+0x118>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d162      	bne.n	800ab64 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aa9e:	4b36      	ldr	r3, [pc, #216]	; (800ab78 <xTaskResumeAll+0x11c>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d05e      	beq.n	800ab64 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aaa6:	e02f      	b.n	800ab08 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaa8:	4b34      	ldr	r3, [pc, #208]	; (800ab7c <xTaskResumeAll+0x120>)
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	3318      	adds	r3, #24
 800aab4:	4618      	mov	r0, r3
 800aab6:	f7ff f851 	bl	8009b5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	3304      	adds	r3, #4
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7ff f84c 	bl	8009b5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aac8:	4b2d      	ldr	r3, [pc, #180]	; (800ab80 <xTaskResumeAll+0x124>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d903      	bls.n	800aad8 <xTaskResumeAll+0x7c>
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad4:	4a2a      	ldr	r2, [pc, #168]	; (800ab80 <xTaskResumeAll+0x124>)
 800aad6:	6013      	str	r3, [r2, #0]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aadc:	4613      	mov	r3, r2
 800aade:	009b      	lsls	r3, r3, #2
 800aae0:	4413      	add	r3, r2
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	4a27      	ldr	r2, [pc, #156]	; (800ab84 <xTaskResumeAll+0x128>)
 800aae6:	441a      	add	r2, r3
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	3304      	adds	r3, #4
 800aaec:	4619      	mov	r1, r3
 800aaee:	4610      	mov	r0, r2
 800aaf0:	f7fe ffd7 	bl	8009aa2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaf8:	4b23      	ldr	r3, [pc, #140]	; (800ab88 <xTaskResumeAll+0x12c>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d302      	bcc.n	800ab08 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ab02:	4b22      	ldr	r3, [pc, #136]	; (800ab8c <xTaskResumeAll+0x130>)
 800ab04:	2201      	movs	r2, #1
 800ab06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab08:	4b1c      	ldr	r3, [pc, #112]	; (800ab7c <xTaskResumeAll+0x120>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d1cb      	bne.n	800aaa8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d001      	beq.n	800ab1a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ab16:	f000 fb5f 	bl	800b1d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ab1a:	4b1d      	ldr	r3, [pc, #116]	; (800ab90 <xTaskResumeAll+0x134>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d010      	beq.n	800ab48 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ab26:	f000 f847 	bl	800abb8 <xTaskIncrementTick>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d002      	beq.n	800ab36 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ab30:	4b16      	ldr	r3, [pc, #88]	; (800ab8c <xTaskResumeAll+0x130>)
 800ab32:	2201      	movs	r2, #1
 800ab34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	3b01      	subs	r3, #1
 800ab3a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d1f1      	bne.n	800ab26 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ab42:	4b13      	ldr	r3, [pc, #76]	; (800ab90 <xTaskResumeAll+0x134>)
 800ab44:	2200      	movs	r2, #0
 800ab46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ab48:	4b10      	ldr	r3, [pc, #64]	; (800ab8c <xTaskResumeAll+0x130>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d009      	beq.n	800ab64 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ab50:	2301      	movs	r3, #1
 800ab52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ab54:	4b0f      	ldr	r3, [pc, #60]	; (800ab94 <xTaskResumeAll+0x138>)
 800ab56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab5a:	601a      	str	r2, [r3, #0]
 800ab5c:	f3bf 8f4f 	dsb	sy
 800ab60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab64:	f001 f8e6 	bl	800bd34 <vPortExitCritical>

	return xAlreadyYielded;
 800ab68:	68bb      	ldr	r3, [r7, #8]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	20001954 	.word	0x20001954
 800ab78:	2000192c 	.word	0x2000192c
 800ab7c:	200018ec 	.word	0x200018ec
 800ab80:	20001934 	.word	0x20001934
 800ab84:	2000145c 	.word	0x2000145c
 800ab88:	20001458 	.word	0x20001458
 800ab8c:	20001940 	.word	0x20001940
 800ab90:	2000193c 	.word	0x2000193c
 800ab94:	e000ed04 	.word	0xe000ed04

0800ab98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ab9e:	4b05      	ldr	r3, [pc, #20]	; (800abb4 <xTaskGetTickCount+0x1c>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aba4:	687b      	ldr	r3, [r7, #4]
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	370c      	adds	r7, #12
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	20001930 	.word	0x20001930

0800abb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b086      	sub	sp, #24
 800abbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800abbe:	2300      	movs	r3, #0
 800abc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abc2:	4b4f      	ldr	r3, [pc, #316]	; (800ad00 <xTaskIncrementTick+0x148>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	f040 808f 	bne.w	800acea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800abcc:	4b4d      	ldr	r3, [pc, #308]	; (800ad04 <xTaskIncrementTick+0x14c>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	3301      	adds	r3, #1
 800abd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800abd4:	4a4b      	ldr	r2, [pc, #300]	; (800ad04 <xTaskIncrementTick+0x14c>)
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d120      	bne.n	800ac22 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800abe0:	4b49      	ldr	r3, [pc, #292]	; (800ad08 <xTaskIncrementTick+0x150>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d00a      	beq.n	800ac00 <xTaskIncrementTick+0x48>
	__asm volatile
 800abea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abee:	f383 8811 	msr	BASEPRI, r3
 800abf2:	f3bf 8f6f 	isb	sy
 800abf6:	f3bf 8f4f 	dsb	sy
 800abfa:	603b      	str	r3, [r7, #0]
}
 800abfc:	bf00      	nop
 800abfe:	e7fe      	b.n	800abfe <xTaskIncrementTick+0x46>
 800ac00:	4b41      	ldr	r3, [pc, #260]	; (800ad08 <xTaskIncrementTick+0x150>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	60fb      	str	r3, [r7, #12]
 800ac06:	4b41      	ldr	r3, [pc, #260]	; (800ad0c <xTaskIncrementTick+0x154>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a3f      	ldr	r2, [pc, #252]	; (800ad08 <xTaskIncrementTick+0x150>)
 800ac0c:	6013      	str	r3, [r2, #0]
 800ac0e:	4a3f      	ldr	r2, [pc, #252]	; (800ad0c <xTaskIncrementTick+0x154>)
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	6013      	str	r3, [r2, #0]
 800ac14:	4b3e      	ldr	r3, [pc, #248]	; (800ad10 <xTaskIncrementTick+0x158>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	4a3d      	ldr	r2, [pc, #244]	; (800ad10 <xTaskIncrementTick+0x158>)
 800ac1c:	6013      	str	r3, [r2, #0]
 800ac1e:	f000 fadb 	bl	800b1d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ac22:	4b3c      	ldr	r3, [pc, #240]	; (800ad14 <xTaskIncrementTick+0x15c>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	693a      	ldr	r2, [r7, #16]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d349      	bcc.n	800acc0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac2c:	4b36      	ldr	r3, [pc, #216]	; (800ad08 <xTaskIncrementTick+0x150>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d104      	bne.n	800ac40 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac36:	4b37      	ldr	r3, [pc, #220]	; (800ad14 <xTaskIncrementTick+0x15c>)
 800ac38:	f04f 32ff 	mov.w	r2, #4294967295
 800ac3c:	601a      	str	r2, [r3, #0]
					break;
 800ac3e:	e03f      	b.n	800acc0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac40:	4b31      	ldr	r3, [pc, #196]	; (800ad08 <xTaskIncrementTick+0x150>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ac50:	693a      	ldr	r2, [r7, #16]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d203      	bcs.n	800ac60 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ac58:	4a2e      	ldr	r2, [pc, #184]	; (800ad14 <xTaskIncrementTick+0x15c>)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ac5e:	e02f      	b.n	800acc0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	3304      	adds	r3, #4
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7fe ff79 	bl	8009b5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d004      	beq.n	800ac7c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	3318      	adds	r3, #24
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7fe ff70 	bl	8009b5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac80:	4b25      	ldr	r3, [pc, #148]	; (800ad18 <xTaskIncrementTick+0x160>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d903      	bls.n	800ac90 <xTaskIncrementTick+0xd8>
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac8c:	4a22      	ldr	r2, [pc, #136]	; (800ad18 <xTaskIncrementTick+0x160>)
 800ac8e:	6013      	str	r3, [r2, #0]
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac94:	4613      	mov	r3, r2
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	4413      	add	r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	4a1f      	ldr	r2, [pc, #124]	; (800ad1c <xTaskIncrementTick+0x164>)
 800ac9e:	441a      	add	r2, r3
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	3304      	adds	r3, #4
 800aca4:	4619      	mov	r1, r3
 800aca6:	4610      	mov	r0, r2
 800aca8:	f7fe fefb 	bl	8009aa2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acb0:	4b1b      	ldr	r3, [pc, #108]	; (800ad20 <xTaskIncrementTick+0x168>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d3b8      	bcc.n	800ac2c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800acba:	2301      	movs	r3, #1
 800acbc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acbe:	e7b5      	b.n	800ac2c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800acc0:	4b17      	ldr	r3, [pc, #92]	; (800ad20 <xTaskIncrementTick+0x168>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acc6:	4915      	ldr	r1, [pc, #84]	; (800ad1c <xTaskIncrementTick+0x164>)
 800acc8:	4613      	mov	r3, r2
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	4413      	add	r3, r2
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	440b      	add	r3, r1
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d901      	bls.n	800acdc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800acd8:	2301      	movs	r3, #1
 800acda:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800acdc:	4b11      	ldr	r3, [pc, #68]	; (800ad24 <xTaskIncrementTick+0x16c>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d007      	beq.n	800acf4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ace4:	2301      	movs	r3, #1
 800ace6:	617b      	str	r3, [r7, #20]
 800ace8:	e004      	b.n	800acf4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800acea:	4b0f      	ldr	r3, [pc, #60]	; (800ad28 <xTaskIncrementTick+0x170>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	3301      	adds	r3, #1
 800acf0:	4a0d      	ldr	r2, [pc, #52]	; (800ad28 <xTaskIncrementTick+0x170>)
 800acf2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800acf4:	697b      	ldr	r3, [r7, #20]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3718      	adds	r7, #24
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	20001954 	.word	0x20001954
 800ad04:	20001930 	.word	0x20001930
 800ad08:	200018e4 	.word	0x200018e4
 800ad0c:	200018e8 	.word	0x200018e8
 800ad10:	20001944 	.word	0x20001944
 800ad14:	2000194c 	.word	0x2000194c
 800ad18:	20001934 	.word	0x20001934
 800ad1c:	2000145c 	.word	0x2000145c
 800ad20:	20001458 	.word	0x20001458
 800ad24:	20001940 	.word	0x20001940
 800ad28:	2000193c 	.word	0x2000193c

0800ad2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b085      	sub	sp, #20
 800ad30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ad32:	4b2a      	ldr	r3, [pc, #168]	; (800addc <vTaskSwitchContext+0xb0>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d003      	beq.n	800ad42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ad3a:	4b29      	ldr	r3, [pc, #164]	; (800ade0 <vTaskSwitchContext+0xb4>)
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ad40:	e046      	b.n	800add0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ad42:	4b27      	ldr	r3, [pc, #156]	; (800ade0 <vTaskSwitchContext+0xb4>)
 800ad44:	2200      	movs	r2, #0
 800ad46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad48:	4b26      	ldr	r3, [pc, #152]	; (800ade4 <vTaskSwitchContext+0xb8>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	60fb      	str	r3, [r7, #12]
 800ad4e:	e010      	b.n	800ad72 <vTaskSwitchContext+0x46>
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d10a      	bne.n	800ad6c <vTaskSwitchContext+0x40>
	__asm volatile
 800ad56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5a:	f383 8811 	msr	BASEPRI, r3
 800ad5e:	f3bf 8f6f 	isb	sy
 800ad62:	f3bf 8f4f 	dsb	sy
 800ad66:	607b      	str	r3, [r7, #4]
}
 800ad68:	bf00      	nop
 800ad6a:	e7fe      	b.n	800ad6a <vTaskSwitchContext+0x3e>
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	60fb      	str	r3, [r7, #12]
 800ad72:	491d      	ldr	r1, [pc, #116]	; (800ade8 <vTaskSwitchContext+0xbc>)
 800ad74:	68fa      	ldr	r2, [r7, #12]
 800ad76:	4613      	mov	r3, r2
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	4413      	add	r3, r2
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	440b      	add	r3, r1
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d0e4      	beq.n	800ad50 <vTaskSwitchContext+0x24>
 800ad86:	68fa      	ldr	r2, [r7, #12]
 800ad88:	4613      	mov	r3, r2
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	4413      	add	r3, r2
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	4a15      	ldr	r2, [pc, #84]	; (800ade8 <vTaskSwitchContext+0xbc>)
 800ad92:	4413      	add	r3, r2
 800ad94:	60bb      	str	r3, [r7, #8]
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	685a      	ldr	r2, [r3, #4]
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	605a      	str	r2, [r3, #4]
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	685a      	ldr	r2, [r3, #4]
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	3308      	adds	r3, #8
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d104      	bne.n	800adb6 <vTaskSwitchContext+0x8a>
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	685a      	ldr	r2, [r3, #4]
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	605a      	str	r2, [r3, #4]
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	4a0b      	ldr	r2, [pc, #44]	; (800adec <vTaskSwitchContext+0xc0>)
 800adbe:	6013      	str	r3, [r2, #0]
 800adc0:	4a08      	ldr	r2, [pc, #32]	; (800ade4 <vTaskSwitchContext+0xb8>)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800adc6:	4b09      	ldr	r3, [pc, #36]	; (800adec <vTaskSwitchContext+0xc0>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	3354      	adds	r3, #84	; 0x54
 800adcc:	4a08      	ldr	r2, [pc, #32]	; (800adf0 <vTaskSwitchContext+0xc4>)
 800adce:	6013      	str	r3, [r2, #0]
}
 800add0:	bf00      	nop
 800add2:	3714      	adds	r7, #20
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr
 800addc:	20001954 	.word	0x20001954
 800ade0:	20001940 	.word	0x20001940
 800ade4:	20001934 	.word	0x20001934
 800ade8:	2000145c 	.word	0x2000145c
 800adec:	20001458 	.word	0x20001458
 800adf0:	200000bc 	.word	0x200000bc

0800adf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d10a      	bne.n	800ae1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ae04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae08:	f383 8811 	msr	BASEPRI, r3
 800ae0c:	f3bf 8f6f 	isb	sy
 800ae10:	f3bf 8f4f 	dsb	sy
 800ae14:	60fb      	str	r3, [r7, #12]
}
 800ae16:	bf00      	nop
 800ae18:	e7fe      	b.n	800ae18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae1a:	4b07      	ldr	r3, [pc, #28]	; (800ae38 <vTaskPlaceOnEventList+0x44>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	3318      	adds	r3, #24
 800ae20:	4619      	mov	r1, r3
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f7fe fe61 	bl	8009aea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ae28:	2101      	movs	r1, #1
 800ae2a:	6838      	ldr	r0, [r7, #0]
 800ae2c:	f000 fa80 	bl	800b330 <prvAddCurrentTaskToDelayedList>
}
 800ae30:	bf00      	nop
 800ae32:	3710      	adds	r7, #16
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	20001458 	.word	0x20001458

0800ae3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b086      	sub	sp, #24
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d10a      	bne.n	800ae64 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ae4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae52:	f383 8811 	msr	BASEPRI, r3
 800ae56:	f3bf 8f6f 	isb	sy
 800ae5a:	f3bf 8f4f 	dsb	sy
 800ae5e:	617b      	str	r3, [r7, #20]
}
 800ae60:	bf00      	nop
 800ae62:	e7fe      	b.n	800ae62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae64:	4b0a      	ldr	r3, [pc, #40]	; (800ae90 <vTaskPlaceOnEventListRestricted+0x54>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	3318      	adds	r3, #24
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	f7fe fe18 	bl	8009aa2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d002      	beq.n	800ae7e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ae78:	f04f 33ff 	mov.w	r3, #4294967295
 800ae7c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ae7e:	6879      	ldr	r1, [r7, #4]
 800ae80:	68b8      	ldr	r0, [r7, #8]
 800ae82:	f000 fa55 	bl	800b330 <prvAddCurrentTaskToDelayedList>
	}
 800ae86:	bf00      	nop
 800ae88:	3718      	adds	r7, #24
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	20001458 	.word	0x20001458

0800ae94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b086      	sub	sp, #24
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d10a      	bne.n	800aec0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800aeaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeae:	f383 8811 	msr	BASEPRI, r3
 800aeb2:	f3bf 8f6f 	isb	sy
 800aeb6:	f3bf 8f4f 	dsb	sy
 800aeba:	60fb      	str	r3, [r7, #12]
}
 800aebc:	bf00      	nop
 800aebe:	e7fe      	b.n	800aebe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	3318      	adds	r3, #24
 800aec4:	4618      	mov	r0, r3
 800aec6:	f7fe fe49 	bl	8009b5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aeca:	4b1e      	ldr	r3, [pc, #120]	; (800af44 <xTaskRemoveFromEventList+0xb0>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d11d      	bne.n	800af0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	3304      	adds	r3, #4
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7fe fe40 	bl	8009b5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aee0:	4b19      	ldr	r3, [pc, #100]	; (800af48 <xTaskRemoveFromEventList+0xb4>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d903      	bls.n	800aef0 <xTaskRemoveFromEventList+0x5c>
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeec:	4a16      	ldr	r2, [pc, #88]	; (800af48 <xTaskRemoveFromEventList+0xb4>)
 800aeee:	6013      	str	r3, [r2, #0]
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aef4:	4613      	mov	r3, r2
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	4413      	add	r3, r2
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	4a13      	ldr	r2, [pc, #76]	; (800af4c <xTaskRemoveFromEventList+0xb8>)
 800aefe:	441a      	add	r2, r3
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	3304      	adds	r3, #4
 800af04:	4619      	mov	r1, r3
 800af06:	4610      	mov	r0, r2
 800af08:	f7fe fdcb 	bl	8009aa2 <vListInsertEnd>
 800af0c:	e005      	b.n	800af1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	3318      	adds	r3, #24
 800af12:	4619      	mov	r1, r3
 800af14:	480e      	ldr	r0, [pc, #56]	; (800af50 <xTaskRemoveFromEventList+0xbc>)
 800af16:	f7fe fdc4 	bl	8009aa2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af1e:	4b0d      	ldr	r3, [pc, #52]	; (800af54 <xTaskRemoveFromEventList+0xc0>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af24:	429a      	cmp	r2, r3
 800af26:	d905      	bls.n	800af34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800af28:	2301      	movs	r3, #1
 800af2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800af2c:	4b0a      	ldr	r3, [pc, #40]	; (800af58 <xTaskRemoveFromEventList+0xc4>)
 800af2e:	2201      	movs	r2, #1
 800af30:	601a      	str	r2, [r3, #0]
 800af32:	e001      	b.n	800af38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800af34:	2300      	movs	r3, #0
 800af36:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800af38:	697b      	ldr	r3, [r7, #20]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3718      	adds	r7, #24
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	20001954 	.word	0x20001954
 800af48:	20001934 	.word	0x20001934
 800af4c:	2000145c 	.word	0x2000145c
 800af50:	200018ec 	.word	0x200018ec
 800af54:	20001458 	.word	0x20001458
 800af58:	20001940 	.word	0x20001940

0800af5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800af64:	4b06      	ldr	r3, [pc, #24]	; (800af80 <vTaskInternalSetTimeOutState+0x24>)
 800af66:	681a      	ldr	r2, [r3, #0]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800af6c:	4b05      	ldr	r3, [pc, #20]	; (800af84 <vTaskInternalSetTimeOutState+0x28>)
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	605a      	str	r2, [r3, #4]
}
 800af74:	bf00      	nop
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr
 800af80:	20001944 	.word	0x20001944
 800af84:	20001930 	.word	0x20001930

0800af88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b088      	sub	sp, #32
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d10a      	bne.n	800afae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800af98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9c:	f383 8811 	msr	BASEPRI, r3
 800afa0:	f3bf 8f6f 	isb	sy
 800afa4:	f3bf 8f4f 	dsb	sy
 800afa8:	613b      	str	r3, [r7, #16]
}
 800afaa:	bf00      	nop
 800afac:	e7fe      	b.n	800afac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d10a      	bne.n	800afca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800afb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb8:	f383 8811 	msr	BASEPRI, r3
 800afbc:	f3bf 8f6f 	isb	sy
 800afc0:	f3bf 8f4f 	dsb	sy
 800afc4:	60fb      	str	r3, [r7, #12]
}
 800afc6:	bf00      	nop
 800afc8:	e7fe      	b.n	800afc8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800afca:	f000 fe83 	bl	800bcd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800afce:	4b1d      	ldr	r3, [pc, #116]	; (800b044 <xTaskCheckForTimeOut+0xbc>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	69ba      	ldr	r2, [r7, #24]
 800afda:	1ad3      	subs	r3, r2, r3
 800afdc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afe6:	d102      	bne.n	800afee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800afe8:	2300      	movs	r3, #0
 800afea:	61fb      	str	r3, [r7, #28]
 800afec:	e023      	b.n	800b036 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681a      	ldr	r2, [r3, #0]
 800aff2:	4b15      	ldr	r3, [pc, #84]	; (800b048 <xTaskCheckForTimeOut+0xc0>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d007      	beq.n	800b00a <xTaskCheckForTimeOut+0x82>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	69ba      	ldr	r2, [r7, #24]
 800b000:	429a      	cmp	r2, r3
 800b002:	d302      	bcc.n	800b00a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b004:	2301      	movs	r3, #1
 800b006:	61fb      	str	r3, [r7, #28]
 800b008:	e015      	b.n	800b036 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	697a      	ldr	r2, [r7, #20]
 800b010:	429a      	cmp	r2, r3
 800b012:	d20b      	bcs.n	800b02c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	1ad2      	subs	r2, r2, r3
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f7ff ff9b 	bl	800af5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b026:	2300      	movs	r3, #0
 800b028:	61fb      	str	r3, [r7, #28]
 800b02a:	e004      	b.n	800b036 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	2200      	movs	r2, #0
 800b030:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b032:	2301      	movs	r3, #1
 800b034:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b036:	f000 fe7d 	bl	800bd34 <vPortExitCritical>

	return xReturn;
 800b03a:	69fb      	ldr	r3, [r7, #28]
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3720      	adds	r7, #32
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}
 800b044:	20001930 	.word	0x20001930
 800b048:	20001944 	.word	0x20001944

0800b04c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b04c:	b480      	push	{r7}
 800b04e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b050:	4b03      	ldr	r3, [pc, #12]	; (800b060 <vTaskMissedYield+0x14>)
 800b052:	2201      	movs	r2, #1
 800b054:	601a      	str	r2, [r3, #0]
}
 800b056:	bf00      	nop
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr
 800b060:	20001940 	.word	0x20001940

0800b064 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b06c:	f000 f852 	bl	800b114 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b070:	4b06      	ldr	r3, [pc, #24]	; (800b08c <prvIdleTask+0x28>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2b01      	cmp	r3, #1
 800b076:	d9f9      	bls.n	800b06c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b078:	4b05      	ldr	r3, [pc, #20]	; (800b090 <prvIdleTask+0x2c>)
 800b07a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b07e:	601a      	str	r2, [r3, #0]
 800b080:	f3bf 8f4f 	dsb	sy
 800b084:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b088:	e7f0      	b.n	800b06c <prvIdleTask+0x8>
 800b08a:	bf00      	nop
 800b08c:	2000145c 	.word	0x2000145c
 800b090:	e000ed04 	.word	0xe000ed04

0800b094 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b09a:	2300      	movs	r3, #0
 800b09c:	607b      	str	r3, [r7, #4]
 800b09e:	e00c      	b.n	800b0ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b0a0:	687a      	ldr	r2, [r7, #4]
 800b0a2:	4613      	mov	r3, r2
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	4413      	add	r3, r2
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	4a12      	ldr	r2, [pc, #72]	; (800b0f4 <prvInitialiseTaskLists+0x60>)
 800b0ac:	4413      	add	r3, r2
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7fe fcca 	bl	8009a48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	607b      	str	r3, [r7, #4]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2b37      	cmp	r3, #55	; 0x37
 800b0be:	d9ef      	bls.n	800b0a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b0c0:	480d      	ldr	r0, [pc, #52]	; (800b0f8 <prvInitialiseTaskLists+0x64>)
 800b0c2:	f7fe fcc1 	bl	8009a48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b0c6:	480d      	ldr	r0, [pc, #52]	; (800b0fc <prvInitialiseTaskLists+0x68>)
 800b0c8:	f7fe fcbe 	bl	8009a48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b0cc:	480c      	ldr	r0, [pc, #48]	; (800b100 <prvInitialiseTaskLists+0x6c>)
 800b0ce:	f7fe fcbb 	bl	8009a48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b0d2:	480c      	ldr	r0, [pc, #48]	; (800b104 <prvInitialiseTaskLists+0x70>)
 800b0d4:	f7fe fcb8 	bl	8009a48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b0d8:	480b      	ldr	r0, [pc, #44]	; (800b108 <prvInitialiseTaskLists+0x74>)
 800b0da:	f7fe fcb5 	bl	8009a48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b0de:	4b0b      	ldr	r3, [pc, #44]	; (800b10c <prvInitialiseTaskLists+0x78>)
 800b0e0:	4a05      	ldr	r2, [pc, #20]	; (800b0f8 <prvInitialiseTaskLists+0x64>)
 800b0e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b0e4:	4b0a      	ldr	r3, [pc, #40]	; (800b110 <prvInitialiseTaskLists+0x7c>)
 800b0e6:	4a05      	ldr	r2, [pc, #20]	; (800b0fc <prvInitialiseTaskLists+0x68>)
 800b0e8:	601a      	str	r2, [r3, #0]
}
 800b0ea:	bf00      	nop
 800b0ec:	3708      	adds	r7, #8
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	2000145c 	.word	0x2000145c
 800b0f8:	200018bc 	.word	0x200018bc
 800b0fc:	200018d0 	.word	0x200018d0
 800b100:	200018ec 	.word	0x200018ec
 800b104:	20001900 	.word	0x20001900
 800b108:	20001918 	.word	0x20001918
 800b10c:	200018e4 	.word	0x200018e4
 800b110:	200018e8 	.word	0x200018e8

0800b114 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b11a:	e019      	b.n	800b150 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b11c:	f000 fdda 	bl	800bcd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b120:	4b10      	ldr	r3, [pc, #64]	; (800b164 <prvCheckTasksWaitingTermination+0x50>)
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	3304      	adds	r3, #4
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7fe fd15 	bl	8009b5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b132:	4b0d      	ldr	r3, [pc, #52]	; (800b168 <prvCheckTasksWaitingTermination+0x54>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	3b01      	subs	r3, #1
 800b138:	4a0b      	ldr	r2, [pc, #44]	; (800b168 <prvCheckTasksWaitingTermination+0x54>)
 800b13a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b13c:	4b0b      	ldr	r3, [pc, #44]	; (800b16c <prvCheckTasksWaitingTermination+0x58>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	3b01      	subs	r3, #1
 800b142:	4a0a      	ldr	r2, [pc, #40]	; (800b16c <prvCheckTasksWaitingTermination+0x58>)
 800b144:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b146:	f000 fdf5 	bl	800bd34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 f810 	bl	800b170 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b150:	4b06      	ldr	r3, [pc, #24]	; (800b16c <prvCheckTasksWaitingTermination+0x58>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d1e1      	bne.n	800b11c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b158:	bf00      	nop
 800b15a:	bf00      	nop
 800b15c:	3708      	adds	r7, #8
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	20001900 	.word	0x20001900
 800b168:	2000192c 	.word	0x2000192c
 800b16c:	20001914 	.word	0x20001914

0800b170 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b170:	b580      	push	{r7, lr}
 800b172:	b084      	sub	sp, #16
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	3354      	adds	r3, #84	; 0x54
 800b17c:	4618      	mov	r0, r3
 800b17e:	f001 fb07 	bl	800c790 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d108      	bne.n	800b19e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b190:	4618      	mov	r0, r3
 800b192:	f000 ff8d 	bl	800c0b0 <vPortFree>
				vPortFree( pxTCB );
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f000 ff8a 	bl	800c0b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b19c:	e018      	b.n	800b1d0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d103      	bne.n	800b1b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 ff81 	bl	800c0b0 <vPortFree>
	}
 800b1ae:	e00f      	b.n	800b1d0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b1b6:	2b02      	cmp	r3, #2
 800b1b8:	d00a      	beq.n	800b1d0 <prvDeleteTCB+0x60>
	__asm volatile
 800b1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1be:	f383 8811 	msr	BASEPRI, r3
 800b1c2:	f3bf 8f6f 	isb	sy
 800b1c6:	f3bf 8f4f 	dsb	sy
 800b1ca:	60fb      	str	r3, [r7, #12]
}
 800b1cc:	bf00      	nop
 800b1ce:	e7fe      	b.n	800b1ce <prvDeleteTCB+0x5e>
	}
 800b1d0:	bf00      	nop
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1de:	4b0c      	ldr	r3, [pc, #48]	; (800b210 <prvResetNextTaskUnblockTime+0x38>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d104      	bne.n	800b1f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b1e8:	4b0a      	ldr	r3, [pc, #40]	; (800b214 <prvResetNextTaskUnblockTime+0x3c>)
 800b1ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b1f0:	e008      	b.n	800b204 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1f2:	4b07      	ldr	r3, [pc, #28]	; (800b210 <prvResetNextTaskUnblockTime+0x38>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	4a04      	ldr	r2, [pc, #16]	; (800b214 <prvResetNextTaskUnblockTime+0x3c>)
 800b202:	6013      	str	r3, [r2, #0]
}
 800b204:	bf00      	nop
 800b206:	370c      	adds	r7, #12
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr
 800b210:	200018e4 	.word	0x200018e4
 800b214:	2000194c 	.word	0x2000194c

0800b218 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b21e:	4b0b      	ldr	r3, [pc, #44]	; (800b24c <xTaskGetSchedulerState+0x34>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d102      	bne.n	800b22c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b226:	2301      	movs	r3, #1
 800b228:	607b      	str	r3, [r7, #4]
 800b22a:	e008      	b.n	800b23e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b22c:	4b08      	ldr	r3, [pc, #32]	; (800b250 <xTaskGetSchedulerState+0x38>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d102      	bne.n	800b23a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b234:	2302      	movs	r3, #2
 800b236:	607b      	str	r3, [r7, #4]
 800b238:	e001      	b.n	800b23e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b23a:	2300      	movs	r3, #0
 800b23c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b23e:	687b      	ldr	r3, [r7, #4]
	}
 800b240:	4618      	mov	r0, r3
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr
 800b24c:	20001938 	.word	0x20001938
 800b250:	20001954 	.word	0x20001954

0800b254 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b254:	b580      	push	{r7, lr}
 800b256:	b086      	sub	sp, #24
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b260:	2300      	movs	r3, #0
 800b262:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d056      	beq.n	800b318 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b26a:	4b2e      	ldr	r3, [pc, #184]	; (800b324 <xTaskPriorityDisinherit+0xd0>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	693a      	ldr	r2, [r7, #16]
 800b270:	429a      	cmp	r2, r3
 800b272:	d00a      	beq.n	800b28a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b278:	f383 8811 	msr	BASEPRI, r3
 800b27c:	f3bf 8f6f 	isb	sy
 800b280:	f3bf 8f4f 	dsb	sy
 800b284:	60fb      	str	r3, [r7, #12]
}
 800b286:	bf00      	nop
 800b288:	e7fe      	b.n	800b288 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d10a      	bne.n	800b2a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b296:	f383 8811 	msr	BASEPRI, r3
 800b29a:	f3bf 8f6f 	isb	sy
 800b29e:	f3bf 8f4f 	dsb	sy
 800b2a2:	60bb      	str	r3, [r7, #8]
}
 800b2a4:	bf00      	nop
 800b2a6:	e7fe      	b.n	800b2a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2ac:	1e5a      	subs	r2, r3, #1
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d02c      	beq.n	800b318 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d128      	bne.n	800b318 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	3304      	adds	r3, #4
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7fe fc46 	bl	8009b5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2e8:	4b0f      	ldr	r3, [pc, #60]	; (800b328 <xTaskPriorityDisinherit+0xd4>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d903      	bls.n	800b2f8 <xTaskPriorityDisinherit+0xa4>
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f4:	4a0c      	ldr	r2, [pc, #48]	; (800b328 <xTaskPriorityDisinherit+0xd4>)
 800b2f6:	6013      	str	r3, [r2, #0]
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2fc:	4613      	mov	r3, r2
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	4413      	add	r3, r2
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4a09      	ldr	r2, [pc, #36]	; (800b32c <xTaskPriorityDisinherit+0xd8>)
 800b306:	441a      	add	r2, r3
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	3304      	adds	r3, #4
 800b30c:	4619      	mov	r1, r3
 800b30e:	4610      	mov	r0, r2
 800b310:	f7fe fbc7 	bl	8009aa2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b314:	2301      	movs	r3, #1
 800b316:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b318:	697b      	ldr	r3, [r7, #20]
	}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3718      	adds	r7, #24
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	20001458 	.word	0x20001458
 800b328:	20001934 	.word	0x20001934
 800b32c:	2000145c 	.word	0x2000145c

0800b330 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b33a:	4b21      	ldr	r3, [pc, #132]	; (800b3c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b340:	4b20      	ldr	r3, [pc, #128]	; (800b3c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	3304      	adds	r3, #4
 800b346:	4618      	mov	r0, r3
 800b348:	f7fe fc08 	bl	8009b5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b352:	d10a      	bne.n	800b36a <prvAddCurrentTaskToDelayedList+0x3a>
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d007      	beq.n	800b36a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b35a:	4b1a      	ldr	r3, [pc, #104]	; (800b3c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	3304      	adds	r3, #4
 800b360:	4619      	mov	r1, r3
 800b362:	4819      	ldr	r0, [pc, #100]	; (800b3c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800b364:	f7fe fb9d 	bl	8009aa2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b368:	e026      	b.n	800b3b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b36a:	68fa      	ldr	r2, [r7, #12]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4413      	add	r3, r2
 800b370:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b372:	4b14      	ldr	r3, [pc, #80]	; (800b3c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	68ba      	ldr	r2, [r7, #8]
 800b378:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b37a:	68ba      	ldr	r2, [r7, #8]
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d209      	bcs.n	800b396 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b382:	4b12      	ldr	r3, [pc, #72]	; (800b3cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	4b0f      	ldr	r3, [pc, #60]	; (800b3c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	3304      	adds	r3, #4
 800b38c:	4619      	mov	r1, r3
 800b38e:	4610      	mov	r0, r2
 800b390:	f7fe fbab 	bl	8009aea <vListInsert>
}
 800b394:	e010      	b.n	800b3b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b396:	4b0e      	ldr	r3, [pc, #56]	; (800b3d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	4b0a      	ldr	r3, [pc, #40]	; (800b3c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	3304      	adds	r3, #4
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	4610      	mov	r0, r2
 800b3a4:	f7fe fba1 	bl	8009aea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b3a8:	4b0a      	ldr	r3, [pc, #40]	; (800b3d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	68ba      	ldr	r2, [r7, #8]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d202      	bcs.n	800b3b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b3b2:	4a08      	ldr	r2, [pc, #32]	; (800b3d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	6013      	str	r3, [r2, #0]
}
 800b3b8:	bf00      	nop
 800b3ba:	3710      	adds	r7, #16
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	20001930 	.word	0x20001930
 800b3c4:	20001458 	.word	0x20001458
 800b3c8:	20001918 	.word	0x20001918
 800b3cc:	200018e8 	.word	0x200018e8
 800b3d0:	200018e4 	.word	0x200018e4
 800b3d4:	2000194c 	.word	0x2000194c

0800b3d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b08a      	sub	sp, #40	; 0x28
 800b3dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b3e2:	f000 fb07 	bl	800b9f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b3e6:	4b1c      	ldr	r3, [pc, #112]	; (800b458 <xTimerCreateTimerTask+0x80>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d021      	beq.n	800b432 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b3f6:	1d3a      	adds	r2, r7, #4
 800b3f8:	f107 0108 	add.w	r1, r7, #8
 800b3fc:	f107 030c 	add.w	r3, r7, #12
 800b400:	4618      	mov	r0, r3
 800b402:	f7fe fb07 	bl	8009a14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b406:	6879      	ldr	r1, [r7, #4]
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	9202      	str	r2, [sp, #8]
 800b40e:	9301      	str	r3, [sp, #4]
 800b410:	2302      	movs	r3, #2
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	2300      	movs	r3, #0
 800b416:	460a      	mov	r2, r1
 800b418:	4910      	ldr	r1, [pc, #64]	; (800b45c <xTimerCreateTimerTask+0x84>)
 800b41a:	4811      	ldr	r0, [pc, #68]	; (800b460 <xTimerCreateTimerTask+0x88>)
 800b41c:	f7ff f8b4 	bl	800a588 <xTaskCreateStatic>
 800b420:	4603      	mov	r3, r0
 800b422:	4a10      	ldr	r2, [pc, #64]	; (800b464 <xTimerCreateTimerTask+0x8c>)
 800b424:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b426:	4b0f      	ldr	r3, [pc, #60]	; (800b464 <xTimerCreateTimerTask+0x8c>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d001      	beq.n	800b432 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b42e:	2301      	movs	r3, #1
 800b430:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d10a      	bne.n	800b44e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43c:	f383 8811 	msr	BASEPRI, r3
 800b440:	f3bf 8f6f 	isb	sy
 800b444:	f3bf 8f4f 	dsb	sy
 800b448:	613b      	str	r3, [r7, #16]
}
 800b44a:	bf00      	nop
 800b44c:	e7fe      	b.n	800b44c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b44e:	697b      	ldr	r3, [r7, #20]
}
 800b450:	4618      	mov	r0, r3
 800b452:	3718      	adds	r7, #24
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}
 800b458:	20001988 	.word	0x20001988
 800b45c:	0800cfa4 	.word	0x0800cfa4
 800b460:	0800b59d 	.word	0x0800b59d
 800b464:	2000198c 	.word	0x2000198c

0800b468 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b08a      	sub	sp, #40	; 0x28
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
 800b474:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b476:	2300      	movs	r3, #0
 800b478:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d10a      	bne.n	800b496 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	623b      	str	r3, [r7, #32]
}
 800b492:	bf00      	nop
 800b494:	e7fe      	b.n	800b494 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b496:	4b1a      	ldr	r3, [pc, #104]	; (800b500 <xTimerGenericCommand+0x98>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d02a      	beq.n	800b4f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	2b05      	cmp	r3, #5
 800b4ae:	dc18      	bgt.n	800b4e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b4b0:	f7ff feb2 	bl	800b218 <xTaskGetSchedulerState>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	2b02      	cmp	r3, #2
 800b4b8:	d109      	bne.n	800b4ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b4ba:	4b11      	ldr	r3, [pc, #68]	; (800b500 <xTimerGenericCommand+0x98>)
 800b4bc:	6818      	ldr	r0, [r3, #0]
 800b4be:	f107 0110 	add.w	r1, r7, #16
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4c6:	f7fe fc77 	bl	8009db8 <xQueueGenericSend>
 800b4ca:	6278      	str	r0, [r7, #36]	; 0x24
 800b4cc:	e012      	b.n	800b4f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b4ce:	4b0c      	ldr	r3, [pc, #48]	; (800b500 <xTimerGenericCommand+0x98>)
 800b4d0:	6818      	ldr	r0, [r3, #0]
 800b4d2:	f107 0110 	add.w	r1, r7, #16
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f7fe fc6d 	bl	8009db8 <xQueueGenericSend>
 800b4de:	6278      	str	r0, [r7, #36]	; 0x24
 800b4e0:	e008      	b.n	800b4f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b4e2:	4b07      	ldr	r3, [pc, #28]	; (800b500 <xTimerGenericCommand+0x98>)
 800b4e4:	6818      	ldr	r0, [r3, #0]
 800b4e6:	f107 0110 	add.w	r1, r7, #16
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	683a      	ldr	r2, [r7, #0]
 800b4ee:	f7fe fd61 	bl	8009fb4 <xQueueGenericSendFromISR>
 800b4f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3728      	adds	r7, #40	; 0x28
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	20001988 	.word	0x20001988

0800b504 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b088      	sub	sp, #32
 800b508:	af02      	add	r7, sp, #8
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b50e:	4b22      	ldr	r3, [pc, #136]	; (800b598 <prvProcessExpiredTimer+0x94>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	3304      	adds	r3, #4
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7fe fb1d 	bl	8009b5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b528:	f003 0304 	and.w	r3, r3, #4
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d022      	beq.n	800b576 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	699a      	ldr	r2, [r3, #24]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	18d1      	adds	r1, r2, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	683a      	ldr	r2, [r7, #0]
 800b53c:	6978      	ldr	r0, [r7, #20]
 800b53e:	f000 f8d1 	bl	800b6e4 <prvInsertTimerInActiveList>
 800b542:	4603      	mov	r3, r0
 800b544:	2b00      	cmp	r3, #0
 800b546:	d01f      	beq.n	800b588 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b548:	2300      	movs	r3, #0
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	2300      	movs	r3, #0
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	2100      	movs	r1, #0
 800b552:	6978      	ldr	r0, [r7, #20]
 800b554:	f7ff ff88 	bl	800b468 <xTimerGenericCommand>
 800b558:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d113      	bne.n	800b588 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b564:	f383 8811 	msr	BASEPRI, r3
 800b568:	f3bf 8f6f 	isb	sy
 800b56c:	f3bf 8f4f 	dsb	sy
 800b570:	60fb      	str	r3, [r7, #12]
}
 800b572:	bf00      	nop
 800b574:	e7fe      	b.n	800b574 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b57c:	f023 0301 	bic.w	r3, r3, #1
 800b580:	b2da      	uxtb	r2, r3
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	6a1b      	ldr	r3, [r3, #32]
 800b58c:	6978      	ldr	r0, [r7, #20]
 800b58e:	4798      	blx	r3
}
 800b590:	bf00      	nop
 800b592:	3718      	adds	r7, #24
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	20001980 	.word	0x20001980

0800b59c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b5a4:	f107 0308 	add.w	r3, r7, #8
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f000 f857 	bl	800b65c <prvGetNextExpireTime>
 800b5ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	68f8      	ldr	r0, [r7, #12]
 800b5b6:	f000 f803 	bl	800b5c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b5ba:	f000 f8d5 	bl	800b768 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b5be:	e7f1      	b.n	800b5a4 <prvTimerTask+0x8>

0800b5c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b5ca:	f7ff fa39 	bl	800aa40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b5ce:	f107 0308 	add.w	r3, r7, #8
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f000 f866 	bl	800b6a4 <prvSampleTimeNow>
 800b5d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d130      	bne.n	800b642 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d10a      	bne.n	800b5fc <prvProcessTimerOrBlockTask+0x3c>
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d806      	bhi.n	800b5fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b5ee:	f7ff fa35 	bl	800aa5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b5f2:	68f9      	ldr	r1, [r7, #12]
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f7ff ff85 	bl	800b504 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b5fa:	e024      	b.n	800b646 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d008      	beq.n	800b614 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b602:	4b13      	ldr	r3, [pc, #76]	; (800b650 <prvProcessTimerOrBlockTask+0x90>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d101      	bne.n	800b610 <prvProcessTimerOrBlockTask+0x50>
 800b60c:	2301      	movs	r3, #1
 800b60e:	e000      	b.n	800b612 <prvProcessTimerOrBlockTask+0x52>
 800b610:	2300      	movs	r3, #0
 800b612:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b614:	4b0f      	ldr	r3, [pc, #60]	; (800b654 <prvProcessTimerOrBlockTask+0x94>)
 800b616:	6818      	ldr	r0, [r3, #0]
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	1ad3      	subs	r3, r2, r3
 800b61e:	683a      	ldr	r2, [r7, #0]
 800b620:	4619      	mov	r1, r3
 800b622:	f7fe ff7d 	bl	800a520 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b626:	f7ff fa19 	bl	800aa5c <xTaskResumeAll>
 800b62a:	4603      	mov	r3, r0
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d10a      	bne.n	800b646 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b630:	4b09      	ldr	r3, [pc, #36]	; (800b658 <prvProcessTimerOrBlockTask+0x98>)
 800b632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b636:	601a      	str	r2, [r3, #0]
 800b638:	f3bf 8f4f 	dsb	sy
 800b63c:	f3bf 8f6f 	isb	sy
}
 800b640:	e001      	b.n	800b646 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b642:	f7ff fa0b 	bl	800aa5c <xTaskResumeAll>
}
 800b646:	bf00      	nop
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	20001984 	.word	0x20001984
 800b654:	20001988 	.word	0x20001988
 800b658:	e000ed04 	.word	0xe000ed04

0800b65c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b65c:	b480      	push	{r7}
 800b65e:	b085      	sub	sp, #20
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b664:	4b0e      	ldr	r3, [pc, #56]	; (800b6a0 <prvGetNextExpireTime+0x44>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d101      	bne.n	800b672 <prvGetNextExpireTime+0x16>
 800b66e:	2201      	movs	r2, #1
 800b670:	e000      	b.n	800b674 <prvGetNextExpireTime+0x18>
 800b672:	2200      	movs	r2, #0
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d105      	bne.n	800b68c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b680:	4b07      	ldr	r3, [pc, #28]	; (800b6a0 <prvGetNextExpireTime+0x44>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	60fb      	str	r3, [r7, #12]
 800b68a:	e001      	b.n	800b690 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b68c:	2300      	movs	r3, #0
 800b68e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b690:	68fb      	ldr	r3, [r7, #12]
}
 800b692:	4618      	mov	r0, r3
 800b694:	3714      	adds	r7, #20
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr
 800b69e:	bf00      	nop
 800b6a0:	20001980 	.word	0x20001980

0800b6a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b084      	sub	sp, #16
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b6ac:	f7ff fa74 	bl	800ab98 <xTaskGetTickCount>
 800b6b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b6b2:	4b0b      	ldr	r3, [pc, #44]	; (800b6e0 <prvSampleTimeNow+0x3c>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	68fa      	ldr	r2, [r7, #12]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d205      	bcs.n	800b6c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b6bc:	f000 f936 	bl	800b92c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	601a      	str	r2, [r3, #0]
 800b6c6:	e002      	b.n	800b6ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b6ce:	4a04      	ldr	r2, [pc, #16]	; (800b6e0 <prvSampleTimeNow+0x3c>)
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	20001990 	.word	0x20001990

0800b6e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b086      	sub	sp, #24
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	60f8      	str	r0, [r7, #12]
 800b6ec:	60b9      	str	r1, [r7, #8]
 800b6ee:	607a      	str	r2, [r7, #4]
 800b6f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	68ba      	ldr	r2, [r7, #8]
 800b6fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	68fa      	ldr	r2, [r7, #12]
 800b700:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b702:	68ba      	ldr	r2, [r7, #8]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	429a      	cmp	r2, r3
 800b708:	d812      	bhi.n	800b730 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	1ad2      	subs	r2, r2, r3
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	699b      	ldr	r3, [r3, #24]
 800b714:	429a      	cmp	r2, r3
 800b716:	d302      	bcc.n	800b71e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b718:	2301      	movs	r3, #1
 800b71a:	617b      	str	r3, [r7, #20]
 800b71c:	e01b      	b.n	800b756 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b71e:	4b10      	ldr	r3, [pc, #64]	; (800b760 <prvInsertTimerInActiveList+0x7c>)
 800b720:	681a      	ldr	r2, [r3, #0]
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	3304      	adds	r3, #4
 800b726:	4619      	mov	r1, r3
 800b728:	4610      	mov	r0, r2
 800b72a:	f7fe f9de 	bl	8009aea <vListInsert>
 800b72e:	e012      	b.n	800b756 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	429a      	cmp	r2, r3
 800b736:	d206      	bcs.n	800b746 <prvInsertTimerInActiveList+0x62>
 800b738:	68ba      	ldr	r2, [r7, #8]
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d302      	bcc.n	800b746 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b740:	2301      	movs	r3, #1
 800b742:	617b      	str	r3, [r7, #20]
 800b744:	e007      	b.n	800b756 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b746:	4b07      	ldr	r3, [pc, #28]	; (800b764 <prvInsertTimerInActiveList+0x80>)
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	3304      	adds	r3, #4
 800b74e:	4619      	mov	r1, r3
 800b750:	4610      	mov	r0, r2
 800b752:	f7fe f9ca 	bl	8009aea <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b756:	697b      	ldr	r3, [r7, #20]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3718      	adds	r7, #24
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	20001984 	.word	0x20001984
 800b764:	20001980 	.word	0x20001980

0800b768 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b08e      	sub	sp, #56	; 0x38
 800b76c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b76e:	e0ca      	b.n	800b906 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2b00      	cmp	r3, #0
 800b774:	da18      	bge.n	800b7a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b776:	1d3b      	adds	r3, r7, #4
 800b778:	3304      	adds	r3, #4
 800b77a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d10a      	bne.n	800b798 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b786:	f383 8811 	msr	BASEPRI, r3
 800b78a:	f3bf 8f6f 	isb	sy
 800b78e:	f3bf 8f4f 	dsb	sy
 800b792:	61fb      	str	r3, [r7, #28]
}
 800b794:	bf00      	nop
 800b796:	e7fe      	b.n	800b796 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b79e:	6850      	ldr	r0, [r2, #4]
 800b7a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7a2:	6892      	ldr	r2, [r2, #8]
 800b7a4:	4611      	mov	r1, r2
 800b7a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	f2c0 80aa 	blt.w	800b904 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b6:	695b      	ldr	r3, [r3, #20]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d004      	beq.n	800b7c6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7be:	3304      	adds	r3, #4
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7fe f9cb 	bl	8009b5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b7c6:	463b      	mov	r3, r7
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7ff ff6b 	bl	800b6a4 <prvSampleTimeNow>
 800b7ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2b09      	cmp	r3, #9
 800b7d4:	f200 8097 	bhi.w	800b906 <prvProcessReceivedCommands+0x19e>
 800b7d8:	a201      	add	r2, pc, #4	; (adr r2, 800b7e0 <prvProcessReceivedCommands+0x78>)
 800b7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7de:	bf00      	nop
 800b7e0:	0800b809 	.word	0x0800b809
 800b7e4:	0800b809 	.word	0x0800b809
 800b7e8:	0800b809 	.word	0x0800b809
 800b7ec:	0800b87d 	.word	0x0800b87d
 800b7f0:	0800b891 	.word	0x0800b891
 800b7f4:	0800b8db 	.word	0x0800b8db
 800b7f8:	0800b809 	.word	0x0800b809
 800b7fc:	0800b809 	.word	0x0800b809
 800b800:	0800b87d 	.word	0x0800b87d
 800b804:	0800b891 	.word	0x0800b891
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b80e:	f043 0301 	orr.w	r3, r3, #1
 800b812:	b2da      	uxtb	r2, r3
 800b814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b81a:	68ba      	ldr	r2, [r7, #8]
 800b81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81e:	699b      	ldr	r3, [r3, #24]
 800b820:	18d1      	adds	r1, r2, r3
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b828:	f7ff ff5c 	bl	800b6e4 <prvInsertTimerInActiveList>
 800b82c:	4603      	mov	r3, r0
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d069      	beq.n	800b906 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b834:	6a1b      	ldr	r3, [r3, #32]
 800b836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b838:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b840:	f003 0304 	and.w	r3, r3, #4
 800b844:	2b00      	cmp	r3, #0
 800b846:	d05e      	beq.n	800b906 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b848:	68ba      	ldr	r2, [r7, #8]
 800b84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84c:	699b      	ldr	r3, [r3, #24]
 800b84e:	441a      	add	r2, r3
 800b850:	2300      	movs	r3, #0
 800b852:	9300      	str	r3, [sp, #0]
 800b854:	2300      	movs	r3, #0
 800b856:	2100      	movs	r1, #0
 800b858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b85a:	f7ff fe05 	bl	800b468 <xTimerGenericCommand>
 800b85e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b860:	6a3b      	ldr	r3, [r7, #32]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d14f      	bne.n	800b906 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b86a:	f383 8811 	msr	BASEPRI, r3
 800b86e:	f3bf 8f6f 	isb	sy
 800b872:	f3bf 8f4f 	dsb	sy
 800b876:	61bb      	str	r3, [r7, #24]
}
 800b878:	bf00      	nop
 800b87a:	e7fe      	b.n	800b87a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b882:	f023 0301 	bic.w	r3, r3, #1
 800b886:	b2da      	uxtb	r2, r3
 800b888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b88e:	e03a      	b.n	800b906 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b892:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b896:	f043 0301 	orr.w	r3, r3, #1
 800b89a:	b2da      	uxtb	r2, r3
 800b89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b8a2:	68ba      	ldr	r2, [r7, #8]
 800b8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8aa:	699b      	ldr	r3, [r3, #24]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d10a      	bne.n	800b8c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b4:	f383 8811 	msr	BASEPRI, r3
 800b8b8:	f3bf 8f6f 	isb	sy
 800b8bc:	f3bf 8f4f 	dsb	sy
 800b8c0:	617b      	str	r3, [r7, #20]
}
 800b8c2:	bf00      	nop
 800b8c4:	e7fe      	b.n	800b8c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c8:	699a      	ldr	r2, [r3, #24]
 800b8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8cc:	18d1      	adds	r1, r2, r3
 800b8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8d4:	f7ff ff06 	bl	800b6e4 <prvInsertTimerInActiveList>
					break;
 800b8d8:	e015      	b.n	800b906 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8e0:	f003 0302 	and.w	r3, r3, #2
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d103      	bne.n	800b8f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b8e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8ea:	f000 fbe1 	bl	800c0b0 <vPortFree>
 800b8ee:	e00a      	b.n	800b906 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8f6:	f023 0301 	bic.w	r3, r3, #1
 800b8fa:	b2da      	uxtb	r2, r3
 800b8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b902:	e000      	b.n	800b906 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b904:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b906:	4b08      	ldr	r3, [pc, #32]	; (800b928 <prvProcessReceivedCommands+0x1c0>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	1d39      	adds	r1, r7, #4
 800b90c:	2200      	movs	r2, #0
 800b90e:	4618      	mov	r0, r3
 800b910:	f7fe fbec 	bl	800a0ec <xQueueReceive>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	f47f af2a 	bne.w	800b770 <prvProcessReceivedCommands+0x8>
	}
}
 800b91c:	bf00      	nop
 800b91e:	bf00      	nop
 800b920:	3730      	adds	r7, #48	; 0x30
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
 800b926:	bf00      	nop
 800b928:	20001988 	.word	0x20001988

0800b92c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b088      	sub	sp, #32
 800b930:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b932:	e048      	b.n	800b9c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b934:	4b2d      	ldr	r3, [pc, #180]	; (800b9ec <prvSwitchTimerLists+0xc0>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	68db      	ldr	r3, [r3, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b93e:	4b2b      	ldr	r3, [pc, #172]	; (800b9ec <prvSwitchTimerLists+0xc0>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	68db      	ldr	r3, [r3, #12]
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	3304      	adds	r3, #4
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7fe f905 	bl	8009b5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	6a1b      	ldr	r3, [r3, #32]
 800b956:	68f8      	ldr	r0, [r7, #12]
 800b958:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b960:	f003 0304 	and.w	r3, r3, #4
 800b964:	2b00      	cmp	r3, #0
 800b966:	d02e      	beq.n	800b9c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	699b      	ldr	r3, [r3, #24]
 800b96c:	693a      	ldr	r2, [r7, #16]
 800b96e:	4413      	add	r3, r2
 800b970:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b972:	68ba      	ldr	r2, [r7, #8]
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	429a      	cmp	r2, r3
 800b978:	d90e      	bls.n	800b998 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	68ba      	ldr	r2, [r7, #8]
 800b97e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	68fa      	ldr	r2, [r7, #12]
 800b984:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b986:	4b19      	ldr	r3, [pc, #100]	; (800b9ec <prvSwitchTimerLists+0xc0>)
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	3304      	adds	r3, #4
 800b98e:	4619      	mov	r1, r3
 800b990:	4610      	mov	r0, r2
 800b992:	f7fe f8aa 	bl	8009aea <vListInsert>
 800b996:	e016      	b.n	800b9c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b998:	2300      	movs	r3, #0
 800b99a:	9300      	str	r3, [sp, #0]
 800b99c:	2300      	movs	r3, #0
 800b99e:	693a      	ldr	r2, [r7, #16]
 800b9a0:	2100      	movs	r1, #0
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	f7ff fd60 	bl	800b468 <xTimerGenericCommand>
 800b9a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d10a      	bne.n	800b9c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b4:	f383 8811 	msr	BASEPRI, r3
 800b9b8:	f3bf 8f6f 	isb	sy
 800b9bc:	f3bf 8f4f 	dsb	sy
 800b9c0:	603b      	str	r3, [r7, #0]
}
 800b9c2:	bf00      	nop
 800b9c4:	e7fe      	b.n	800b9c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b9c6:	4b09      	ldr	r3, [pc, #36]	; (800b9ec <prvSwitchTimerLists+0xc0>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d1b1      	bne.n	800b934 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b9d0:	4b06      	ldr	r3, [pc, #24]	; (800b9ec <prvSwitchTimerLists+0xc0>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b9d6:	4b06      	ldr	r3, [pc, #24]	; (800b9f0 <prvSwitchTimerLists+0xc4>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4a04      	ldr	r2, [pc, #16]	; (800b9ec <prvSwitchTimerLists+0xc0>)
 800b9dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b9de:	4a04      	ldr	r2, [pc, #16]	; (800b9f0 <prvSwitchTimerLists+0xc4>)
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	6013      	str	r3, [r2, #0]
}
 800b9e4:	bf00      	nop
 800b9e6:	3718      	adds	r7, #24
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	20001980 	.word	0x20001980
 800b9f0:	20001984 	.word	0x20001984

0800b9f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b9fa:	f000 f96b 	bl	800bcd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b9fe:	4b15      	ldr	r3, [pc, #84]	; (800ba54 <prvCheckForValidListAndQueue+0x60>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d120      	bne.n	800ba48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ba06:	4814      	ldr	r0, [pc, #80]	; (800ba58 <prvCheckForValidListAndQueue+0x64>)
 800ba08:	f7fe f81e 	bl	8009a48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ba0c:	4813      	ldr	r0, [pc, #76]	; (800ba5c <prvCheckForValidListAndQueue+0x68>)
 800ba0e:	f7fe f81b 	bl	8009a48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ba12:	4b13      	ldr	r3, [pc, #76]	; (800ba60 <prvCheckForValidListAndQueue+0x6c>)
 800ba14:	4a10      	ldr	r2, [pc, #64]	; (800ba58 <prvCheckForValidListAndQueue+0x64>)
 800ba16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ba18:	4b12      	ldr	r3, [pc, #72]	; (800ba64 <prvCheckForValidListAndQueue+0x70>)
 800ba1a:	4a10      	ldr	r2, [pc, #64]	; (800ba5c <prvCheckForValidListAndQueue+0x68>)
 800ba1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ba1e:	2300      	movs	r3, #0
 800ba20:	9300      	str	r3, [sp, #0]
 800ba22:	4b11      	ldr	r3, [pc, #68]	; (800ba68 <prvCheckForValidListAndQueue+0x74>)
 800ba24:	4a11      	ldr	r2, [pc, #68]	; (800ba6c <prvCheckForValidListAndQueue+0x78>)
 800ba26:	2110      	movs	r1, #16
 800ba28:	200a      	movs	r0, #10
 800ba2a:	f7fe f929 	bl	8009c80 <xQueueGenericCreateStatic>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	4a08      	ldr	r2, [pc, #32]	; (800ba54 <prvCheckForValidListAndQueue+0x60>)
 800ba32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ba34:	4b07      	ldr	r3, [pc, #28]	; (800ba54 <prvCheckForValidListAndQueue+0x60>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d005      	beq.n	800ba48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ba3c:	4b05      	ldr	r3, [pc, #20]	; (800ba54 <prvCheckForValidListAndQueue+0x60>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	490b      	ldr	r1, [pc, #44]	; (800ba70 <prvCheckForValidListAndQueue+0x7c>)
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7fe fd42 	bl	800a4cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba48:	f000 f974 	bl	800bd34 <vPortExitCritical>
}
 800ba4c:	bf00      	nop
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	20001988 	.word	0x20001988
 800ba58:	20001958 	.word	0x20001958
 800ba5c:	2000196c 	.word	0x2000196c
 800ba60:	20001980 	.word	0x20001980
 800ba64:	20001984 	.word	0x20001984
 800ba68:	20001a34 	.word	0x20001a34
 800ba6c:	20001994 	.word	0x20001994
 800ba70:	0800cfac 	.word	0x0800cfac

0800ba74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ba74:	b480      	push	{r7}
 800ba76:	b085      	sub	sp, #20
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	60b9      	str	r1, [r7, #8]
 800ba7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	3b04      	subs	r3, #4
 800ba84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ba8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	3b04      	subs	r3, #4
 800ba92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	f023 0201 	bic.w	r2, r3, #1
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	3b04      	subs	r3, #4
 800baa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800baa4:	4a0c      	ldr	r2, [pc, #48]	; (800bad8 <pxPortInitialiseStack+0x64>)
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	3b14      	subs	r3, #20
 800baae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	3b04      	subs	r3, #4
 800baba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f06f 0202 	mvn.w	r2, #2
 800bac2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	3b20      	subs	r3, #32
 800bac8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800baca:	68fb      	ldr	r3, [r7, #12]
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3714      	adds	r7, #20
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr
 800bad8:	0800badd 	.word	0x0800badd

0800badc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800badc:	b480      	push	{r7}
 800bade:	b085      	sub	sp, #20
 800bae0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bae2:	2300      	movs	r3, #0
 800bae4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bae6:	4b12      	ldr	r3, [pc, #72]	; (800bb30 <prvTaskExitError+0x54>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baee:	d00a      	beq.n	800bb06 <prvTaskExitError+0x2a>
	__asm volatile
 800baf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf4:	f383 8811 	msr	BASEPRI, r3
 800baf8:	f3bf 8f6f 	isb	sy
 800bafc:	f3bf 8f4f 	dsb	sy
 800bb00:	60fb      	str	r3, [r7, #12]
}
 800bb02:	bf00      	nop
 800bb04:	e7fe      	b.n	800bb04 <prvTaskExitError+0x28>
	__asm volatile
 800bb06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb0a:	f383 8811 	msr	BASEPRI, r3
 800bb0e:	f3bf 8f6f 	isb	sy
 800bb12:	f3bf 8f4f 	dsb	sy
 800bb16:	60bb      	str	r3, [r7, #8]
}
 800bb18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bb1a:	bf00      	nop
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d0fc      	beq.n	800bb1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bb22:	bf00      	nop
 800bb24:	bf00      	nop
 800bb26:	3714      	adds	r7, #20
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr
 800bb30:	200000b8 	.word	0x200000b8
	...

0800bb40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bb40:	4b07      	ldr	r3, [pc, #28]	; (800bb60 <pxCurrentTCBConst2>)
 800bb42:	6819      	ldr	r1, [r3, #0]
 800bb44:	6808      	ldr	r0, [r1, #0]
 800bb46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb4a:	f380 8809 	msr	PSP, r0
 800bb4e:	f3bf 8f6f 	isb	sy
 800bb52:	f04f 0000 	mov.w	r0, #0
 800bb56:	f380 8811 	msr	BASEPRI, r0
 800bb5a:	4770      	bx	lr
 800bb5c:	f3af 8000 	nop.w

0800bb60 <pxCurrentTCBConst2>:
 800bb60:	20001458 	.word	0x20001458
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bb64:	bf00      	nop
 800bb66:	bf00      	nop

0800bb68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bb68:	4808      	ldr	r0, [pc, #32]	; (800bb8c <prvPortStartFirstTask+0x24>)
 800bb6a:	6800      	ldr	r0, [r0, #0]
 800bb6c:	6800      	ldr	r0, [r0, #0]
 800bb6e:	f380 8808 	msr	MSP, r0
 800bb72:	f04f 0000 	mov.w	r0, #0
 800bb76:	f380 8814 	msr	CONTROL, r0
 800bb7a:	b662      	cpsie	i
 800bb7c:	b661      	cpsie	f
 800bb7e:	f3bf 8f4f 	dsb	sy
 800bb82:	f3bf 8f6f 	isb	sy
 800bb86:	df00      	svc	0
 800bb88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bb8a:	bf00      	nop
 800bb8c:	e000ed08 	.word	0xe000ed08

0800bb90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b086      	sub	sp, #24
 800bb94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bb96:	4b46      	ldr	r3, [pc, #280]	; (800bcb0 <xPortStartScheduler+0x120>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4a46      	ldr	r2, [pc, #280]	; (800bcb4 <xPortStartScheduler+0x124>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d10a      	bne.n	800bbb6 <xPortStartScheduler+0x26>
	__asm volatile
 800bba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba4:	f383 8811 	msr	BASEPRI, r3
 800bba8:	f3bf 8f6f 	isb	sy
 800bbac:	f3bf 8f4f 	dsb	sy
 800bbb0:	613b      	str	r3, [r7, #16]
}
 800bbb2:	bf00      	nop
 800bbb4:	e7fe      	b.n	800bbb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bbb6:	4b3e      	ldr	r3, [pc, #248]	; (800bcb0 <xPortStartScheduler+0x120>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4a3f      	ldr	r2, [pc, #252]	; (800bcb8 <xPortStartScheduler+0x128>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d10a      	bne.n	800bbd6 <xPortStartScheduler+0x46>
	__asm volatile
 800bbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc4:	f383 8811 	msr	BASEPRI, r3
 800bbc8:	f3bf 8f6f 	isb	sy
 800bbcc:	f3bf 8f4f 	dsb	sy
 800bbd0:	60fb      	str	r3, [r7, #12]
}
 800bbd2:	bf00      	nop
 800bbd4:	e7fe      	b.n	800bbd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bbd6:	4b39      	ldr	r3, [pc, #228]	; (800bcbc <xPortStartScheduler+0x12c>)
 800bbd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	b2db      	uxtb	r3, r3
 800bbe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	22ff      	movs	r2, #255	; 0xff
 800bbe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	b2db      	uxtb	r3, r3
 800bbee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bbf0:	78fb      	ldrb	r3, [r7, #3]
 800bbf2:	b2db      	uxtb	r3, r3
 800bbf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bbf8:	b2da      	uxtb	r2, r3
 800bbfa:	4b31      	ldr	r3, [pc, #196]	; (800bcc0 <xPortStartScheduler+0x130>)
 800bbfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bbfe:	4b31      	ldr	r3, [pc, #196]	; (800bcc4 <xPortStartScheduler+0x134>)
 800bc00:	2207      	movs	r2, #7
 800bc02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc04:	e009      	b.n	800bc1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bc06:	4b2f      	ldr	r3, [pc, #188]	; (800bcc4 <xPortStartScheduler+0x134>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	3b01      	subs	r3, #1
 800bc0c:	4a2d      	ldr	r2, [pc, #180]	; (800bcc4 <xPortStartScheduler+0x134>)
 800bc0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bc10:	78fb      	ldrb	r3, [r7, #3]
 800bc12:	b2db      	uxtb	r3, r3
 800bc14:	005b      	lsls	r3, r3, #1
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc1a:	78fb      	ldrb	r3, [r7, #3]
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc22:	2b80      	cmp	r3, #128	; 0x80
 800bc24:	d0ef      	beq.n	800bc06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bc26:	4b27      	ldr	r3, [pc, #156]	; (800bcc4 <xPortStartScheduler+0x134>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f1c3 0307 	rsb	r3, r3, #7
 800bc2e:	2b04      	cmp	r3, #4
 800bc30:	d00a      	beq.n	800bc48 <xPortStartScheduler+0xb8>
	__asm volatile
 800bc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc36:	f383 8811 	msr	BASEPRI, r3
 800bc3a:	f3bf 8f6f 	isb	sy
 800bc3e:	f3bf 8f4f 	dsb	sy
 800bc42:	60bb      	str	r3, [r7, #8]
}
 800bc44:	bf00      	nop
 800bc46:	e7fe      	b.n	800bc46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bc48:	4b1e      	ldr	r3, [pc, #120]	; (800bcc4 <xPortStartScheduler+0x134>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	021b      	lsls	r3, r3, #8
 800bc4e:	4a1d      	ldr	r2, [pc, #116]	; (800bcc4 <xPortStartScheduler+0x134>)
 800bc50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bc52:	4b1c      	ldr	r3, [pc, #112]	; (800bcc4 <xPortStartScheduler+0x134>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bc5a:	4a1a      	ldr	r2, [pc, #104]	; (800bcc4 <xPortStartScheduler+0x134>)
 800bc5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	b2da      	uxtb	r2, r3
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bc66:	4b18      	ldr	r3, [pc, #96]	; (800bcc8 <xPortStartScheduler+0x138>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4a17      	ldr	r2, [pc, #92]	; (800bcc8 <xPortStartScheduler+0x138>)
 800bc6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bc70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bc72:	4b15      	ldr	r3, [pc, #84]	; (800bcc8 <xPortStartScheduler+0x138>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4a14      	ldr	r2, [pc, #80]	; (800bcc8 <xPortStartScheduler+0x138>)
 800bc78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bc7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bc7e:	f000 f8dd 	bl	800be3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bc82:	4b12      	ldr	r3, [pc, #72]	; (800bccc <xPortStartScheduler+0x13c>)
 800bc84:	2200      	movs	r2, #0
 800bc86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bc88:	f000 f8fc 	bl	800be84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bc8c:	4b10      	ldr	r3, [pc, #64]	; (800bcd0 <xPortStartScheduler+0x140>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4a0f      	ldr	r2, [pc, #60]	; (800bcd0 <xPortStartScheduler+0x140>)
 800bc92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bc96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bc98:	f7ff ff66 	bl	800bb68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bc9c:	f7ff f846 	bl	800ad2c <vTaskSwitchContext>
	prvTaskExitError();
 800bca0:	f7ff ff1c 	bl	800badc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bca4:	2300      	movs	r3, #0
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3718      	adds	r7, #24
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}
 800bcae:	bf00      	nop
 800bcb0:	e000ed00 	.word	0xe000ed00
 800bcb4:	410fc271 	.word	0x410fc271
 800bcb8:	410fc270 	.word	0x410fc270
 800bcbc:	e000e400 	.word	0xe000e400
 800bcc0:	20001a84 	.word	0x20001a84
 800bcc4:	20001a88 	.word	0x20001a88
 800bcc8:	e000ed20 	.word	0xe000ed20
 800bccc:	200000b8 	.word	0x200000b8
 800bcd0:	e000ef34 	.word	0xe000ef34

0800bcd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
	__asm volatile
 800bcda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcde:	f383 8811 	msr	BASEPRI, r3
 800bce2:	f3bf 8f6f 	isb	sy
 800bce6:	f3bf 8f4f 	dsb	sy
 800bcea:	607b      	str	r3, [r7, #4]
}
 800bcec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bcee:	4b0f      	ldr	r3, [pc, #60]	; (800bd2c <vPortEnterCritical+0x58>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	4a0d      	ldr	r2, [pc, #52]	; (800bd2c <vPortEnterCritical+0x58>)
 800bcf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bcf8:	4b0c      	ldr	r3, [pc, #48]	; (800bd2c <vPortEnterCritical+0x58>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d10f      	bne.n	800bd20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bd00:	4b0b      	ldr	r3, [pc, #44]	; (800bd30 <vPortEnterCritical+0x5c>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	b2db      	uxtb	r3, r3
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d00a      	beq.n	800bd20 <vPortEnterCritical+0x4c>
	__asm volatile
 800bd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0e:	f383 8811 	msr	BASEPRI, r3
 800bd12:	f3bf 8f6f 	isb	sy
 800bd16:	f3bf 8f4f 	dsb	sy
 800bd1a:	603b      	str	r3, [r7, #0]
}
 800bd1c:	bf00      	nop
 800bd1e:	e7fe      	b.n	800bd1e <vPortEnterCritical+0x4a>
	}
}
 800bd20:	bf00      	nop
 800bd22:	370c      	adds	r7, #12
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr
 800bd2c:	200000b8 	.word	0x200000b8
 800bd30:	e000ed04 	.word	0xe000ed04

0800bd34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bd34:	b480      	push	{r7}
 800bd36:	b083      	sub	sp, #12
 800bd38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bd3a:	4b12      	ldr	r3, [pc, #72]	; (800bd84 <vPortExitCritical+0x50>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d10a      	bne.n	800bd58 <vPortExitCritical+0x24>
	__asm volatile
 800bd42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd46:	f383 8811 	msr	BASEPRI, r3
 800bd4a:	f3bf 8f6f 	isb	sy
 800bd4e:	f3bf 8f4f 	dsb	sy
 800bd52:	607b      	str	r3, [r7, #4]
}
 800bd54:	bf00      	nop
 800bd56:	e7fe      	b.n	800bd56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bd58:	4b0a      	ldr	r3, [pc, #40]	; (800bd84 <vPortExitCritical+0x50>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	3b01      	subs	r3, #1
 800bd5e:	4a09      	ldr	r2, [pc, #36]	; (800bd84 <vPortExitCritical+0x50>)
 800bd60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bd62:	4b08      	ldr	r3, [pc, #32]	; (800bd84 <vPortExitCritical+0x50>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d105      	bne.n	800bd76 <vPortExitCritical+0x42>
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	f383 8811 	msr	BASEPRI, r3
}
 800bd74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bd76:	bf00      	nop
 800bd78:	370c      	adds	r7, #12
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr
 800bd82:	bf00      	nop
 800bd84:	200000b8 	.word	0x200000b8
	...

0800bd90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bd90:	f3ef 8009 	mrs	r0, PSP
 800bd94:	f3bf 8f6f 	isb	sy
 800bd98:	4b15      	ldr	r3, [pc, #84]	; (800bdf0 <pxCurrentTCBConst>)
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	f01e 0f10 	tst.w	lr, #16
 800bda0:	bf08      	it	eq
 800bda2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bda6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdaa:	6010      	str	r0, [r2, #0]
 800bdac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bdb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bdb4:	f380 8811 	msr	BASEPRI, r0
 800bdb8:	f3bf 8f4f 	dsb	sy
 800bdbc:	f3bf 8f6f 	isb	sy
 800bdc0:	f7fe ffb4 	bl	800ad2c <vTaskSwitchContext>
 800bdc4:	f04f 0000 	mov.w	r0, #0
 800bdc8:	f380 8811 	msr	BASEPRI, r0
 800bdcc:	bc09      	pop	{r0, r3}
 800bdce:	6819      	ldr	r1, [r3, #0]
 800bdd0:	6808      	ldr	r0, [r1, #0]
 800bdd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdd6:	f01e 0f10 	tst.w	lr, #16
 800bdda:	bf08      	it	eq
 800bddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bde0:	f380 8809 	msr	PSP, r0
 800bde4:	f3bf 8f6f 	isb	sy
 800bde8:	4770      	bx	lr
 800bdea:	bf00      	nop
 800bdec:	f3af 8000 	nop.w

0800bdf0 <pxCurrentTCBConst>:
 800bdf0:	20001458 	.word	0x20001458
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bdf4:	bf00      	nop
 800bdf6:	bf00      	nop

0800bdf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
	__asm volatile
 800bdfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be02:	f383 8811 	msr	BASEPRI, r3
 800be06:	f3bf 8f6f 	isb	sy
 800be0a:	f3bf 8f4f 	dsb	sy
 800be0e:	607b      	str	r3, [r7, #4]
}
 800be10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800be12:	f7fe fed1 	bl	800abb8 <xTaskIncrementTick>
 800be16:	4603      	mov	r3, r0
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d003      	beq.n	800be24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800be1c:	4b06      	ldr	r3, [pc, #24]	; (800be38 <xPortSysTickHandler+0x40>)
 800be1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be22:	601a      	str	r2, [r3, #0]
 800be24:	2300      	movs	r3, #0
 800be26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	f383 8811 	msr	BASEPRI, r3
}
 800be2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800be30:	bf00      	nop
 800be32:	3708      	adds	r7, #8
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}
 800be38:	e000ed04 	.word	0xe000ed04

0800be3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800be3c:	b480      	push	{r7}
 800be3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800be40:	4b0b      	ldr	r3, [pc, #44]	; (800be70 <vPortSetupTimerInterrupt+0x34>)
 800be42:	2200      	movs	r2, #0
 800be44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800be46:	4b0b      	ldr	r3, [pc, #44]	; (800be74 <vPortSetupTimerInterrupt+0x38>)
 800be48:	2200      	movs	r2, #0
 800be4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800be4c:	4b0a      	ldr	r3, [pc, #40]	; (800be78 <vPortSetupTimerInterrupt+0x3c>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a0a      	ldr	r2, [pc, #40]	; (800be7c <vPortSetupTimerInterrupt+0x40>)
 800be52:	fba2 2303 	umull	r2, r3, r2, r3
 800be56:	099b      	lsrs	r3, r3, #6
 800be58:	4a09      	ldr	r2, [pc, #36]	; (800be80 <vPortSetupTimerInterrupt+0x44>)
 800be5a:	3b01      	subs	r3, #1
 800be5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800be5e:	4b04      	ldr	r3, [pc, #16]	; (800be70 <vPortSetupTimerInterrupt+0x34>)
 800be60:	2207      	movs	r2, #7
 800be62:	601a      	str	r2, [r3, #0]
}
 800be64:	bf00      	nop
 800be66:	46bd      	mov	sp, r7
 800be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6c:	4770      	bx	lr
 800be6e:	bf00      	nop
 800be70:	e000e010 	.word	0xe000e010
 800be74:	e000e018 	.word	0xe000e018
 800be78:	200000ac 	.word	0x200000ac
 800be7c:	10624dd3 	.word	0x10624dd3
 800be80:	e000e014 	.word	0xe000e014

0800be84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800be84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800be94 <vPortEnableVFP+0x10>
 800be88:	6801      	ldr	r1, [r0, #0]
 800be8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800be8e:	6001      	str	r1, [r0, #0]
 800be90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800be92:	bf00      	nop
 800be94:	e000ed88 	.word	0xe000ed88

0800be98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800be98:	b480      	push	{r7}
 800be9a:	b085      	sub	sp, #20
 800be9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800be9e:	f3ef 8305 	mrs	r3, IPSR
 800bea2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2b0f      	cmp	r3, #15
 800bea8:	d914      	bls.n	800bed4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800beaa:	4a17      	ldr	r2, [pc, #92]	; (800bf08 <vPortValidateInterruptPriority+0x70>)
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	4413      	add	r3, r2
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800beb4:	4b15      	ldr	r3, [pc, #84]	; (800bf0c <vPortValidateInterruptPriority+0x74>)
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	7afa      	ldrb	r2, [r7, #11]
 800beba:	429a      	cmp	r2, r3
 800bebc:	d20a      	bcs.n	800bed4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec2:	f383 8811 	msr	BASEPRI, r3
 800bec6:	f3bf 8f6f 	isb	sy
 800beca:	f3bf 8f4f 	dsb	sy
 800bece:	607b      	str	r3, [r7, #4]
}
 800bed0:	bf00      	nop
 800bed2:	e7fe      	b.n	800bed2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bed4:	4b0e      	ldr	r3, [pc, #56]	; (800bf10 <vPortValidateInterruptPriority+0x78>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bedc:	4b0d      	ldr	r3, [pc, #52]	; (800bf14 <vPortValidateInterruptPriority+0x7c>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d90a      	bls.n	800befa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee8:	f383 8811 	msr	BASEPRI, r3
 800beec:	f3bf 8f6f 	isb	sy
 800bef0:	f3bf 8f4f 	dsb	sy
 800bef4:	603b      	str	r3, [r7, #0]
}
 800bef6:	bf00      	nop
 800bef8:	e7fe      	b.n	800bef8 <vPortValidateInterruptPriority+0x60>
	}
 800befa:	bf00      	nop
 800befc:	3714      	adds	r7, #20
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop
 800bf08:	e000e3f0 	.word	0xe000e3f0
 800bf0c:	20001a84 	.word	0x20001a84
 800bf10:	e000ed0c 	.word	0xe000ed0c
 800bf14:	20001a88 	.word	0x20001a88

0800bf18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b08a      	sub	sp, #40	; 0x28
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bf20:	2300      	movs	r3, #0
 800bf22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bf24:	f7fe fd8c 	bl	800aa40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bf28:	4b5b      	ldr	r3, [pc, #364]	; (800c098 <pvPortMalloc+0x180>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d101      	bne.n	800bf34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bf30:	f000 f920 	bl	800c174 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bf34:	4b59      	ldr	r3, [pc, #356]	; (800c09c <pvPortMalloc+0x184>)
 800bf36:	681a      	ldr	r2, [r3, #0]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	4013      	ands	r3, r2
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	f040 8093 	bne.w	800c068 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d01d      	beq.n	800bf84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bf48:	2208      	movs	r2, #8
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f003 0307 	and.w	r3, r3, #7
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d014      	beq.n	800bf84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f023 0307 	bic.w	r3, r3, #7
 800bf60:	3308      	adds	r3, #8
 800bf62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f003 0307 	and.w	r3, r3, #7
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d00a      	beq.n	800bf84 <pvPortMalloc+0x6c>
	__asm volatile
 800bf6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf72:	f383 8811 	msr	BASEPRI, r3
 800bf76:	f3bf 8f6f 	isb	sy
 800bf7a:	f3bf 8f4f 	dsb	sy
 800bf7e:	617b      	str	r3, [r7, #20]
}
 800bf80:	bf00      	nop
 800bf82:	e7fe      	b.n	800bf82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d06e      	beq.n	800c068 <pvPortMalloc+0x150>
 800bf8a:	4b45      	ldr	r3, [pc, #276]	; (800c0a0 <pvPortMalloc+0x188>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	687a      	ldr	r2, [r7, #4]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d869      	bhi.n	800c068 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bf94:	4b43      	ldr	r3, [pc, #268]	; (800c0a4 <pvPortMalloc+0x18c>)
 800bf96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bf98:	4b42      	ldr	r3, [pc, #264]	; (800c0a4 <pvPortMalloc+0x18c>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf9e:	e004      	b.n	800bfaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	687a      	ldr	r2, [r7, #4]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d903      	bls.n	800bfbc <pvPortMalloc+0xa4>
 800bfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d1f1      	bne.n	800bfa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bfbc:	4b36      	ldr	r3, [pc, #216]	; (800c098 <pvPortMalloc+0x180>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d050      	beq.n	800c068 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bfc6:	6a3b      	ldr	r3, [r7, #32]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2208      	movs	r2, #8
 800bfcc:	4413      	add	r3, r2
 800bfce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	6a3b      	ldr	r3, [r7, #32]
 800bfd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfda:	685a      	ldr	r2, [r3, #4]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	1ad2      	subs	r2, r2, r3
 800bfe0:	2308      	movs	r3, #8
 800bfe2:	005b      	lsls	r3, r3, #1
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d91f      	bls.n	800c028 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bfe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4413      	add	r3, r2
 800bfee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bff0:	69bb      	ldr	r3, [r7, #24]
 800bff2:	f003 0307 	and.w	r3, r3, #7
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d00a      	beq.n	800c010 <pvPortMalloc+0xf8>
	__asm volatile
 800bffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bffe:	f383 8811 	msr	BASEPRI, r3
 800c002:	f3bf 8f6f 	isb	sy
 800c006:	f3bf 8f4f 	dsb	sy
 800c00a:	613b      	str	r3, [r7, #16]
}
 800c00c:	bf00      	nop
 800c00e:	e7fe      	b.n	800c00e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c012:	685a      	ldr	r2, [r3, #4]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	1ad2      	subs	r2, r2, r3
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c022:	69b8      	ldr	r0, [r7, #24]
 800c024:	f000 f908 	bl	800c238 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c028:	4b1d      	ldr	r3, [pc, #116]	; (800c0a0 <pvPortMalloc+0x188>)
 800c02a:	681a      	ldr	r2, [r3, #0]
 800c02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	1ad3      	subs	r3, r2, r3
 800c032:	4a1b      	ldr	r2, [pc, #108]	; (800c0a0 <pvPortMalloc+0x188>)
 800c034:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c036:	4b1a      	ldr	r3, [pc, #104]	; (800c0a0 <pvPortMalloc+0x188>)
 800c038:	681a      	ldr	r2, [r3, #0]
 800c03a:	4b1b      	ldr	r3, [pc, #108]	; (800c0a8 <pvPortMalloc+0x190>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	429a      	cmp	r2, r3
 800c040:	d203      	bcs.n	800c04a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c042:	4b17      	ldr	r3, [pc, #92]	; (800c0a0 <pvPortMalloc+0x188>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4a18      	ldr	r2, [pc, #96]	; (800c0a8 <pvPortMalloc+0x190>)
 800c048:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04c:	685a      	ldr	r2, [r3, #4]
 800c04e:	4b13      	ldr	r3, [pc, #76]	; (800c09c <pvPortMalloc+0x184>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	431a      	orrs	r2, r3
 800c054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c056:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05a:	2200      	movs	r2, #0
 800c05c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c05e:	4b13      	ldr	r3, [pc, #76]	; (800c0ac <pvPortMalloc+0x194>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	3301      	adds	r3, #1
 800c064:	4a11      	ldr	r2, [pc, #68]	; (800c0ac <pvPortMalloc+0x194>)
 800c066:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c068:	f7fe fcf8 	bl	800aa5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c06c:	69fb      	ldr	r3, [r7, #28]
 800c06e:	f003 0307 	and.w	r3, r3, #7
 800c072:	2b00      	cmp	r3, #0
 800c074:	d00a      	beq.n	800c08c <pvPortMalloc+0x174>
	__asm volatile
 800c076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07a:	f383 8811 	msr	BASEPRI, r3
 800c07e:	f3bf 8f6f 	isb	sy
 800c082:	f3bf 8f4f 	dsb	sy
 800c086:	60fb      	str	r3, [r7, #12]
}
 800c088:	bf00      	nop
 800c08a:	e7fe      	b.n	800c08a <pvPortMalloc+0x172>
	return pvReturn;
 800c08c:	69fb      	ldr	r3, [r7, #28]
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3728      	adds	r7, #40	; 0x28
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	20005694 	.word	0x20005694
 800c09c:	200056a8 	.word	0x200056a8
 800c0a0:	20005698 	.word	0x20005698
 800c0a4:	2000568c 	.word	0x2000568c
 800c0a8:	2000569c 	.word	0x2000569c
 800c0ac:	200056a0 	.word	0x200056a0

0800c0b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b086      	sub	sp, #24
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d04d      	beq.n	800c15e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c0c2:	2308      	movs	r3, #8
 800c0c4:	425b      	negs	r3, r3
 800c0c6:	697a      	ldr	r2, [r7, #20]
 800c0c8:	4413      	add	r3, r2
 800c0ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	685a      	ldr	r2, [r3, #4]
 800c0d4:	4b24      	ldr	r3, [pc, #144]	; (800c168 <vPortFree+0xb8>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	4013      	ands	r3, r2
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d10a      	bne.n	800c0f4 <vPortFree+0x44>
	__asm volatile
 800c0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e2:	f383 8811 	msr	BASEPRI, r3
 800c0e6:	f3bf 8f6f 	isb	sy
 800c0ea:	f3bf 8f4f 	dsb	sy
 800c0ee:	60fb      	str	r3, [r7, #12]
}
 800c0f0:	bf00      	nop
 800c0f2:	e7fe      	b.n	800c0f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d00a      	beq.n	800c112 <vPortFree+0x62>
	__asm volatile
 800c0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c100:	f383 8811 	msr	BASEPRI, r3
 800c104:	f3bf 8f6f 	isb	sy
 800c108:	f3bf 8f4f 	dsb	sy
 800c10c:	60bb      	str	r3, [r7, #8]
}
 800c10e:	bf00      	nop
 800c110:	e7fe      	b.n	800c110 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	685a      	ldr	r2, [r3, #4]
 800c116:	4b14      	ldr	r3, [pc, #80]	; (800c168 <vPortFree+0xb8>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4013      	ands	r3, r2
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d01e      	beq.n	800c15e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d11a      	bne.n	800c15e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	685a      	ldr	r2, [r3, #4]
 800c12c:	4b0e      	ldr	r3, [pc, #56]	; (800c168 <vPortFree+0xb8>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	43db      	mvns	r3, r3
 800c132:	401a      	ands	r2, r3
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c138:	f7fe fc82 	bl	800aa40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	685a      	ldr	r2, [r3, #4]
 800c140:	4b0a      	ldr	r3, [pc, #40]	; (800c16c <vPortFree+0xbc>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4413      	add	r3, r2
 800c146:	4a09      	ldr	r2, [pc, #36]	; (800c16c <vPortFree+0xbc>)
 800c148:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c14a:	6938      	ldr	r0, [r7, #16]
 800c14c:	f000 f874 	bl	800c238 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c150:	4b07      	ldr	r3, [pc, #28]	; (800c170 <vPortFree+0xc0>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	3301      	adds	r3, #1
 800c156:	4a06      	ldr	r2, [pc, #24]	; (800c170 <vPortFree+0xc0>)
 800c158:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c15a:	f7fe fc7f 	bl	800aa5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c15e:	bf00      	nop
 800c160:	3718      	adds	r7, #24
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	200056a8 	.word	0x200056a8
 800c16c:	20005698 	.word	0x20005698
 800c170:	200056a4 	.word	0x200056a4

0800c174 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c174:	b480      	push	{r7}
 800c176:	b085      	sub	sp, #20
 800c178:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c17a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c17e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c180:	4b27      	ldr	r3, [pc, #156]	; (800c220 <prvHeapInit+0xac>)
 800c182:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f003 0307 	and.w	r3, r3, #7
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d00c      	beq.n	800c1a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	3307      	adds	r3, #7
 800c192:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f023 0307 	bic.w	r3, r3, #7
 800c19a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c19c:	68ba      	ldr	r2, [r7, #8]
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	1ad3      	subs	r3, r2, r3
 800c1a2:	4a1f      	ldr	r2, [pc, #124]	; (800c220 <prvHeapInit+0xac>)
 800c1a4:	4413      	add	r3, r2
 800c1a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c1ac:	4a1d      	ldr	r2, [pc, #116]	; (800c224 <prvHeapInit+0xb0>)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c1b2:	4b1c      	ldr	r3, [pc, #112]	; (800c224 <prvHeapInit+0xb0>)
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	68ba      	ldr	r2, [r7, #8]
 800c1bc:	4413      	add	r3, r2
 800c1be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c1c0:	2208      	movs	r2, #8
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	1a9b      	subs	r3, r3, r2
 800c1c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f023 0307 	bic.w	r3, r3, #7
 800c1ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	4a15      	ldr	r2, [pc, #84]	; (800c228 <prvHeapInit+0xb4>)
 800c1d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c1d6:	4b14      	ldr	r3, [pc, #80]	; (800c228 <prvHeapInit+0xb4>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c1de:	4b12      	ldr	r3, [pc, #72]	; (800c228 <prvHeapInit+0xb4>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	68fa      	ldr	r2, [r7, #12]
 800c1ee:	1ad2      	subs	r2, r2, r3
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c1f4:	4b0c      	ldr	r3, [pc, #48]	; (800c228 <prvHeapInit+0xb4>)
 800c1f6:	681a      	ldr	r2, [r3, #0]
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	4a0a      	ldr	r2, [pc, #40]	; (800c22c <prvHeapInit+0xb8>)
 800c202:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	4a09      	ldr	r2, [pc, #36]	; (800c230 <prvHeapInit+0xbc>)
 800c20a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c20c:	4b09      	ldr	r3, [pc, #36]	; (800c234 <prvHeapInit+0xc0>)
 800c20e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c212:	601a      	str	r2, [r3, #0]
}
 800c214:	bf00      	nop
 800c216:	3714      	adds	r7, #20
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr
 800c220:	20001a8c 	.word	0x20001a8c
 800c224:	2000568c 	.word	0x2000568c
 800c228:	20005694 	.word	0x20005694
 800c22c:	2000569c 	.word	0x2000569c
 800c230:	20005698 	.word	0x20005698
 800c234:	200056a8 	.word	0x200056a8

0800c238 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c238:	b480      	push	{r7}
 800c23a:	b085      	sub	sp, #20
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c240:	4b28      	ldr	r3, [pc, #160]	; (800c2e4 <prvInsertBlockIntoFreeList+0xac>)
 800c242:	60fb      	str	r3, [r7, #12]
 800c244:	e002      	b.n	800c24c <prvInsertBlockIntoFreeList+0x14>
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	60fb      	str	r3, [r7, #12]
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	687a      	ldr	r2, [r7, #4]
 800c252:	429a      	cmp	r2, r3
 800c254:	d8f7      	bhi.n	800c246 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	68ba      	ldr	r2, [r7, #8]
 800c260:	4413      	add	r3, r2
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	429a      	cmp	r2, r3
 800c266:	d108      	bne.n	800c27a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	685a      	ldr	r2, [r3, #4]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	441a      	add	r2, r3
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	68ba      	ldr	r2, [r7, #8]
 800c284:	441a      	add	r2, r3
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d118      	bne.n	800c2c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	4b15      	ldr	r3, [pc, #84]	; (800c2e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	429a      	cmp	r2, r3
 800c298:	d00d      	beq.n	800c2b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	685a      	ldr	r2, [r3, #4]
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	441a      	add	r2, r3
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	601a      	str	r2, [r3, #0]
 800c2b4:	e008      	b.n	800c2c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c2b6:	4b0c      	ldr	r3, [pc, #48]	; (800c2e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	601a      	str	r2, [r3, #0]
 800c2be:	e003      	b.n	800c2c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c2c8:	68fa      	ldr	r2, [r7, #12]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d002      	beq.n	800c2d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c2d6:	bf00      	nop
 800c2d8:	3714      	adds	r7, #20
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr
 800c2e2:	bf00      	nop
 800c2e4:	2000568c 	.word	0x2000568c
 800c2e8:	20005694 	.word	0x20005694

0800c2ec <__errno>:
 800c2ec:	4b01      	ldr	r3, [pc, #4]	; (800c2f4 <__errno+0x8>)
 800c2ee:	6818      	ldr	r0, [r3, #0]
 800c2f0:	4770      	bx	lr
 800c2f2:	bf00      	nop
 800c2f4:	200000bc 	.word	0x200000bc

0800c2f8 <std>:
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	b510      	push	{r4, lr}
 800c2fc:	4604      	mov	r4, r0
 800c2fe:	e9c0 3300 	strd	r3, r3, [r0]
 800c302:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c306:	6083      	str	r3, [r0, #8]
 800c308:	8181      	strh	r1, [r0, #12]
 800c30a:	6643      	str	r3, [r0, #100]	; 0x64
 800c30c:	81c2      	strh	r2, [r0, #14]
 800c30e:	6183      	str	r3, [r0, #24]
 800c310:	4619      	mov	r1, r3
 800c312:	2208      	movs	r2, #8
 800c314:	305c      	adds	r0, #92	; 0x5c
 800c316:	f000 f91a 	bl	800c54e <memset>
 800c31a:	4b05      	ldr	r3, [pc, #20]	; (800c330 <std+0x38>)
 800c31c:	6263      	str	r3, [r4, #36]	; 0x24
 800c31e:	4b05      	ldr	r3, [pc, #20]	; (800c334 <std+0x3c>)
 800c320:	62a3      	str	r3, [r4, #40]	; 0x28
 800c322:	4b05      	ldr	r3, [pc, #20]	; (800c338 <std+0x40>)
 800c324:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c326:	4b05      	ldr	r3, [pc, #20]	; (800c33c <std+0x44>)
 800c328:	6224      	str	r4, [r4, #32]
 800c32a:	6323      	str	r3, [r4, #48]	; 0x30
 800c32c:	bd10      	pop	{r4, pc}
 800c32e:	bf00      	nop
 800c330:	0800c869 	.word	0x0800c869
 800c334:	0800c88b 	.word	0x0800c88b
 800c338:	0800c8c3 	.word	0x0800c8c3
 800c33c:	0800c8e7 	.word	0x0800c8e7

0800c340 <_cleanup_r>:
 800c340:	4901      	ldr	r1, [pc, #4]	; (800c348 <_cleanup_r+0x8>)
 800c342:	f000 b8af 	b.w	800c4a4 <_fwalk_reent>
 800c346:	bf00      	nop
 800c348:	0800cbc1 	.word	0x0800cbc1

0800c34c <__sfmoreglue>:
 800c34c:	b570      	push	{r4, r5, r6, lr}
 800c34e:	2268      	movs	r2, #104	; 0x68
 800c350:	1e4d      	subs	r5, r1, #1
 800c352:	4355      	muls	r5, r2
 800c354:	460e      	mov	r6, r1
 800c356:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c35a:	f000 f921 	bl	800c5a0 <_malloc_r>
 800c35e:	4604      	mov	r4, r0
 800c360:	b140      	cbz	r0, 800c374 <__sfmoreglue+0x28>
 800c362:	2100      	movs	r1, #0
 800c364:	e9c0 1600 	strd	r1, r6, [r0]
 800c368:	300c      	adds	r0, #12
 800c36a:	60a0      	str	r0, [r4, #8]
 800c36c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c370:	f000 f8ed 	bl	800c54e <memset>
 800c374:	4620      	mov	r0, r4
 800c376:	bd70      	pop	{r4, r5, r6, pc}

0800c378 <__sfp_lock_acquire>:
 800c378:	4801      	ldr	r0, [pc, #4]	; (800c380 <__sfp_lock_acquire+0x8>)
 800c37a:	f000 b8d8 	b.w	800c52e <__retarget_lock_acquire_recursive>
 800c37e:	bf00      	nop
 800c380:	200056ad 	.word	0x200056ad

0800c384 <__sfp_lock_release>:
 800c384:	4801      	ldr	r0, [pc, #4]	; (800c38c <__sfp_lock_release+0x8>)
 800c386:	f000 b8d3 	b.w	800c530 <__retarget_lock_release_recursive>
 800c38a:	bf00      	nop
 800c38c:	200056ad 	.word	0x200056ad

0800c390 <__sinit_lock_acquire>:
 800c390:	4801      	ldr	r0, [pc, #4]	; (800c398 <__sinit_lock_acquire+0x8>)
 800c392:	f000 b8cc 	b.w	800c52e <__retarget_lock_acquire_recursive>
 800c396:	bf00      	nop
 800c398:	200056ae 	.word	0x200056ae

0800c39c <__sinit_lock_release>:
 800c39c:	4801      	ldr	r0, [pc, #4]	; (800c3a4 <__sinit_lock_release+0x8>)
 800c39e:	f000 b8c7 	b.w	800c530 <__retarget_lock_release_recursive>
 800c3a2:	bf00      	nop
 800c3a4:	200056ae 	.word	0x200056ae

0800c3a8 <__sinit>:
 800c3a8:	b510      	push	{r4, lr}
 800c3aa:	4604      	mov	r4, r0
 800c3ac:	f7ff fff0 	bl	800c390 <__sinit_lock_acquire>
 800c3b0:	69a3      	ldr	r3, [r4, #24]
 800c3b2:	b11b      	cbz	r3, 800c3bc <__sinit+0x14>
 800c3b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3b8:	f7ff bff0 	b.w	800c39c <__sinit_lock_release>
 800c3bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c3c0:	6523      	str	r3, [r4, #80]	; 0x50
 800c3c2:	4b13      	ldr	r3, [pc, #76]	; (800c410 <__sinit+0x68>)
 800c3c4:	4a13      	ldr	r2, [pc, #76]	; (800c414 <__sinit+0x6c>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	62a2      	str	r2, [r4, #40]	; 0x28
 800c3ca:	42a3      	cmp	r3, r4
 800c3cc:	bf04      	itt	eq
 800c3ce:	2301      	moveq	r3, #1
 800c3d0:	61a3      	streq	r3, [r4, #24]
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	f000 f820 	bl	800c418 <__sfp>
 800c3d8:	6060      	str	r0, [r4, #4]
 800c3da:	4620      	mov	r0, r4
 800c3dc:	f000 f81c 	bl	800c418 <__sfp>
 800c3e0:	60a0      	str	r0, [r4, #8]
 800c3e2:	4620      	mov	r0, r4
 800c3e4:	f000 f818 	bl	800c418 <__sfp>
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	60e0      	str	r0, [r4, #12]
 800c3ec:	2104      	movs	r1, #4
 800c3ee:	6860      	ldr	r0, [r4, #4]
 800c3f0:	f7ff ff82 	bl	800c2f8 <std>
 800c3f4:	68a0      	ldr	r0, [r4, #8]
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	2109      	movs	r1, #9
 800c3fa:	f7ff ff7d 	bl	800c2f8 <std>
 800c3fe:	68e0      	ldr	r0, [r4, #12]
 800c400:	2202      	movs	r2, #2
 800c402:	2112      	movs	r1, #18
 800c404:	f7ff ff78 	bl	800c2f8 <std>
 800c408:	2301      	movs	r3, #1
 800c40a:	61a3      	str	r3, [r4, #24]
 800c40c:	e7d2      	b.n	800c3b4 <__sinit+0xc>
 800c40e:	bf00      	nop
 800c410:	0800d0e0 	.word	0x0800d0e0
 800c414:	0800c341 	.word	0x0800c341

0800c418 <__sfp>:
 800c418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c41a:	4607      	mov	r7, r0
 800c41c:	f7ff ffac 	bl	800c378 <__sfp_lock_acquire>
 800c420:	4b1e      	ldr	r3, [pc, #120]	; (800c49c <__sfp+0x84>)
 800c422:	681e      	ldr	r6, [r3, #0]
 800c424:	69b3      	ldr	r3, [r6, #24]
 800c426:	b913      	cbnz	r3, 800c42e <__sfp+0x16>
 800c428:	4630      	mov	r0, r6
 800c42a:	f7ff ffbd 	bl	800c3a8 <__sinit>
 800c42e:	3648      	adds	r6, #72	; 0x48
 800c430:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c434:	3b01      	subs	r3, #1
 800c436:	d503      	bpl.n	800c440 <__sfp+0x28>
 800c438:	6833      	ldr	r3, [r6, #0]
 800c43a:	b30b      	cbz	r3, 800c480 <__sfp+0x68>
 800c43c:	6836      	ldr	r6, [r6, #0]
 800c43e:	e7f7      	b.n	800c430 <__sfp+0x18>
 800c440:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c444:	b9d5      	cbnz	r5, 800c47c <__sfp+0x64>
 800c446:	4b16      	ldr	r3, [pc, #88]	; (800c4a0 <__sfp+0x88>)
 800c448:	60e3      	str	r3, [r4, #12]
 800c44a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c44e:	6665      	str	r5, [r4, #100]	; 0x64
 800c450:	f000 f86c 	bl	800c52c <__retarget_lock_init_recursive>
 800c454:	f7ff ff96 	bl	800c384 <__sfp_lock_release>
 800c458:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c45c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c460:	6025      	str	r5, [r4, #0]
 800c462:	61a5      	str	r5, [r4, #24]
 800c464:	2208      	movs	r2, #8
 800c466:	4629      	mov	r1, r5
 800c468:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c46c:	f000 f86f 	bl	800c54e <memset>
 800c470:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c474:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c478:	4620      	mov	r0, r4
 800c47a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c47c:	3468      	adds	r4, #104	; 0x68
 800c47e:	e7d9      	b.n	800c434 <__sfp+0x1c>
 800c480:	2104      	movs	r1, #4
 800c482:	4638      	mov	r0, r7
 800c484:	f7ff ff62 	bl	800c34c <__sfmoreglue>
 800c488:	4604      	mov	r4, r0
 800c48a:	6030      	str	r0, [r6, #0]
 800c48c:	2800      	cmp	r0, #0
 800c48e:	d1d5      	bne.n	800c43c <__sfp+0x24>
 800c490:	f7ff ff78 	bl	800c384 <__sfp_lock_release>
 800c494:	230c      	movs	r3, #12
 800c496:	603b      	str	r3, [r7, #0]
 800c498:	e7ee      	b.n	800c478 <__sfp+0x60>
 800c49a:	bf00      	nop
 800c49c:	0800d0e0 	.word	0x0800d0e0
 800c4a0:	ffff0001 	.word	0xffff0001

0800c4a4 <_fwalk_reent>:
 800c4a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4a8:	4606      	mov	r6, r0
 800c4aa:	4688      	mov	r8, r1
 800c4ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c4b0:	2700      	movs	r7, #0
 800c4b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c4b6:	f1b9 0901 	subs.w	r9, r9, #1
 800c4ba:	d505      	bpl.n	800c4c8 <_fwalk_reent+0x24>
 800c4bc:	6824      	ldr	r4, [r4, #0]
 800c4be:	2c00      	cmp	r4, #0
 800c4c0:	d1f7      	bne.n	800c4b2 <_fwalk_reent+0xe>
 800c4c2:	4638      	mov	r0, r7
 800c4c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4c8:	89ab      	ldrh	r3, [r5, #12]
 800c4ca:	2b01      	cmp	r3, #1
 800c4cc:	d907      	bls.n	800c4de <_fwalk_reent+0x3a>
 800c4ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	d003      	beq.n	800c4de <_fwalk_reent+0x3a>
 800c4d6:	4629      	mov	r1, r5
 800c4d8:	4630      	mov	r0, r6
 800c4da:	47c0      	blx	r8
 800c4dc:	4307      	orrs	r7, r0
 800c4de:	3568      	adds	r5, #104	; 0x68
 800c4e0:	e7e9      	b.n	800c4b6 <_fwalk_reent+0x12>
	...

0800c4e4 <__libc_init_array>:
 800c4e4:	b570      	push	{r4, r5, r6, lr}
 800c4e6:	4d0d      	ldr	r5, [pc, #52]	; (800c51c <__libc_init_array+0x38>)
 800c4e8:	4c0d      	ldr	r4, [pc, #52]	; (800c520 <__libc_init_array+0x3c>)
 800c4ea:	1b64      	subs	r4, r4, r5
 800c4ec:	10a4      	asrs	r4, r4, #2
 800c4ee:	2600      	movs	r6, #0
 800c4f0:	42a6      	cmp	r6, r4
 800c4f2:	d109      	bne.n	800c508 <__libc_init_array+0x24>
 800c4f4:	4d0b      	ldr	r5, [pc, #44]	; (800c524 <__libc_init_array+0x40>)
 800c4f6:	4c0c      	ldr	r4, [pc, #48]	; (800c528 <__libc_init_array+0x44>)
 800c4f8:	f000 fca2 	bl	800ce40 <_init>
 800c4fc:	1b64      	subs	r4, r4, r5
 800c4fe:	10a4      	asrs	r4, r4, #2
 800c500:	2600      	movs	r6, #0
 800c502:	42a6      	cmp	r6, r4
 800c504:	d105      	bne.n	800c512 <__libc_init_array+0x2e>
 800c506:	bd70      	pop	{r4, r5, r6, pc}
 800c508:	f855 3b04 	ldr.w	r3, [r5], #4
 800c50c:	4798      	blx	r3
 800c50e:	3601      	adds	r6, #1
 800c510:	e7ee      	b.n	800c4f0 <__libc_init_array+0xc>
 800c512:	f855 3b04 	ldr.w	r3, [r5], #4
 800c516:	4798      	blx	r3
 800c518:	3601      	adds	r6, #1
 800c51a:	e7f2      	b.n	800c502 <__libc_init_array+0x1e>
 800c51c:	0800d0ec 	.word	0x0800d0ec
 800c520:	0800d0ec 	.word	0x0800d0ec
 800c524:	0800d0ec 	.word	0x0800d0ec
 800c528:	0800d0f0 	.word	0x0800d0f0

0800c52c <__retarget_lock_init_recursive>:
 800c52c:	4770      	bx	lr

0800c52e <__retarget_lock_acquire_recursive>:
 800c52e:	4770      	bx	lr

0800c530 <__retarget_lock_release_recursive>:
 800c530:	4770      	bx	lr

0800c532 <memcpy>:
 800c532:	440a      	add	r2, r1
 800c534:	4291      	cmp	r1, r2
 800c536:	f100 33ff 	add.w	r3, r0, #4294967295
 800c53a:	d100      	bne.n	800c53e <memcpy+0xc>
 800c53c:	4770      	bx	lr
 800c53e:	b510      	push	{r4, lr}
 800c540:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c544:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c548:	4291      	cmp	r1, r2
 800c54a:	d1f9      	bne.n	800c540 <memcpy+0xe>
 800c54c:	bd10      	pop	{r4, pc}

0800c54e <memset>:
 800c54e:	4402      	add	r2, r0
 800c550:	4603      	mov	r3, r0
 800c552:	4293      	cmp	r3, r2
 800c554:	d100      	bne.n	800c558 <memset+0xa>
 800c556:	4770      	bx	lr
 800c558:	f803 1b01 	strb.w	r1, [r3], #1
 800c55c:	e7f9      	b.n	800c552 <memset+0x4>
	...

0800c560 <sbrk_aligned>:
 800c560:	b570      	push	{r4, r5, r6, lr}
 800c562:	4e0e      	ldr	r6, [pc, #56]	; (800c59c <sbrk_aligned+0x3c>)
 800c564:	460c      	mov	r4, r1
 800c566:	6831      	ldr	r1, [r6, #0]
 800c568:	4605      	mov	r5, r0
 800c56a:	b911      	cbnz	r1, 800c572 <sbrk_aligned+0x12>
 800c56c:	f000 f96c 	bl	800c848 <_sbrk_r>
 800c570:	6030      	str	r0, [r6, #0]
 800c572:	4621      	mov	r1, r4
 800c574:	4628      	mov	r0, r5
 800c576:	f000 f967 	bl	800c848 <_sbrk_r>
 800c57a:	1c43      	adds	r3, r0, #1
 800c57c:	d00a      	beq.n	800c594 <sbrk_aligned+0x34>
 800c57e:	1cc4      	adds	r4, r0, #3
 800c580:	f024 0403 	bic.w	r4, r4, #3
 800c584:	42a0      	cmp	r0, r4
 800c586:	d007      	beq.n	800c598 <sbrk_aligned+0x38>
 800c588:	1a21      	subs	r1, r4, r0
 800c58a:	4628      	mov	r0, r5
 800c58c:	f000 f95c 	bl	800c848 <_sbrk_r>
 800c590:	3001      	adds	r0, #1
 800c592:	d101      	bne.n	800c598 <sbrk_aligned+0x38>
 800c594:	f04f 34ff 	mov.w	r4, #4294967295
 800c598:	4620      	mov	r0, r4
 800c59a:	bd70      	pop	{r4, r5, r6, pc}
 800c59c:	200056b4 	.word	0x200056b4

0800c5a0 <_malloc_r>:
 800c5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5a4:	1ccd      	adds	r5, r1, #3
 800c5a6:	f025 0503 	bic.w	r5, r5, #3
 800c5aa:	3508      	adds	r5, #8
 800c5ac:	2d0c      	cmp	r5, #12
 800c5ae:	bf38      	it	cc
 800c5b0:	250c      	movcc	r5, #12
 800c5b2:	2d00      	cmp	r5, #0
 800c5b4:	4607      	mov	r7, r0
 800c5b6:	db01      	blt.n	800c5bc <_malloc_r+0x1c>
 800c5b8:	42a9      	cmp	r1, r5
 800c5ba:	d905      	bls.n	800c5c8 <_malloc_r+0x28>
 800c5bc:	230c      	movs	r3, #12
 800c5be:	603b      	str	r3, [r7, #0]
 800c5c0:	2600      	movs	r6, #0
 800c5c2:	4630      	mov	r0, r6
 800c5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5c8:	4e2e      	ldr	r6, [pc, #184]	; (800c684 <_malloc_r+0xe4>)
 800c5ca:	f000 fbad 	bl	800cd28 <__malloc_lock>
 800c5ce:	6833      	ldr	r3, [r6, #0]
 800c5d0:	461c      	mov	r4, r3
 800c5d2:	bb34      	cbnz	r4, 800c622 <_malloc_r+0x82>
 800c5d4:	4629      	mov	r1, r5
 800c5d6:	4638      	mov	r0, r7
 800c5d8:	f7ff ffc2 	bl	800c560 <sbrk_aligned>
 800c5dc:	1c43      	adds	r3, r0, #1
 800c5de:	4604      	mov	r4, r0
 800c5e0:	d14d      	bne.n	800c67e <_malloc_r+0xde>
 800c5e2:	6834      	ldr	r4, [r6, #0]
 800c5e4:	4626      	mov	r6, r4
 800c5e6:	2e00      	cmp	r6, #0
 800c5e8:	d140      	bne.n	800c66c <_malloc_r+0xcc>
 800c5ea:	6823      	ldr	r3, [r4, #0]
 800c5ec:	4631      	mov	r1, r6
 800c5ee:	4638      	mov	r0, r7
 800c5f0:	eb04 0803 	add.w	r8, r4, r3
 800c5f4:	f000 f928 	bl	800c848 <_sbrk_r>
 800c5f8:	4580      	cmp	r8, r0
 800c5fa:	d13a      	bne.n	800c672 <_malloc_r+0xd2>
 800c5fc:	6821      	ldr	r1, [r4, #0]
 800c5fe:	3503      	adds	r5, #3
 800c600:	1a6d      	subs	r5, r5, r1
 800c602:	f025 0503 	bic.w	r5, r5, #3
 800c606:	3508      	adds	r5, #8
 800c608:	2d0c      	cmp	r5, #12
 800c60a:	bf38      	it	cc
 800c60c:	250c      	movcc	r5, #12
 800c60e:	4629      	mov	r1, r5
 800c610:	4638      	mov	r0, r7
 800c612:	f7ff ffa5 	bl	800c560 <sbrk_aligned>
 800c616:	3001      	adds	r0, #1
 800c618:	d02b      	beq.n	800c672 <_malloc_r+0xd2>
 800c61a:	6823      	ldr	r3, [r4, #0]
 800c61c:	442b      	add	r3, r5
 800c61e:	6023      	str	r3, [r4, #0]
 800c620:	e00e      	b.n	800c640 <_malloc_r+0xa0>
 800c622:	6822      	ldr	r2, [r4, #0]
 800c624:	1b52      	subs	r2, r2, r5
 800c626:	d41e      	bmi.n	800c666 <_malloc_r+0xc6>
 800c628:	2a0b      	cmp	r2, #11
 800c62a:	d916      	bls.n	800c65a <_malloc_r+0xba>
 800c62c:	1961      	adds	r1, r4, r5
 800c62e:	42a3      	cmp	r3, r4
 800c630:	6025      	str	r5, [r4, #0]
 800c632:	bf18      	it	ne
 800c634:	6059      	strne	r1, [r3, #4]
 800c636:	6863      	ldr	r3, [r4, #4]
 800c638:	bf08      	it	eq
 800c63a:	6031      	streq	r1, [r6, #0]
 800c63c:	5162      	str	r2, [r4, r5]
 800c63e:	604b      	str	r3, [r1, #4]
 800c640:	4638      	mov	r0, r7
 800c642:	f104 060b 	add.w	r6, r4, #11
 800c646:	f000 fb75 	bl	800cd34 <__malloc_unlock>
 800c64a:	f026 0607 	bic.w	r6, r6, #7
 800c64e:	1d23      	adds	r3, r4, #4
 800c650:	1af2      	subs	r2, r6, r3
 800c652:	d0b6      	beq.n	800c5c2 <_malloc_r+0x22>
 800c654:	1b9b      	subs	r3, r3, r6
 800c656:	50a3      	str	r3, [r4, r2]
 800c658:	e7b3      	b.n	800c5c2 <_malloc_r+0x22>
 800c65a:	6862      	ldr	r2, [r4, #4]
 800c65c:	42a3      	cmp	r3, r4
 800c65e:	bf0c      	ite	eq
 800c660:	6032      	streq	r2, [r6, #0]
 800c662:	605a      	strne	r2, [r3, #4]
 800c664:	e7ec      	b.n	800c640 <_malloc_r+0xa0>
 800c666:	4623      	mov	r3, r4
 800c668:	6864      	ldr	r4, [r4, #4]
 800c66a:	e7b2      	b.n	800c5d2 <_malloc_r+0x32>
 800c66c:	4634      	mov	r4, r6
 800c66e:	6876      	ldr	r6, [r6, #4]
 800c670:	e7b9      	b.n	800c5e6 <_malloc_r+0x46>
 800c672:	230c      	movs	r3, #12
 800c674:	603b      	str	r3, [r7, #0]
 800c676:	4638      	mov	r0, r7
 800c678:	f000 fb5c 	bl	800cd34 <__malloc_unlock>
 800c67c:	e7a1      	b.n	800c5c2 <_malloc_r+0x22>
 800c67e:	6025      	str	r5, [r4, #0]
 800c680:	e7de      	b.n	800c640 <_malloc_r+0xa0>
 800c682:	bf00      	nop
 800c684:	200056b0 	.word	0x200056b0

0800c688 <_puts_r>:
 800c688:	b570      	push	{r4, r5, r6, lr}
 800c68a:	460e      	mov	r6, r1
 800c68c:	4605      	mov	r5, r0
 800c68e:	b118      	cbz	r0, 800c698 <_puts_r+0x10>
 800c690:	6983      	ldr	r3, [r0, #24]
 800c692:	b90b      	cbnz	r3, 800c698 <_puts_r+0x10>
 800c694:	f7ff fe88 	bl	800c3a8 <__sinit>
 800c698:	69ab      	ldr	r3, [r5, #24]
 800c69a:	68ac      	ldr	r4, [r5, #8]
 800c69c:	b913      	cbnz	r3, 800c6a4 <_puts_r+0x1c>
 800c69e:	4628      	mov	r0, r5
 800c6a0:	f7ff fe82 	bl	800c3a8 <__sinit>
 800c6a4:	4b2c      	ldr	r3, [pc, #176]	; (800c758 <_puts_r+0xd0>)
 800c6a6:	429c      	cmp	r4, r3
 800c6a8:	d120      	bne.n	800c6ec <_puts_r+0x64>
 800c6aa:	686c      	ldr	r4, [r5, #4]
 800c6ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c6ae:	07db      	lsls	r3, r3, #31
 800c6b0:	d405      	bmi.n	800c6be <_puts_r+0x36>
 800c6b2:	89a3      	ldrh	r3, [r4, #12]
 800c6b4:	0598      	lsls	r0, r3, #22
 800c6b6:	d402      	bmi.n	800c6be <_puts_r+0x36>
 800c6b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6ba:	f7ff ff38 	bl	800c52e <__retarget_lock_acquire_recursive>
 800c6be:	89a3      	ldrh	r3, [r4, #12]
 800c6c0:	0719      	lsls	r1, r3, #28
 800c6c2:	d51d      	bpl.n	800c700 <_puts_r+0x78>
 800c6c4:	6923      	ldr	r3, [r4, #16]
 800c6c6:	b1db      	cbz	r3, 800c700 <_puts_r+0x78>
 800c6c8:	3e01      	subs	r6, #1
 800c6ca:	68a3      	ldr	r3, [r4, #8]
 800c6cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c6d0:	3b01      	subs	r3, #1
 800c6d2:	60a3      	str	r3, [r4, #8]
 800c6d4:	bb39      	cbnz	r1, 800c726 <_puts_r+0x9e>
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	da38      	bge.n	800c74c <_puts_r+0xc4>
 800c6da:	4622      	mov	r2, r4
 800c6dc:	210a      	movs	r1, #10
 800c6de:	4628      	mov	r0, r5
 800c6e0:	f000 f906 	bl	800c8f0 <__swbuf_r>
 800c6e4:	3001      	adds	r0, #1
 800c6e6:	d011      	beq.n	800c70c <_puts_r+0x84>
 800c6e8:	250a      	movs	r5, #10
 800c6ea:	e011      	b.n	800c710 <_puts_r+0x88>
 800c6ec:	4b1b      	ldr	r3, [pc, #108]	; (800c75c <_puts_r+0xd4>)
 800c6ee:	429c      	cmp	r4, r3
 800c6f0:	d101      	bne.n	800c6f6 <_puts_r+0x6e>
 800c6f2:	68ac      	ldr	r4, [r5, #8]
 800c6f4:	e7da      	b.n	800c6ac <_puts_r+0x24>
 800c6f6:	4b1a      	ldr	r3, [pc, #104]	; (800c760 <_puts_r+0xd8>)
 800c6f8:	429c      	cmp	r4, r3
 800c6fa:	bf08      	it	eq
 800c6fc:	68ec      	ldreq	r4, [r5, #12]
 800c6fe:	e7d5      	b.n	800c6ac <_puts_r+0x24>
 800c700:	4621      	mov	r1, r4
 800c702:	4628      	mov	r0, r5
 800c704:	f000 f958 	bl	800c9b8 <__swsetup_r>
 800c708:	2800      	cmp	r0, #0
 800c70a:	d0dd      	beq.n	800c6c8 <_puts_r+0x40>
 800c70c:	f04f 35ff 	mov.w	r5, #4294967295
 800c710:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c712:	07da      	lsls	r2, r3, #31
 800c714:	d405      	bmi.n	800c722 <_puts_r+0x9a>
 800c716:	89a3      	ldrh	r3, [r4, #12]
 800c718:	059b      	lsls	r3, r3, #22
 800c71a:	d402      	bmi.n	800c722 <_puts_r+0x9a>
 800c71c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c71e:	f7ff ff07 	bl	800c530 <__retarget_lock_release_recursive>
 800c722:	4628      	mov	r0, r5
 800c724:	bd70      	pop	{r4, r5, r6, pc}
 800c726:	2b00      	cmp	r3, #0
 800c728:	da04      	bge.n	800c734 <_puts_r+0xac>
 800c72a:	69a2      	ldr	r2, [r4, #24]
 800c72c:	429a      	cmp	r2, r3
 800c72e:	dc06      	bgt.n	800c73e <_puts_r+0xb6>
 800c730:	290a      	cmp	r1, #10
 800c732:	d004      	beq.n	800c73e <_puts_r+0xb6>
 800c734:	6823      	ldr	r3, [r4, #0]
 800c736:	1c5a      	adds	r2, r3, #1
 800c738:	6022      	str	r2, [r4, #0]
 800c73a:	7019      	strb	r1, [r3, #0]
 800c73c:	e7c5      	b.n	800c6ca <_puts_r+0x42>
 800c73e:	4622      	mov	r2, r4
 800c740:	4628      	mov	r0, r5
 800c742:	f000 f8d5 	bl	800c8f0 <__swbuf_r>
 800c746:	3001      	adds	r0, #1
 800c748:	d1bf      	bne.n	800c6ca <_puts_r+0x42>
 800c74a:	e7df      	b.n	800c70c <_puts_r+0x84>
 800c74c:	6823      	ldr	r3, [r4, #0]
 800c74e:	250a      	movs	r5, #10
 800c750:	1c5a      	adds	r2, r3, #1
 800c752:	6022      	str	r2, [r4, #0]
 800c754:	701d      	strb	r5, [r3, #0]
 800c756:	e7db      	b.n	800c710 <_puts_r+0x88>
 800c758:	0800d0a0 	.word	0x0800d0a0
 800c75c:	0800d0c0 	.word	0x0800d0c0
 800c760:	0800d080 	.word	0x0800d080

0800c764 <puts>:
 800c764:	4b02      	ldr	r3, [pc, #8]	; (800c770 <puts+0xc>)
 800c766:	4601      	mov	r1, r0
 800c768:	6818      	ldr	r0, [r3, #0]
 800c76a:	f7ff bf8d 	b.w	800c688 <_puts_r>
 800c76e:	bf00      	nop
 800c770:	200000bc 	.word	0x200000bc

0800c774 <cleanup_glue>:
 800c774:	b538      	push	{r3, r4, r5, lr}
 800c776:	460c      	mov	r4, r1
 800c778:	6809      	ldr	r1, [r1, #0]
 800c77a:	4605      	mov	r5, r0
 800c77c:	b109      	cbz	r1, 800c782 <cleanup_glue+0xe>
 800c77e:	f7ff fff9 	bl	800c774 <cleanup_glue>
 800c782:	4621      	mov	r1, r4
 800c784:	4628      	mov	r0, r5
 800c786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c78a:	f000 bad9 	b.w	800cd40 <_free_r>
	...

0800c790 <_reclaim_reent>:
 800c790:	4b2c      	ldr	r3, [pc, #176]	; (800c844 <_reclaim_reent+0xb4>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4283      	cmp	r3, r0
 800c796:	b570      	push	{r4, r5, r6, lr}
 800c798:	4604      	mov	r4, r0
 800c79a:	d051      	beq.n	800c840 <_reclaim_reent+0xb0>
 800c79c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c79e:	b143      	cbz	r3, 800c7b2 <_reclaim_reent+0x22>
 800c7a0:	68db      	ldr	r3, [r3, #12]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d14a      	bne.n	800c83c <_reclaim_reent+0xac>
 800c7a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7a8:	6819      	ldr	r1, [r3, #0]
 800c7aa:	b111      	cbz	r1, 800c7b2 <_reclaim_reent+0x22>
 800c7ac:	4620      	mov	r0, r4
 800c7ae:	f000 fac7 	bl	800cd40 <_free_r>
 800c7b2:	6961      	ldr	r1, [r4, #20]
 800c7b4:	b111      	cbz	r1, 800c7bc <_reclaim_reent+0x2c>
 800c7b6:	4620      	mov	r0, r4
 800c7b8:	f000 fac2 	bl	800cd40 <_free_r>
 800c7bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c7be:	b111      	cbz	r1, 800c7c6 <_reclaim_reent+0x36>
 800c7c0:	4620      	mov	r0, r4
 800c7c2:	f000 fabd 	bl	800cd40 <_free_r>
 800c7c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c7c8:	b111      	cbz	r1, 800c7d0 <_reclaim_reent+0x40>
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	f000 fab8 	bl	800cd40 <_free_r>
 800c7d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c7d2:	b111      	cbz	r1, 800c7da <_reclaim_reent+0x4a>
 800c7d4:	4620      	mov	r0, r4
 800c7d6:	f000 fab3 	bl	800cd40 <_free_r>
 800c7da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c7dc:	b111      	cbz	r1, 800c7e4 <_reclaim_reent+0x54>
 800c7de:	4620      	mov	r0, r4
 800c7e0:	f000 faae 	bl	800cd40 <_free_r>
 800c7e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c7e6:	b111      	cbz	r1, 800c7ee <_reclaim_reent+0x5e>
 800c7e8:	4620      	mov	r0, r4
 800c7ea:	f000 faa9 	bl	800cd40 <_free_r>
 800c7ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c7f0:	b111      	cbz	r1, 800c7f8 <_reclaim_reent+0x68>
 800c7f2:	4620      	mov	r0, r4
 800c7f4:	f000 faa4 	bl	800cd40 <_free_r>
 800c7f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7fa:	b111      	cbz	r1, 800c802 <_reclaim_reent+0x72>
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	f000 fa9f 	bl	800cd40 <_free_r>
 800c802:	69a3      	ldr	r3, [r4, #24]
 800c804:	b1e3      	cbz	r3, 800c840 <_reclaim_reent+0xb0>
 800c806:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c808:	4620      	mov	r0, r4
 800c80a:	4798      	blx	r3
 800c80c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c80e:	b1b9      	cbz	r1, 800c840 <_reclaim_reent+0xb0>
 800c810:	4620      	mov	r0, r4
 800c812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c816:	f7ff bfad 	b.w	800c774 <cleanup_glue>
 800c81a:	5949      	ldr	r1, [r1, r5]
 800c81c:	b941      	cbnz	r1, 800c830 <_reclaim_reent+0xa0>
 800c81e:	3504      	adds	r5, #4
 800c820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c822:	2d80      	cmp	r5, #128	; 0x80
 800c824:	68d9      	ldr	r1, [r3, #12]
 800c826:	d1f8      	bne.n	800c81a <_reclaim_reent+0x8a>
 800c828:	4620      	mov	r0, r4
 800c82a:	f000 fa89 	bl	800cd40 <_free_r>
 800c82e:	e7ba      	b.n	800c7a6 <_reclaim_reent+0x16>
 800c830:	680e      	ldr	r6, [r1, #0]
 800c832:	4620      	mov	r0, r4
 800c834:	f000 fa84 	bl	800cd40 <_free_r>
 800c838:	4631      	mov	r1, r6
 800c83a:	e7ef      	b.n	800c81c <_reclaim_reent+0x8c>
 800c83c:	2500      	movs	r5, #0
 800c83e:	e7ef      	b.n	800c820 <_reclaim_reent+0x90>
 800c840:	bd70      	pop	{r4, r5, r6, pc}
 800c842:	bf00      	nop
 800c844:	200000bc 	.word	0x200000bc

0800c848 <_sbrk_r>:
 800c848:	b538      	push	{r3, r4, r5, lr}
 800c84a:	4d06      	ldr	r5, [pc, #24]	; (800c864 <_sbrk_r+0x1c>)
 800c84c:	2300      	movs	r3, #0
 800c84e:	4604      	mov	r4, r0
 800c850:	4608      	mov	r0, r1
 800c852:	602b      	str	r3, [r5, #0]
 800c854:	f7f6 fbfe 	bl	8003054 <_sbrk>
 800c858:	1c43      	adds	r3, r0, #1
 800c85a:	d102      	bne.n	800c862 <_sbrk_r+0x1a>
 800c85c:	682b      	ldr	r3, [r5, #0]
 800c85e:	b103      	cbz	r3, 800c862 <_sbrk_r+0x1a>
 800c860:	6023      	str	r3, [r4, #0]
 800c862:	bd38      	pop	{r3, r4, r5, pc}
 800c864:	200056b8 	.word	0x200056b8

0800c868 <__sread>:
 800c868:	b510      	push	{r4, lr}
 800c86a:	460c      	mov	r4, r1
 800c86c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c870:	f000 fab2 	bl	800cdd8 <_read_r>
 800c874:	2800      	cmp	r0, #0
 800c876:	bfab      	itete	ge
 800c878:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c87a:	89a3      	ldrhlt	r3, [r4, #12]
 800c87c:	181b      	addge	r3, r3, r0
 800c87e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c882:	bfac      	ite	ge
 800c884:	6563      	strge	r3, [r4, #84]	; 0x54
 800c886:	81a3      	strhlt	r3, [r4, #12]
 800c888:	bd10      	pop	{r4, pc}

0800c88a <__swrite>:
 800c88a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c88e:	461f      	mov	r7, r3
 800c890:	898b      	ldrh	r3, [r1, #12]
 800c892:	05db      	lsls	r3, r3, #23
 800c894:	4605      	mov	r5, r0
 800c896:	460c      	mov	r4, r1
 800c898:	4616      	mov	r6, r2
 800c89a:	d505      	bpl.n	800c8a8 <__swrite+0x1e>
 800c89c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8a0:	2302      	movs	r3, #2
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	f000 f9c8 	bl	800cc38 <_lseek_r>
 800c8a8:	89a3      	ldrh	r3, [r4, #12]
 800c8aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c8b2:	81a3      	strh	r3, [r4, #12]
 800c8b4:	4632      	mov	r2, r6
 800c8b6:	463b      	mov	r3, r7
 800c8b8:	4628      	mov	r0, r5
 800c8ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8be:	f000 b869 	b.w	800c994 <_write_r>

0800c8c2 <__sseek>:
 800c8c2:	b510      	push	{r4, lr}
 800c8c4:	460c      	mov	r4, r1
 800c8c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8ca:	f000 f9b5 	bl	800cc38 <_lseek_r>
 800c8ce:	1c43      	adds	r3, r0, #1
 800c8d0:	89a3      	ldrh	r3, [r4, #12]
 800c8d2:	bf15      	itete	ne
 800c8d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c8d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c8da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c8de:	81a3      	strheq	r3, [r4, #12]
 800c8e0:	bf18      	it	ne
 800c8e2:	81a3      	strhne	r3, [r4, #12]
 800c8e4:	bd10      	pop	{r4, pc}

0800c8e6 <__sclose>:
 800c8e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8ea:	f000 b8d3 	b.w	800ca94 <_close_r>
	...

0800c8f0 <__swbuf_r>:
 800c8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8f2:	460e      	mov	r6, r1
 800c8f4:	4614      	mov	r4, r2
 800c8f6:	4605      	mov	r5, r0
 800c8f8:	b118      	cbz	r0, 800c902 <__swbuf_r+0x12>
 800c8fa:	6983      	ldr	r3, [r0, #24]
 800c8fc:	b90b      	cbnz	r3, 800c902 <__swbuf_r+0x12>
 800c8fe:	f7ff fd53 	bl	800c3a8 <__sinit>
 800c902:	4b21      	ldr	r3, [pc, #132]	; (800c988 <__swbuf_r+0x98>)
 800c904:	429c      	cmp	r4, r3
 800c906:	d12b      	bne.n	800c960 <__swbuf_r+0x70>
 800c908:	686c      	ldr	r4, [r5, #4]
 800c90a:	69a3      	ldr	r3, [r4, #24]
 800c90c:	60a3      	str	r3, [r4, #8]
 800c90e:	89a3      	ldrh	r3, [r4, #12]
 800c910:	071a      	lsls	r2, r3, #28
 800c912:	d52f      	bpl.n	800c974 <__swbuf_r+0x84>
 800c914:	6923      	ldr	r3, [r4, #16]
 800c916:	b36b      	cbz	r3, 800c974 <__swbuf_r+0x84>
 800c918:	6923      	ldr	r3, [r4, #16]
 800c91a:	6820      	ldr	r0, [r4, #0]
 800c91c:	1ac0      	subs	r0, r0, r3
 800c91e:	6963      	ldr	r3, [r4, #20]
 800c920:	b2f6      	uxtb	r6, r6
 800c922:	4283      	cmp	r3, r0
 800c924:	4637      	mov	r7, r6
 800c926:	dc04      	bgt.n	800c932 <__swbuf_r+0x42>
 800c928:	4621      	mov	r1, r4
 800c92a:	4628      	mov	r0, r5
 800c92c:	f000 f948 	bl	800cbc0 <_fflush_r>
 800c930:	bb30      	cbnz	r0, 800c980 <__swbuf_r+0x90>
 800c932:	68a3      	ldr	r3, [r4, #8]
 800c934:	3b01      	subs	r3, #1
 800c936:	60a3      	str	r3, [r4, #8]
 800c938:	6823      	ldr	r3, [r4, #0]
 800c93a:	1c5a      	adds	r2, r3, #1
 800c93c:	6022      	str	r2, [r4, #0]
 800c93e:	701e      	strb	r6, [r3, #0]
 800c940:	6963      	ldr	r3, [r4, #20]
 800c942:	3001      	adds	r0, #1
 800c944:	4283      	cmp	r3, r0
 800c946:	d004      	beq.n	800c952 <__swbuf_r+0x62>
 800c948:	89a3      	ldrh	r3, [r4, #12]
 800c94a:	07db      	lsls	r3, r3, #31
 800c94c:	d506      	bpl.n	800c95c <__swbuf_r+0x6c>
 800c94e:	2e0a      	cmp	r6, #10
 800c950:	d104      	bne.n	800c95c <__swbuf_r+0x6c>
 800c952:	4621      	mov	r1, r4
 800c954:	4628      	mov	r0, r5
 800c956:	f000 f933 	bl	800cbc0 <_fflush_r>
 800c95a:	b988      	cbnz	r0, 800c980 <__swbuf_r+0x90>
 800c95c:	4638      	mov	r0, r7
 800c95e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c960:	4b0a      	ldr	r3, [pc, #40]	; (800c98c <__swbuf_r+0x9c>)
 800c962:	429c      	cmp	r4, r3
 800c964:	d101      	bne.n	800c96a <__swbuf_r+0x7a>
 800c966:	68ac      	ldr	r4, [r5, #8]
 800c968:	e7cf      	b.n	800c90a <__swbuf_r+0x1a>
 800c96a:	4b09      	ldr	r3, [pc, #36]	; (800c990 <__swbuf_r+0xa0>)
 800c96c:	429c      	cmp	r4, r3
 800c96e:	bf08      	it	eq
 800c970:	68ec      	ldreq	r4, [r5, #12]
 800c972:	e7ca      	b.n	800c90a <__swbuf_r+0x1a>
 800c974:	4621      	mov	r1, r4
 800c976:	4628      	mov	r0, r5
 800c978:	f000 f81e 	bl	800c9b8 <__swsetup_r>
 800c97c:	2800      	cmp	r0, #0
 800c97e:	d0cb      	beq.n	800c918 <__swbuf_r+0x28>
 800c980:	f04f 37ff 	mov.w	r7, #4294967295
 800c984:	e7ea      	b.n	800c95c <__swbuf_r+0x6c>
 800c986:	bf00      	nop
 800c988:	0800d0a0 	.word	0x0800d0a0
 800c98c:	0800d0c0 	.word	0x0800d0c0
 800c990:	0800d080 	.word	0x0800d080

0800c994 <_write_r>:
 800c994:	b538      	push	{r3, r4, r5, lr}
 800c996:	4d07      	ldr	r5, [pc, #28]	; (800c9b4 <_write_r+0x20>)
 800c998:	4604      	mov	r4, r0
 800c99a:	4608      	mov	r0, r1
 800c99c:	4611      	mov	r1, r2
 800c99e:	2200      	movs	r2, #0
 800c9a0:	602a      	str	r2, [r5, #0]
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	f7f6 fb05 	bl	8002fb2 <_write>
 800c9a8:	1c43      	adds	r3, r0, #1
 800c9aa:	d102      	bne.n	800c9b2 <_write_r+0x1e>
 800c9ac:	682b      	ldr	r3, [r5, #0]
 800c9ae:	b103      	cbz	r3, 800c9b2 <_write_r+0x1e>
 800c9b0:	6023      	str	r3, [r4, #0]
 800c9b2:	bd38      	pop	{r3, r4, r5, pc}
 800c9b4:	200056b8 	.word	0x200056b8

0800c9b8 <__swsetup_r>:
 800c9b8:	4b32      	ldr	r3, [pc, #200]	; (800ca84 <__swsetup_r+0xcc>)
 800c9ba:	b570      	push	{r4, r5, r6, lr}
 800c9bc:	681d      	ldr	r5, [r3, #0]
 800c9be:	4606      	mov	r6, r0
 800c9c0:	460c      	mov	r4, r1
 800c9c2:	b125      	cbz	r5, 800c9ce <__swsetup_r+0x16>
 800c9c4:	69ab      	ldr	r3, [r5, #24]
 800c9c6:	b913      	cbnz	r3, 800c9ce <__swsetup_r+0x16>
 800c9c8:	4628      	mov	r0, r5
 800c9ca:	f7ff fced 	bl	800c3a8 <__sinit>
 800c9ce:	4b2e      	ldr	r3, [pc, #184]	; (800ca88 <__swsetup_r+0xd0>)
 800c9d0:	429c      	cmp	r4, r3
 800c9d2:	d10f      	bne.n	800c9f4 <__swsetup_r+0x3c>
 800c9d4:	686c      	ldr	r4, [r5, #4]
 800c9d6:	89a3      	ldrh	r3, [r4, #12]
 800c9d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9dc:	0719      	lsls	r1, r3, #28
 800c9de:	d42c      	bmi.n	800ca3a <__swsetup_r+0x82>
 800c9e0:	06dd      	lsls	r5, r3, #27
 800c9e2:	d411      	bmi.n	800ca08 <__swsetup_r+0x50>
 800c9e4:	2309      	movs	r3, #9
 800c9e6:	6033      	str	r3, [r6, #0]
 800c9e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c9ec:	81a3      	strh	r3, [r4, #12]
 800c9ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f2:	e03e      	b.n	800ca72 <__swsetup_r+0xba>
 800c9f4:	4b25      	ldr	r3, [pc, #148]	; (800ca8c <__swsetup_r+0xd4>)
 800c9f6:	429c      	cmp	r4, r3
 800c9f8:	d101      	bne.n	800c9fe <__swsetup_r+0x46>
 800c9fa:	68ac      	ldr	r4, [r5, #8]
 800c9fc:	e7eb      	b.n	800c9d6 <__swsetup_r+0x1e>
 800c9fe:	4b24      	ldr	r3, [pc, #144]	; (800ca90 <__swsetup_r+0xd8>)
 800ca00:	429c      	cmp	r4, r3
 800ca02:	bf08      	it	eq
 800ca04:	68ec      	ldreq	r4, [r5, #12]
 800ca06:	e7e6      	b.n	800c9d6 <__swsetup_r+0x1e>
 800ca08:	0758      	lsls	r0, r3, #29
 800ca0a:	d512      	bpl.n	800ca32 <__swsetup_r+0x7a>
 800ca0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca0e:	b141      	cbz	r1, 800ca22 <__swsetup_r+0x6a>
 800ca10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca14:	4299      	cmp	r1, r3
 800ca16:	d002      	beq.n	800ca1e <__swsetup_r+0x66>
 800ca18:	4630      	mov	r0, r6
 800ca1a:	f000 f991 	bl	800cd40 <_free_r>
 800ca1e:	2300      	movs	r3, #0
 800ca20:	6363      	str	r3, [r4, #52]	; 0x34
 800ca22:	89a3      	ldrh	r3, [r4, #12]
 800ca24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca28:	81a3      	strh	r3, [r4, #12]
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	6063      	str	r3, [r4, #4]
 800ca2e:	6923      	ldr	r3, [r4, #16]
 800ca30:	6023      	str	r3, [r4, #0]
 800ca32:	89a3      	ldrh	r3, [r4, #12]
 800ca34:	f043 0308 	orr.w	r3, r3, #8
 800ca38:	81a3      	strh	r3, [r4, #12]
 800ca3a:	6923      	ldr	r3, [r4, #16]
 800ca3c:	b94b      	cbnz	r3, 800ca52 <__swsetup_r+0x9a>
 800ca3e:	89a3      	ldrh	r3, [r4, #12]
 800ca40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca48:	d003      	beq.n	800ca52 <__swsetup_r+0x9a>
 800ca4a:	4621      	mov	r1, r4
 800ca4c:	4630      	mov	r0, r6
 800ca4e:	f000 f92b 	bl	800cca8 <__smakebuf_r>
 800ca52:	89a0      	ldrh	r0, [r4, #12]
 800ca54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca58:	f010 0301 	ands.w	r3, r0, #1
 800ca5c:	d00a      	beq.n	800ca74 <__swsetup_r+0xbc>
 800ca5e:	2300      	movs	r3, #0
 800ca60:	60a3      	str	r3, [r4, #8]
 800ca62:	6963      	ldr	r3, [r4, #20]
 800ca64:	425b      	negs	r3, r3
 800ca66:	61a3      	str	r3, [r4, #24]
 800ca68:	6923      	ldr	r3, [r4, #16]
 800ca6a:	b943      	cbnz	r3, 800ca7e <__swsetup_r+0xc6>
 800ca6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca70:	d1ba      	bne.n	800c9e8 <__swsetup_r+0x30>
 800ca72:	bd70      	pop	{r4, r5, r6, pc}
 800ca74:	0781      	lsls	r1, r0, #30
 800ca76:	bf58      	it	pl
 800ca78:	6963      	ldrpl	r3, [r4, #20]
 800ca7a:	60a3      	str	r3, [r4, #8]
 800ca7c:	e7f4      	b.n	800ca68 <__swsetup_r+0xb0>
 800ca7e:	2000      	movs	r0, #0
 800ca80:	e7f7      	b.n	800ca72 <__swsetup_r+0xba>
 800ca82:	bf00      	nop
 800ca84:	200000bc 	.word	0x200000bc
 800ca88:	0800d0a0 	.word	0x0800d0a0
 800ca8c:	0800d0c0 	.word	0x0800d0c0
 800ca90:	0800d080 	.word	0x0800d080

0800ca94 <_close_r>:
 800ca94:	b538      	push	{r3, r4, r5, lr}
 800ca96:	4d06      	ldr	r5, [pc, #24]	; (800cab0 <_close_r+0x1c>)
 800ca98:	2300      	movs	r3, #0
 800ca9a:	4604      	mov	r4, r0
 800ca9c:	4608      	mov	r0, r1
 800ca9e:	602b      	str	r3, [r5, #0]
 800caa0:	f7f6 faa3 	bl	8002fea <_close>
 800caa4:	1c43      	adds	r3, r0, #1
 800caa6:	d102      	bne.n	800caae <_close_r+0x1a>
 800caa8:	682b      	ldr	r3, [r5, #0]
 800caaa:	b103      	cbz	r3, 800caae <_close_r+0x1a>
 800caac:	6023      	str	r3, [r4, #0]
 800caae:	bd38      	pop	{r3, r4, r5, pc}
 800cab0:	200056b8 	.word	0x200056b8

0800cab4 <__sflush_r>:
 800cab4:	898a      	ldrh	r2, [r1, #12]
 800cab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caba:	4605      	mov	r5, r0
 800cabc:	0710      	lsls	r0, r2, #28
 800cabe:	460c      	mov	r4, r1
 800cac0:	d458      	bmi.n	800cb74 <__sflush_r+0xc0>
 800cac2:	684b      	ldr	r3, [r1, #4]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	dc05      	bgt.n	800cad4 <__sflush_r+0x20>
 800cac8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800caca:	2b00      	cmp	r3, #0
 800cacc:	dc02      	bgt.n	800cad4 <__sflush_r+0x20>
 800cace:	2000      	movs	r0, #0
 800cad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cad4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cad6:	2e00      	cmp	r6, #0
 800cad8:	d0f9      	beq.n	800cace <__sflush_r+0x1a>
 800cada:	2300      	movs	r3, #0
 800cadc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cae0:	682f      	ldr	r7, [r5, #0]
 800cae2:	602b      	str	r3, [r5, #0]
 800cae4:	d032      	beq.n	800cb4c <__sflush_r+0x98>
 800cae6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cae8:	89a3      	ldrh	r3, [r4, #12]
 800caea:	075a      	lsls	r2, r3, #29
 800caec:	d505      	bpl.n	800cafa <__sflush_r+0x46>
 800caee:	6863      	ldr	r3, [r4, #4]
 800caf0:	1ac0      	subs	r0, r0, r3
 800caf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800caf4:	b10b      	cbz	r3, 800cafa <__sflush_r+0x46>
 800caf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800caf8:	1ac0      	subs	r0, r0, r3
 800cafa:	2300      	movs	r3, #0
 800cafc:	4602      	mov	r2, r0
 800cafe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb00:	6a21      	ldr	r1, [r4, #32]
 800cb02:	4628      	mov	r0, r5
 800cb04:	47b0      	blx	r6
 800cb06:	1c43      	adds	r3, r0, #1
 800cb08:	89a3      	ldrh	r3, [r4, #12]
 800cb0a:	d106      	bne.n	800cb1a <__sflush_r+0x66>
 800cb0c:	6829      	ldr	r1, [r5, #0]
 800cb0e:	291d      	cmp	r1, #29
 800cb10:	d82c      	bhi.n	800cb6c <__sflush_r+0xb8>
 800cb12:	4a2a      	ldr	r2, [pc, #168]	; (800cbbc <__sflush_r+0x108>)
 800cb14:	40ca      	lsrs	r2, r1
 800cb16:	07d6      	lsls	r6, r2, #31
 800cb18:	d528      	bpl.n	800cb6c <__sflush_r+0xb8>
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	6062      	str	r2, [r4, #4]
 800cb1e:	04d9      	lsls	r1, r3, #19
 800cb20:	6922      	ldr	r2, [r4, #16]
 800cb22:	6022      	str	r2, [r4, #0]
 800cb24:	d504      	bpl.n	800cb30 <__sflush_r+0x7c>
 800cb26:	1c42      	adds	r2, r0, #1
 800cb28:	d101      	bne.n	800cb2e <__sflush_r+0x7a>
 800cb2a:	682b      	ldr	r3, [r5, #0]
 800cb2c:	b903      	cbnz	r3, 800cb30 <__sflush_r+0x7c>
 800cb2e:	6560      	str	r0, [r4, #84]	; 0x54
 800cb30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb32:	602f      	str	r7, [r5, #0]
 800cb34:	2900      	cmp	r1, #0
 800cb36:	d0ca      	beq.n	800cace <__sflush_r+0x1a>
 800cb38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb3c:	4299      	cmp	r1, r3
 800cb3e:	d002      	beq.n	800cb46 <__sflush_r+0x92>
 800cb40:	4628      	mov	r0, r5
 800cb42:	f000 f8fd 	bl	800cd40 <_free_r>
 800cb46:	2000      	movs	r0, #0
 800cb48:	6360      	str	r0, [r4, #52]	; 0x34
 800cb4a:	e7c1      	b.n	800cad0 <__sflush_r+0x1c>
 800cb4c:	6a21      	ldr	r1, [r4, #32]
 800cb4e:	2301      	movs	r3, #1
 800cb50:	4628      	mov	r0, r5
 800cb52:	47b0      	blx	r6
 800cb54:	1c41      	adds	r1, r0, #1
 800cb56:	d1c7      	bne.n	800cae8 <__sflush_r+0x34>
 800cb58:	682b      	ldr	r3, [r5, #0]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d0c4      	beq.n	800cae8 <__sflush_r+0x34>
 800cb5e:	2b1d      	cmp	r3, #29
 800cb60:	d001      	beq.n	800cb66 <__sflush_r+0xb2>
 800cb62:	2b16      	cmp	r3, #22
 800cb64:	d101      	bne.n	800cb6a <__sflush_r+0xb6>
 800cb66:	602f      	str	r7, [r5, #0]
 800cb68:	e7b1      	b.n	800cace <__sflush_r+0x1a>
 800cb6a:	89a3      	ldrh	r3, [r4, #12]
 800cb6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb70:	81a3      	strh	r3, [r4, #12]
 800cb72:	e7ad      	b.n	800cad0 <__sflush_r+0x1c>
 800cb74:	690f      	ldr	r7, [r1, #16]
 800cb76:	2f00      	cmp	r7, #0
 800cb78:	d0a9      	beq.n	800cace <__sflush_r+0x1a>
 800cb7a:	0793      	lsls	r3, r2, #30
 800cb7c:	680e      	ldr	r6, [r1, #0]
 800cb7e:	bf08      	it	eq
 800cb80:	694b      	ldreq	r3, [r1, #20]
 800cb82:	600f      	str	r7, [r1, #0]
 800cb84:	bf18      	it	ne
 800cb86:	2300      	movne	r3, #0
 800cb88:	eba6 0807 	sub.w	r8, r6, r7
 800cb8c:	608b      	str	r3, [r1, #8]
 800cb8e:	f1b8 0f00 	cmp.w	r8, #0
 800cb92:	dd9c      	ble.n	800cace <__sflush_r+0x1a>
 800cb94:	6a21      	ldr	r1, [r4, #32]
 800cb96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cb98:	4643      	mov	r3, r8
 800cb9a:	463a      	mov	r2, r7
 800cb9c:	4628      	mov	r0, r5
 800cb9e:	47b0      	blx	r6
 800cba0:	2800      	cmp	r0, #0
 800cba2:	dc06      	bgt.n	800cbb2 <__sflush_r+0xfe>
 800cba4:	89a3      	ldrh	r3, [r4, #12]
 800cba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbaa:	81a3      	strh	r3, [r4, #12]
 800cbac:	f04f 30ff 	mov.w	r0, #4294967295
 800cbb0:	e78e      	b.n	800cad0 <__sflush_r+0x1c>
 800cbb2:	4407      	add	r7, r0
 800cbb4:	eba8 0800 	sub.w	r8, r8, r0
 800cbb8:	e7e9      	b.n	800cb8e <__sflush_r+0xda>
 800cbba:	bf00      	nop
 800cbbc:	20400001 	.word	0x20400001

0800cbc0 <_fflush_r>:
 800cbc0:	b538      	push	{r3, r4, r5, lr}
 800cbc2:	690b      	ldr	r3, [r1, #16]
 800cbc4:	4605      	mov	r5, r0
 800cbc6:	460c      	mov	r4, r1
 800cbc8:	b913      	cbnz	r3, 800cbd0 <_fflush_r+0x10>
 800cbca:	2500      	movs	r5, #0
 800cbcc:	4628      	mov	r0, r5
 800cbce:	bd38      	pop	{r3, r4, r5, pc}
 800cbd0:	b118      	cbz	r0, 800cbda <_fflush_r+0x1a>
 800cbd2:	6983      	ldr	r3, [r0, #24]
 800cbd4:	b90b      	cbnz	r3, 800cbda <_fflush_r+0x1a>
 800cbd6:	f7ff fbe7 	bl	800c3a8 <__sinit>
 800cbda:	4b14      	ldr	r3, [pc, #80]	; (800cc2c <_fflush_r+0x6c>)
 800cbdc:	429c      	cmp	r4, r3
 800cbde:	d11b      	bne.n	800cc18 <_fflush_r+0x58>
 800cbe0:	686c      	ldr	r4, [r5, #4]
 800cbe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d0ef      	beq.n	800cbca <_fflush_r+0xa>
 800cbea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cbec:	07d0      	lsls	r0, r2, #31
 800cbee:	d404      	bmi.n	800cbfa <_fflush_r+0x3a>
 800cbf0:	0599      	lsls	r1, r3, #22
 800cbf2:	d402      	bmi.n	800cbfa <_fflush_r+0x3a>
 800cbf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbf6:	f7ff fc9a 	bl	800c52e <__retarget_lock_acquire_recursive>
 800cbfa:	4628      	mov	r0, r5
 800cbfc:	4621      	mov	r1, r4
 800cbfe:	f7ff ff59 	bl	800cab4 <__sflush_r>
 800cc02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc04:	07da      	lsls	r2, r3, #31
 800cc06:	4605      	mov	r5, r0
 800cc08:	d4e0      	bmi.n	800cbcc <_fflush_r+0xc>
 800cc0a:	89a3      	ldrh	r3, [r4, #12]
 800cc0c:	059b      	lsls	r3, r3, #22
 800cc0e:	d4dd      	bmi.n	800cbcc <_fflush_r+0xc>
 800cc10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc12:	f7ff fc8d 	bl	800c530 <__retarget_lock_release_recursive>
 800cc16:	e7d9      	b.n	800cbcc <_fflush_r+0xc>
 800cc18:	4b05      	ldr	r3, [pc, #20]	; (800cc30 <_fflush_r+0x70>)
 800cc1a:	429c      	cmp	r4, r3
 800cc1c:	d101      	bne.n	800cc22 <_fflush_r+0x62>
 800cc1e:	68ac      	ldr	r4, [r5, #8]
 800cc20:	e7df      	b.n	800cbe2 <_fflush_r+0x22>
 800cc22:	4b04      	ldr	r3, [pc, #16]	; (800cc34 <_fflush_r+0x74>)
 800cc24:	429c      	cmp	r4, r3
 800cc26:	bf08      	it	eq
 800cc28:	68ec      	ldreq	r4, [r5, #12]
 800cc2a:	e7da      	b.n	800cbe2 <_fflush_r+0x22>
 800cc2c:	0800d0a0 	.word	0x0800d0a0
 800cc30:	0800d0c0 	.word	0x0800d0c0
 800cc34:	0800d080 	.word	0x0800d080

0800cc38 <_lseek_r>:
 800cc38:	b538      	push	{r3, r4, r5, lr}
 800cc3a:	4d07      	ldr	r5, [pc, #28]	; (800cc58 <_lseek_r+0x20>)
 800cc3c:	4604      	mov	r4, r0
 800cc3e:	4608      	mov	r0, r1
 800cc40:	4611      	mov	r1, r2
 800cc42:	2200      	movs	r2, #0
 800cc44:	602a      	str	r2, [r5, #0]
 800cc46:	461a      	mov	r2, r3
 800cc48:	f7f6 f9f6 	bl	8003038 <_lseek>
 800cc4c:	1c43      	adds	r3, r0, #1
 800cc4e:	d102      	bne.n	800cc56 <_lseek_r+0x1e>
 800cc50:	682b      	ldr	r3, [r5, #0]
 800cc52:	b103      	cbz	r3, 800cc56 <_lseek_r+0x1e>
 800cc54:	6023      	str	r3, [r4, #0]
 800cc56:	bd38      	pop	{r3, r4, r5, pc}
 800cc58:	200056b8 	.word	0x200056b8

0800cc5c <__swhatbuf_r>:
 800cc5c:	b570      	push	{r4, r5, r6, lr}
 800cc5e:	460e      	mov	r6, r1
 800cc60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc64:	2900      	cmp	r1, #0
 800cc66:	b096      	sub	sp, #88	; 0x58
 800cc68:	4614      	mov	r4, r2
 800cc6a:	461d      	mov	r5, r3
 800cc6c:	da08      	bge.n	800cc80 <__swhatbuf_r+0x24>
 800cc6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cc72:	2200      	movs	r2, #0
 800cc74:	602a      	str	r2, [r5, #0]
 800cc76:	061a      	lsls	r2, r3, #24
 800cc78:	d410      	bmi.n	800cc9c <__swhatbuf_r+0x40>
 800cc7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc7e:	e00e      	b.n	800cc9e <__swhatbuf_r+0x42>
 800cc80:	466a      	mov	r2, sp
 800cc82:	f000 f8bb 	bl	800cdfc <_fstat_r>
 800cc86:	2800      	cmp	r0, #0
 800cc88:	dbf1      	blt.n	800cc6e <__swhatbuf_r+0x12>
 800cc8a:	9a01      	ldr	r2, [sp, #4]
 800cc8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cc90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cc94:	425a      	negs	r2, r3
 800cc96:	415a      	adcs	r2, r3
 800cc98:	602a      	str	r2, [r5, #0]
 800cc9a:	e7ee      	b.n	800cc7a <__swhatbuf_r+0x1e>
 800cc9c:	2340      	movs	r3, #64	; 0x40
 800cc9e:	2000      	movs	r0, #0
 800cca0:	6023      	str	r3, [r4, #0]
 800cca2:	b016      	add	sp, #88	; 0x58
 800cca4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cca8 <__smakebuf_r>:
 800cca8:	898b      	ldrh	r3, [r1, #12]
 800ccaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ccac:	079d      	lsls	r5, r3, #30
 800ccae:	4606      	mov	r6, r0
 800ccb0:	460c      	mov	r4, r1
 800ccb2:	d507      	bpl.n	800ccc4 <__smakebuf_r+0x1c>
 800ccb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ccb8:	6023      	str	r3, [r4, #0]
 800ccba:	6123      	str	r3, [r4, #16]
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	6163      	str	r3, [r4, #20]
 800ccc0:	b002      	add	sp, #8
 800ccc2:	bd70      	pop	{r4, r5, r6, pc}
 800ccc4:	ab01      	add	r3, sp, #4
 800ccc6:	466a      	mov	r2, sp
 800ccc8:	f7ff ffc8 	bl	800cc5c <__swhatbuf_r>
 800cccc:	9900      	ldr	r1, [sp, #0]
 800ccce:	4605      	mov	r5, r0
 800ccd0:	4630      	mov	r0, r6
 800ccd2:	f7ff fc65 	bl	800c5a0 <_malloc_r>
 800ccd6:	b948      	cbnz	r0, 800ccec <__smakebuf_r+0x44>
 800ccd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccdc:	059a      	lsls	r2, r3, #22
 800ccde:	d4ef      	bmi.n	800ccc0 <__smakebuf_r+0x18>
 800cce0:	f023 0303 	bic.w	r3, r3, #3
 800cce4:	f043 0302 	orr.w	r3, r3, #2
 800cce8:	81a3      	strh	r3, [r4, #12]
 800ccea:	e7e3      	b.n	800ccb4 <__smakebuf_r+0xc>
 800ccec:	4b0d      	ldr	r3, [pc, #52]	; (800cd24 <__smakebuf_r+0x7c>)
 800ccee:	62b3      	str	r3, [r6, #40]	; 0x28
 800ccf0:	89a3      	ldrh	r3, [r4, #12]
 800ccf2:	6020      	str	r0, [r4, #0]
 800ccf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccf8:	81a3      	strh	r3, [r4, #12]
 800ccfa:	9b00      	ldr	r3, [sp, #0]
 800ccfc:	6163      	str	r3, [r4, #20]
 800ccfe:	9b01      	ldr	r3, [sp, #4]
 800cd00:	6120      	str	r0, [r4, #16]
 800cd02:	b15b      	cbz	r3, 800cd1c <__smakebuf_r+0x74>
 800cd04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd08:	4630      	mov	r0, r6
 800cd0a:	f000 f889 	bl	800ce20 <_isatty_r>
 800cd0e:	b128      	cbz	r0, 800cd1c <__smakebuf_r+0x74>
 800cd10:	89a3      	ldrh	r3, [r4, #12]
 800cd12:	f023 0303 	bic.w	r3, r3, #3
 800cd16:	f043 0301 	orr.w	r3, r3, #1
 800cd1a:	81a3      	strh	r3, [r4, #12]
 800cd1c:	89a0      	ldrh	r0, [r4, #12]
 800cd1e:	4305      	orrs	r5, r0
 800cd20:	81a5      	strh	r5, [r4, #12]
 800cd22:	e7cd      	b.n	800ccc0 <__smakebuf_r+0x18>
 800cd24:	0800c341 	.word	0x0800c341

0800cd28 <__malloc_lock>:
 800cd28:	4801      	ldr	r0, [pc, #4]	; (800cd30 <__malloc_lock+0x8>)
 800cd2a:	f7ff bc00 	b.w	800c52e <__retarget_lock_acquire_recursive>
 800cd2e:	bf00      	nop
 800cd30:	200056ac 	.word	0x200056ac

0800cd34 <__malloc_unlock>:
 800cd34:	4801      	ldr	r0, [pc, #4]	; (800cd3c <__malloc_unlock+0x8>)
 800cd36:	f7ff bbfb 	b.w	800c530 <__retarget_lock_release_recursive>
 800cd3a:	bf00      	nop
 800cd3c:	200056ac 	.word	0x200056ac

0800cd40 <_free_r>:
 800cd40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd42:	2900      	cmp	r1, #0
 800cd44:	d044      	beq.n	800cdd0 <_free_r+0x90>
 800cd46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd4a:	9001      	str	r0, [sp, #4]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	f1a1 0404 	sub.w	r4, r1, #4
 800cd52:	bfb8      	it	lt
 800cd54:	18e4      	addlt	r4, r4, r3
 800cd56:	f7ff ffe7 	bl	800cd28 <__malloc_lock>
 800cd5a:	4a1e      	ldr	r2, [pc, #120]	; (800cdd4 <_free_r+0x94>)
 800cd5c:	9801      	ldr	r0, [sp, #4]
 800cd5e:	6813      	ldr	r3, [r2, #0]
 800cd60:	b933      	cbnz	r3, 800cd70 <_free_r+0x30>
 800cd62:	6063      	str	r3, [r4, #4]
 800cd64:	6014      	str	r4, [r2, #0]
 800cd66:	b003      	add	sp, #12
 800cd68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd6c:	f7ff bfe2 	b.w	800cd34 <__malloc_unlock>
 800cd70:	42a3      	cmp	r3, r4
 800cd72:	d908      	bls.n	800cd86 <_free_r+0x46>
 800cd74:	6825      	ldr	r5, [r4, #0]
 800cd76:	1961      	adds	r1, r4, r5
 800cd78:	428b      	cmp	r3, r1
 800cd7a:	bf01      	itttt	eq
 800cd7c:	6819      	ldreq	r1, [r3, #0]
 800cd7e:	685b      	ldreq	r3, [r3, #4]
 800cd80:	1949      	addeq	r1, r1, r5
 800cd82:	6021      	streq	r1, [r4, #0]
 800cd84:	e7ed      	b.n	800cd62 <_free_r+0x22>
 800cd86:	461a      	mov	r2, r3
 800cd88:	685b      	ldr	r3, [r3, #4]
 800cd8a:	b10b      	cbz	r3, 800cd90 <_free_r+0x50>
 800cd8c:	42a3      	cmp	r3, r4
 800cd8e:	d9fa      	bls.n	800cd86 <_free_r+0x46>
 800cd90:	6811      	ldr	r1, [r2, #0]
 800cd92:	1855      	adds	r5, r2, r1
 800cd94:	42a5      	cmp	r5, r4
 800cd96:	d10b      	bne.n	800cdb0 <_free_r+0x70>
 800cd98:	6824      	ldr	r4, [r4, #0]
 800cd9a:	4421      	add	r1, r4
 800cd9c:	1854      	adds	r4, r2, r1
 800cd9e:	42a3      	cmp	r3, r4
 800cda0:	6011      	str	r1, [r2, #0]
 800cda2:	d1e0      	bne.n	800cd66 <_free_r+0x26>
 800cda4:	681c      	ldr	r4, [r3, #0]
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	6053      	str	r3, [r2, #4]
 800cdaa:	4421      	add	r1, r4
 800cdac:	6011      	str	r1, [r2, #0]
 800cdae:	e7da      	b.n	800cd66 <_free_r+0x26>
 800cdb0:	d902      	bls.n	800cdb8 <_free_r+0x78>
 800cdb2:	230c      	movs	r3, #12
 800cdb4:	6003      	str	r3, [r0, #0]
 800cdb6:	e7d6      	b.n	800cd66 <_free_r+0x26>
 800cdb8:	6825      	ldr	r5, [r4, #0]
 800cdba:	1961      	adds	r1, r4, r5
 800cdbc:	428b      	cmp	r3, r1
 800cdbe:	bf04      	itt	eq
 800cdc0:	6819      	ldreq	r1, [r3, #0]
 800cdc2:	685b      	ldreq	r3, [r3, #4]
 800cdc4:	6063      	str	r3, [r4, #4]
 800cdc6:	bf04      	itt	eq
 800cdc8:	1949      	addeq	r1, r1, r5
 800cdca:	6021      	streq	r1, [r4, #0]
 800cdcc:	6054      	str	r4, [r2, #4]
 800cdce:	e7ca      	b.n	800cd66 <_free_r+0x26>
 800cdd0:	b003      	add	sp, #12
 800cdd2:	bd30      	pop	{r4, r5, pc}
 800cdd4:	200056b0 	.word	0x200056b0

0800cdd8 <_read_r>:
 800cdd8:	b538      	push	{r3, r4, r5, lr}
 800cdda:	4d07      	ldr	r5, [pc, #28]	; (800cdf8 <_read_r+0x20>)
 800cddc:	4604      	mov	r4, r0
 800cdde:	4608      	mov	r0, r1
 800cde0:	4611      	mov	r1, r2
 800cde2:	2200      	movs	r2, #0
 800cde4:	602a      	str	r2, [r5, #0]
 800cde6:	461a      	mov	r2, r3
 800cde8:	f7f6 f8c6 	bl	8002f78 <_read>
 800cdec:	1c43      	adds	r3, r0, #1
 800cdee:	d102      	bne.n	800cdf6 <_read_r+0x1e>
 800cdf0:	682b      	ldr	r3, [r5, #0]
 800cdf2:	b103      	cbz	r3, 800cdf6 <_read_r+0x1e>
 800cdf4:	6023      	str	r3, [r4, #0]
 800cdf6:	bd38      	pop	{r3, r4, r5, pc}
 800cdf8:	200056b8 	.word	0x200056b8

0800cdfc <_fstat_r>:
 800cdfc:	b538      	push	{r3, r4, r5, lr}
 800cdfe:	4d07      	ldr	r5, [pc, #28]	; (800ce1c <_fstat_r+0x20>)
 800ce00:	2300      	movs	r3, #0
 800ce02:	4604      	mov	r4, r0
 800ce04:	4608      	mov	r0, r1
 800ce06:	4611      	mov	r1, r2
 800ce08:	602b      	str	r3, [r5, #0]
 800ce0a:	f7f6 f8fa 	bl	8003002 <_fstat>
 800ce0e:	1c43      	adds	r3, r0, #1
 800ce10:	d102      	bne.n	800ce18 <_fstat_r+0x1c>
 800ce12:	682b      	ldr	r3, [r5, #0]
 800ce14:	b103      	cbz	r3, 800ce18 <_fstat_r+0x1c>
 800ce16:	6023      	str	r3, [r4, #0]
 800ce18:	bd38      	pop	{r3, r4, r5, pc}
 800ce1a:	bf00      	nop
 800ce1c:	200056b8 	.word	0x200056b8

0800ce20 <_isatty_r>:
 800ce20:	b538      	push	{r3, r4, r5, lr}
 800ce22:	4d06      	ldr	r5, [pc, #24]	; (800ce3c <_isatty_r+0x1c>)
 800ce24:	2300      	movs	r3, #0
 800ce26:	4604      	mov	r4, r0
 800ce28:	4608      	mov	r0, r1
 800ce2a:	602b      	str	r3, [r5, #0]
 800ce2c:	f7f6 f8f9 	bl	8003022 <_isatty>
 800ce30:	1c43      	adds	r3, r0, #1
 800ce32:	d102      	bne.n	800ce3a <_isatty_r+0x1a>
 800ce34:	682b      	ldr	r3, [r5, #0]
 800ce36:	b103      	cbz	r3, 800ce3a <_isatty_r+0x1a>
 800ce38:	6023      	str	r3, [r4, #0]
 800ce3a:	bd38      	pop	{r3, r4, r5, pc}
 800ce3c:	200056b8 	.word	0x200056b8

0800ce40 <_init>:
 800ce40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce42:	bf00      	nop
 800ce44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce46:	bc08      	pop	{r3}
 800ce48:	469e      	mov	lr, r3
 800ce4a:	4770      	bx	lr

0800ce4c <_fini>:
 800ce4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce4e:	bf00      	nop
 800ce50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce52:	bc08      	pop	{r3}
 800ce54:	469e      	mov	lr, r3
 800ce56:	4770      	bx	lr
